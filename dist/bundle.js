(()=>{var t={234:function(t,e){!function(t){"use strict";var e={3:"abstract boolean byte char class double enum export extends final float goto implements import int interface long native package private protected public short static super synchronized throws transient volatile",5:"class enum extends super const export import",6:"enum",strict:"implements interface let package private protected public static yield",strictBind:"eval arguments"},i="break case catch continue debugger default do else finally for function if return switch throw try var while with null true false instanceof typeof void delete new in this",n={5:i,"5module":i+" export import",6:i+" const class extends export import super"},r=/^in(stanceof)?$/,s="ªµºÀ-ÖØ-öø-ˁˆ-ˑˠ-ˤˬˮͰ-ʹͶͷͺ-ͽͿΆΈ-ΊΌΎ-ΡΣ-ϵϷ-ҁҊ-ԯԱ-Ֆՙՠ-ֈא-תׯ-ײؠ-يٮٯٱ-ۓەۥۦۮۯۺ-ۼۿܐܒ-ܯݍ-ޥޱߊ-ߪߴߵߺࠀ-ࠕࠚࠤࠨࡀ-ࡘࡠ-ࡪࢠ-ࢴࢶ-ࣇऄ-हऽॐक़-ॡॱ-ঀঅ-ঌএঐও-নপ-রলশ-হঽৎড়ঢ়য়-ৡৰৱৼਅ-ਊਏਐਓ-ਨਪ-ਰਲਲ਼ਵਸ਼ਸਹਖ਼-ੜਫ਼ੲ-ੴઅ-ઍએ-ઑઓ-નપ-રલળવ-હઽૐૠૡૹଅ-ଌଏଐଓ-ନପ-ରଲଳଵ-ହଽଡ଼ଢ଼ୟ-ୡୱஃஅ-ஊஎ-ஐஒ-கஙசஜஞடணதந-பம-ஹௐఅ-ఌఎ-ఐఒ-నప-హఽౘ-ౚౠౡಀಅ-ಌಎ-ಐಒ-ನಪ-ಳವ-ಹಽೞೠೡೱೲഄ-ഌഎ-ഐഒ-ഺഽൎൔ-ൖൟ-ൡൺ-ൿඅ-ඖක-නඳ-රලව-ෆก-ะาำเ-ๆກຂຄຆ-ຊຌ-ຣລວ-ະາຳຽເ-ໄໆໜ-ໟༀཀ-ཇཉ-ཬྈ-ྌက-ဪဿၐ-ၕၚ-ၝၡၥၦၮ-ၰၵ-ႁႎႠ-ჅჇჍა-ჺჼ-ቈቊ-ቍቐ-ቖቘቚ-ቝበ-ኈኊ-ኍነ-ኰኲ-ኵኸ-ኾዀዂ-ዅወ-ዖዘ-ጐጒ-ጕጘ-ፚᎀ-ᎏᎠ-Ᏽᏸ-ᏽᐁ-ᙬᙯ-ᙿᚁ-ᚚᚠ-ᛪᛮ-ᛸᜀ-ᜌᜎ-ᜑᜠ-ᜱᝀ-ᝑᝠ-ᝬᝮ-ᝰក-ឳៗៜᠠ-ᡸᢀ-ᢨᢪᢰ-ᣵᤀ-ᤞᥐ-ᥭᥰ-ᥴᦀ-ᦫᦰ-ᧉᨀ-ᨖᨠ-ᩔᪧᬅ-ᬳᭅ-ᭋᮃ-ᮠᮮᮯᮺ-ᯥᰀ-ᰣᱍ-ᱏᱚ-ᱽᲀ-ᲈᲐ-ᲺᲽ-Ჿᳩ-ᳬᳮ-ᳳᳵᳶᳺᴀ-ᶿḀ-ἕἘ-Ἕἠ-ὅὈ-Ὅὐ-ὗὙὛὝὟ-ώᾀ-ᾴᾶ-ᾼιῂ-ῄῆ-ῌῐ-ΐῖ-Ίῠ-Ῥῲ-ῴῶ-ῼⁱⁿₐ-ₜℂℇℊ-ℓℕ℘-ℝℤΩℨK-ℹℼ-ℿⅅ-ⅉⅎⅠ-ↈⰀ-Ⱞⰰ-ⱞⱠ-ⳤⳫ-ⳮⳲⳳⴀ-ⴥⴧⴭⴰ-ⵧⵯⶀ-ⶖⶠ-ⶦⶨ-ⶮⶰ-ⶶⶸ-ⶾⷀ-ⷆⷈ-ⷎⷐ-ⷖⷘ-ⷞ々-〇〡-〩〱-〵〸-〼ぁ-ゖ゛-ゟァ-ヺー-ヿㄅ-ㄯㄱ-ㆎㆠ-ㆿㇰ-ㇿ㐀-䶿一-鿼ꀀ-ꒌꓐ-ꓽꔀ-ꘌꘐ-ꘟꘪꘫꙀ-ꙮꙿ-ꚝꚠ-ꛯꜗ-ꜟꜢ-ꞈꞋ-ꞿꟂ-ꟊꟵ-ꠁꠃ-ꠅꠇ-ꠊꠌ-ꠢꡀ-ꡳꢂ-ꢳꣲ-ꣷꣻꣽꣾꤊ-ꤥꤰ-ꥆꥠ-ꥼꦄ-ꦲꧏꧠ-ꧤꧦ-ꧯꧺ-ꧾꨀ-ꨨꩀ-ꩂꩄ-ꩋꩠ-ꩶꩺꩾ-ꪯꪱꪵꪶꪹ-ꪽꫀꫂꫛ-ꫝꫠ-ꫪꫲ-ꫴꬁ-ꬆꬉ-ꬎꬑ-ꬖꬠ-ꬦꬨ-ꬮꬰ-ꭚꭜ-ꭩꭰ-ꯢ가-힣ힰ-ퟆퟋ-ퟻ豈-舘並-龎ﬀ-ﬆﬓ-ﬗיִײַ-ﬨשׁ-זּטּ-לּמּנּסּףּפּצּ-ﮱﯓ-ﴽﵐ-ﶏﶒ-ﷇﷰ-ﷻﹰ-ﹴﹶ-ﻼＡ-Ｚａ-ｚｦ-ﾾￂ-ￇￊ-ￏￒ-ￗￚ-ￜ",a="‌‍·̀-ͯ·҃-֑҇-ׇֽֿׁׂׅׄؐ-ًؚ-٩ٰۖ-ۜ۟-۪ۤۧۨ-ۭ۰-۹ܑܰ-݊ަ-ް߀-߉߫-߽߳ࠖ-࠙ࠛ-ࠣࠥ-ࠧࠩ-࡙࠭-࡛࣓-ࣣ࣡-ःऺ-़ा-ॏ॑-ॗॢॣ०-९ঁ-ঃ়া-ৄেৈো-্ৗৢৣ০-৯৾ਁ-ਃ਼ਾ-ੂੇੈੋ-੍ੑ੦-ੱੵઁ-ઃ઼ા-ૅે-ૉો-્ૢૣ૦-૯ૺ-૿ଁ-ଃ଼ା-ୄେୈୋ-୍୕-ୗୢୣ୦-୯ஂா-ூெ-ைொ-்ௗ௦-௯ఀ-ఄా-ౄె-ైొ-్ౕౖౢౣ౦-౯ಁ-ಃ಼ಾ-ೄೆ-ೈೊ-್ೕೖೢೣ೦-೯ഀ-ഃ഻഼ാ-ൄെ-ൈൊ-്ൗൢൣ൦-൯ඁ-ඃ්ා-ුූෘ-ෟ෦-෯ෲෳัิ-ฺ็-๎๐-๙ັິ-ຼ່-ໍ໐-໙༘༙༠-༩༹༵༷༾༿ཱ-྄྆྇ྍ-ྗྙ-ྼ࿆ါ-ှ၀-၉ၖ-ၙၞ-ၠၢ-ၤၧ-ၭၱ-ၴႂ-ႍႏ-ႝ፝-፟፩-፱ᜒ-᜔ᜲ-᜴ᝒᝓᝲᝳ឴-៓៝០-៩᠋-᠍᠐-᠙ᢩᤠ-ᤫᤰ-᤻᥆-᥏᧐-᧚ᨗ-ᨛᩕ-ᩞ᩠-᩿᩼-᪉᪐-᪙᪰-᪽ᪿᫀᬀ-ᬄ᬴-᭄᭐-᭙᭫-᭳ᮀ-ᮂᮡ-ᮭ᮰-᮹᯦-᯳ᰤ-᰷᱀-᱉᱐-᱙᳐-᳔᳒-᳨᳭᳴᳷-᳹᷀-᷹᷻-᷿‿⁀⁔⃐-⃥⃜⃡-⃰⳯-⵿⳱ⷠ-〪ⷿ-゙゚〯꘠-꘩꙯ꙴ-꙽ꚞꚟ꛰꛱ꠂ꠆ꠋꠣ-ꠧ꠬ꢀꢁꢴ-ꣅ꣐-꣙꣠-꣱ꣿ-꤉ꤦ-꤭ꥇ-꥓ꦀ-ꦃ꦳-꧀꧐-꧙ꧥ꧰-꧹ꨩ-ꨶꩃꩌꩍ꩐-꩙ꩻ-ꩽꪰꪲ-ꪴꪷꪸꪾ꪿꫁ꫫ-ꫯꫵ꫶ꯣ-ꯪ꯬꯭꯰-꯹ﬞ︀-️︠-︯︳︴﹍-﹏０-９＿",o=new RegExp("["+s+"]"),h=new RegExp("["+s+a+"]");s=a=null;var u=[0,11,2,25,2,18,2,1,2,14,3,13,35,122,70,52,268,28,4,48,48,31,14,29,6,37,11,29,3,35,5,7,2,4,43,157,19,35,5,35,5,39,9,51,157,310,10,21,11,7,153,5,3,0,2,43,2,1,4,0,3,22,11,22,10,30,66,18,2,1,11,21,11,25,71,55,7,1,65,0,16,3,2,2,2,28,43,28,4,28,36,7,2,27,28,53,11,21,11,18,14,17,111,72,56,50,14,50,14,35,349,41,7,1,79,28,11,0,9,21,107,20,28,22,13,52,76,44,33,24,27,35,30,0,3,0,9,34,4,0,13,47,15,3,22,0,2,0,36,17,2,24,85,6,2,0,2,3,2,14,2,9,8,46,39,7,3,1,3,21,2,6,2,1,2,4,4,0,19,0,13,4,159,52,19,3,21,2,31,47,21,1,2,0,185,46,42,3,37,47,21,0,60,42,14,0,72,26,230,43,117,63,32,7,3,0,3,7,2,1,2,23,16,0,2,0,95,7,3,38,17,0,2,0,29,0,11,39,8,0,22,0,12,45,20,0,35,56,264,8,2,36,18,0,50,29,113,6,2,1,2,37,22,0,26,5,2,1,2,31,15,0,328,18,190,0,80,921,103,110,18,195,2749,1070,4050,582,8634,568,8,30,114,29,19,47,17,3,32,20,6,18,689,63,129,74,6,0,67,12,65,1,2,0,29,6135,9,1237,43,8,8952,286,50,2,18,3,9,395,2309,106,6,12,4,8,8,9,5991,84,2,70,2,1,3,0,3,1,3,3,2,11,2,0,2,6,2,64,2,3,3,7,2,6,2,27,2,3,2,4,2,0,4,6,2,339,3,24,2,24,2,30,2,24,2,30,2,24,2,30,2,24,2,30,2,24,2,7,2357,44,11,6,17,0,370,43,1301,196,60,67,8,0,1205,3,2,26,2,1,2,0,3,0,2,9,2,3,2,0,2,0,7,0,5,0,2,0,2,0,2,2,2,1,2,0,3,0,2,0,2,0,2,0,2,0,2,1,2,0,3,3,2,6,2,3,2,3,2,0,2,9,2,16,6,2,2,4,2,16,4421,42717,35,4148,12,221,3,5761,15,7472,3104,541,1507,4938],c=[509,0,227,0,150,4,294,9,1368,2,2,1,6,3,41,2,5,0,166,1,574,3,9,9,370,1,154,10,176,2,54,14,32,9,16,3,46,10,54,9,7,2,37,13,2,9,6,1,45,0,13,2,49,13,9,3,2,11,83,11,7,0,161,11,6,9,7,3,56,1,2,6,3,1,3,2,10,0,11,1,3,6,4,4,193,17,10,9,5,0,82,19,13,9,214,6,3,8,28,1,83,16,16,9,82,12,9,9,84,14,5,9,243,14,166,9,71,5,2,1,3,3,2,0,2,1,13,9,120,6,3,6,4,0,29,9,41,6,2,3,9,0,10,10,47,15,406,7,2,7,17,9,57,21,2,13,123,5,4,0,2,1,2,6,2,0,9,9,49,4,2,1,2,4,9,9,330,3,19306,9,135,4,60,6,26,9,1014,0,2,54,8,3,82,0,12,1,19628,1,5319,4,4,5,9,7,3,6,31,3,149,2,1418,49,513,54,5,49,9,0,15,0,23,4,2,14,1361,6,2,16,3,6,2,1,2,4,262,6,10,9,419,13,1495,6,110,6,6,9,4759,9,787719,239];function l(t,e){for(var i=65536,n=0;n<e.length;n+=2){if((i+=e[n])>t)return!1;if((i+=e[n+1])>=t)return!0}}function f(t,e){return t<65?36===t:t<91||(t<97?95===t:t<123||(t<=65535?t>=170&&o.test(String.fromCharCode(t)):!1!==e&&l(t,u)))}function d(t,e){return t<48?36===t:t<58||!(t<65)&&(t<91||(t<97?95===t:t<123||(t<=65535?t>=170&&h.test(String.fromCharCode(t)):!1!==e&&(l(t,u)||l(t,c)))))}var p=function(t,e){void 0===e&&(e={}),this.label=t,this.keyword=e.keyword,this.beforeExpr=!!e.beforeExpr,this.startsExpr=!!e.startsExpr,this.isLoop=!!e.isLoop,this.isAssign=!!e.isAssign,this.prefix=!!e.prefix,this.postfix=!!e.postfix,this.binop=e.binop||null,this.updateContext=null};function g(t,e){return new p(t,{beforeExpr:!0,binop:e})}var _={beforeExpr:!0},v={startsExpr:!0},m={};function y(t,e){return void 0===e&&(e={}),e.keyword=t,m[t]=new p(t,e)}var x={num:new p("num",v),regexp:new p("regexp",v),string:new p("string",v),name:new p("name",v),eof:new p("eof"),bracketL:new p("[",{beforeExpr:!0,startsExpr:!0}),bracketR:new p("]"),braceL:new p("{",{beforeExpr:!0,startsExpr:!0}),braceR:new p("}"),parenL:new p("(",{beforeExpr:!0,startsExpr:!0}),parenR:new p(")"),comma:new p(",",_),semi:new p(";",_),colon:new p(":",_),dot:new p("."),question:new p("?",_),questionDot:new p("?."),arrow:new p("=>",_),template:new p("template"),invalidTemplate:new p("invalidTemplate"),ellipsis:new p("...",_),backQuote:new p("`",v),dollarBraceL:new p("${",{beforeExpr:!0,startsExpr:!0}),eq:new p("=",{beforeExpr:!0,isAssign:!0}),assign:new p("_=",{beforeExpr:!0,isAssign:!0}),incDec:new p("++/--",{prefix:!0,postfix:!0,startsExpr:!0}),prefix:new p("!/~",{beforeExpr:!0,prefix:!0,startsExpr:!0}),logicalOR:g("||",1),logicalAND:g("&&",2),bitwiseOR:g("|",3),bitwiseXOR:g("^",4),bitwiseAND:g("&",5),equality:g("==/!=/===/!==",6),relational:g("</>/<=/>=",7),bitShift:g("<</>>/>>>",8),plusMin:new p("+/-",{beforeExpr:!0,binop:9,prefix:!0,startsExpr:!0}),modulo:g("%",10),star:g("*",10),slash:g("/",10),starstar:new p("**",{beforeExpr:!0}),coalesce:g("??",1),_break:y("break"),_case:y("case",_),_catch:y("catch"),_continue:y("continue"),_debugger:y("debugger"),_default:y("default",_),_do:y("do",{isLoop:!0,beforeExpr:!0}),_else:y("else",_),_finally:y("finally"),_for:y("for",{isLoop:!0}),_function:y("function",v),_if:y("if"),_return:y("return",_),_switch:y("switch"),_throw:y("throw",_),_try:y("try"),_var:y("var"),_const:y("const"),_while:y("while",{isLoop:!0}),_with:y("with"),_new:y("new",{beforeExpr:!0,startsExpr:!0}),_this:y("this",v),_super:y("super",v),_class:y("class",v),_extends:y("extends",_),_export:y("export"),_import:y("import",v),_null:y("null",v),_true:y("true",v),_false:y("false",v),_in:y("in",{beforeExpr:!0,binop:7}),_instanceof:y("instanceof",{beforeExpr:!0,binop:7}),_typeof:y("typeof",{beforeExpr:!0,prefix:!0,startsExpr:!0}),_void:y("void",{beforeExpr:!0,prefix:!0,startsExpr:!0}),_delete:y("delete",{beforeExpr:!0,prefix:!0,startsExpr:!0})},w=/\r\n?|\n|\u2028|\u2029/,b=new RegExp(w.source,"g");function C(t,e){return 10===t||13===t||!e&&(8232===t||8233===t)}var S=/[\u1680\u2000-\u200a\u202f\u205f\u3000\ufeff]/,k=/(?:\s|\/\/.*|\/\*[^]*?\*\/)*/g,A=Object.prototype,I=A.hasOwnProperty,P=A.toString;function E(t,e){return I.call(t,e)}var T=Array.isArray||function(t){return"[object Array]"===P.call(t)};function M(t){return new RegExp("^(?:"+t.replace(/ /g,"|")+")$")}var L=function(t,e){this.line=t,this.column=e};L.prototype.offset=function(t){return new L(this.line,this.column+t)};var N=function(t,e,i){this.start=e,this.end=i,null!==t.sourceFile&&(this.source=t.sourceFile)};function O(t,e){for(var i=1,n=0;;){b.lastIndex=n;var r=b.exec(t);if(!(r&&r.index<e))return new L(i,e-n);++i,n=r.index+r[0].length}}var z={ecmaVersion:null,sourceType:"script",onInsertedSemicolon:null,onTrailingComma:null,allowReserved:null,allowReturnOutsideFunction:!1,allowImportExportEverywhere:!1,allowAwaitOutsideFunction:!1,allowHashBang:!1,locations:!1,onToken:null,onComment:null,ranges:!1,program:null,sourceFile:null,directSourceFile:null,preserveParens:!1},V=!1;function R(t){var e={};for(var i in z)e[i]=t&&E(t,i)?t[i]:z[i];if("latest"===e.ecmaVersion?e.ecmaVersion=1e8:null==e.ecmaVersion?(!V&&"object"==typeof console&&console.warn&&(V=!0,console.warn("Since Acorn 8.0.0, options.ecmaVersion is required.\nDefaulting to 2020, but this will stop working in the future.")),e.ecmaVersion=11):e.ecmaVersion>=2015&&(e.ecmaVersion-=2009),null==e.allowReserved&&(e.allowReserved=e.ecmaVersion<5),T(e.onToken)){var n=e.onToken;e.onToken=function(t){return n.push(t)}}return T(e.onComment)&&(e.onComment=function(t,e){return function(i,n,r,s,a,o){var h={type:i?"Block":"Line",value:n,start:r,end:s};t.locations&&(h.loc=new N(this,a,o)),t.ranges&&(h.range=[r,s]),e.push(h)}}(e,e.onComment)),e}function B(t,e){return 2|(t?4:0)|(e?8:0)}var D=function(t,i,r){this.options=t=R(t),this.sourceFile=t.sourceFile,this.keywords=M(n[t.ecmaVersion>=6?6:"module"===t.sourceType?"5module":5]);var s="";!0!==t.allowReserved&&(s=e[t.ecmaVersion>=6?6:5===t.ecmaVersion?5:3],"module"===t.sourceType&&(s+=" await")),this.reservedWords=M(s);var a=(s?s+" ":"")+e.strict;this.reservedWordsStrict=M(a),this.reservedWordsStrictBind=M(a+" "+e.strictBind),this.input=String(i),this.containsEsc=!1,r?(this.pos=r,this.lineStart=this.input.lastIndexOf("\n",r-1)+1,this.curLine=this.input.slice(0,this.lineStart).split(w).length):(this.pos=this.lineStart=0,this.curLine=1),this.type=x.eof,this.value=null,this.start=this.end=this.pos,this.startLoc=this.endLoc=this.curPosition(),this.lastTokEndLoc=this.lastTokStartLoc=null,this.lastTokStart=this.lastTokEnd=this.pos,this.context=this.initialContext(),this.exprAllowed=!0,this.inModule="module"===t.sourceType,this.strict=this.inModule||this.strictDirective(this.pos),this.potentialArrowAt=-1,this.yieldPos=this.awaitPos=this.awaitIdentPos=0,this.labels=[],this.undefinedExports={},0===this.pos&&t.allowHashBang&&"#!"===this.input.slice(0,2)&&this.skipLineComment(2),this.scopeStack=[],this.enterScope(1),this.regexpState=null},F={inFunction:{configurable:!0},inGenerator:{configurable:!0},inAsync:{configurable:!0},allowSuper:{configurable:!0},allowDirectSuper:{configurable:!0},treatFunctionsAsVar:{configurable:!0},inNonArrowFunction:{configurable:!0}};D.prototype.parse=function(){var t=this.options.program||this.startNode();return this.nextToken(),this.parseTopLevel(t)},F.inFunction.get=function(){return(2&this.currentVarScope().flags)>0},F.inGenerator.get=function(){return(8&this.currentVarScope().flags)>0},F.inAsync.get=function(){return(4&this.currentVarScope().flags)>0},F.allowSuper.get=function(){return(64&this.currentThisScope().flags)>0},F.allowDirectSuper.get=function(){return(128&this.currentThisScope().flags)>0},F.treatFunctionsAsVar.get=function(){return this.treatFunctionsAsVarInScope(this.currentScope())},F.inNonArrowFunction.get=function(){return(2&this.currentThisScope().flags)>0},D.extend=function(){for(var t=[],e=arguments.length;e--;)t[e]=arguments[e];for(var i=this,n=0;n<t.length;n++)i=t[n](i);return i},D.parse=function(t,e){return new this(e,t).parse()},D.parseExpressionAt=function(t,e,i){var n=new this(i,t,e);return n.nextToken(),n.parseExpression()},D.tokenizer=function(t,e){return new this(e,t)},Object.defineProperties(D.prototype,F);var j=D.prototype,q=/^(?:'((?:\\.|[^'\\])*?)'|"((?:\\.|[^"\\])*?)")/;function U(){this.shorthandAssign=this.trailingComma=this.parenthesizedAssign=this.parenthesizedBind=this.doubleProto=-1}j.strictDirective=function(t){for(;;){k.lastIndex=t,t+=k.exec(this.input)[0].length;var e=q.exec(this.input.slice(t));if(!e)return!1;if("use strict"===(e[1]||e[2])){k.lastIndex=t+e[0].length;var i=k.exec(this.input),n=i.index+i[0].length,r=this.input.charAt(n);return";"===r||"}"===r||w.test(i[0])&&!(/[(`.[+\-/*%<>=,?^&]/.test(r)||"!"===r&&"="===this.input.charAt(n+1))}t+=e[0].length,k.lastIndex=t,t+=k.exec(this.input)[0].length,";"===this.input[t]&&t++}},j.eat=function(t){return this.type===t&&(this.next(),!0)},j.isContextual=function(t){return this.type===x.name&&this.value===t&&!this.containsEsc},j.eatContextual=function(t){return!!this.isContextual(t)&&(this.next(),!0)},j.expectContextual=function(t){this.eatContextual(t)||this.unexpected()},j.canInsertSemicolon=function(){return this.type===x.eof||this.type===x.braceR||w.test(this.input.slice(this.lastTokEnd,this.start))},j.insertSemicolon=function(){if(this.canInsertSemicolon())return this.options.onInsertedSemicolon&&this.options.onInsertedSemicolon(this.lastTokEnd,this.lastTokEndLoc),!0},j.semicolon=function(){this.eat(x.semi)||this.insertSemicolon()||this.unexpected()},j.afterTrailingComma=function(t,e){if(this.type===t)return this.options.onTrailingComma&&this.options.onTrailingComma(this.lastTokStart,this.lastTokStartLoc),e||this.next(),!0},j.expect=function(t){this.eat(t)||this.unexpected()},j.unexpected=function(t){this.raise(null!=t?t:this.start,"Unexpected token")},j.checkPatternErrors=function(t,e){if(t){t.trailingComma>-1&&this.raiseRecoverable(t.trailingComma,"Comma is not permitted after the rest element");var i=e?t.parenthesizedAssign:t.parenthesizedBind;i>-1&&this.raiseRecoverable(i,"Parenthesized pattern")}},j.checkExpressionErrors=function(t,e){if(!t)return!1;var i=t.shorthandAssign,n=t.doubleProto;if(!e)return i>=0||n>=0;i>=0&&this.raise(i,"Shorthand property assignments are valid only in destructuring patterns"),n>=0&&this.raiseRecoverable(n,"Redefinition of __proto__ property")},j.checkYieldAwaitInDefaultParams=function(){this.yieldPos&&(!this.awaitPos||this.yieldPos<this.awaitPos)&&this.raise(this.yieldPos,"Yield expression cannot be a default value"),this.awaitPos&&this.raise(this.awaitPos,"Await expression cannot be a default value")},j.isSimpleAssignTarget=function(t){return"ParenthesizedExpression"===t.type?this.isSimpleAssignTarget(t.expression):"Identifier"===t.type||"MemberExpression"===t.type};var H=D.prototype;H.parseTopLevel=function(t){var e={};for(t.body||(t.body=[]);this.type!==x.eof;){var i=this.parseStatement(null,!0,e);t.body.push(i)}if(this.inModule)for(var n=0,r=Object.keys(this.undefinedExports);n<r.length;n+=1){var s=r[n];this.raiseRecoverable(this.undefinedExports[s].start,"Export '"+s+"' is not defined")}return this.adaptDirectivePrologue(t.body),this.next(),t.sourceType=this.options.sourceType,this.finishNode(t,"Program")};var W={kind:"loop"},G={kind:"switch"};H.isLet=function(t){if(this.options.ecmaVersion<6||!this.isContextual("let"))return!1;k.lastIndex=this.pos;var e=k.exec(this.input),i=this.pos+e[0].length,n=this.input.charCodeAt(i);if(91===n)return!0;if(t)return!1;if(123===n)return!0;if(f(n,!0)){for(var s=i+1;d(this.input.charCodeAt(s),!0);)++s;var a=this.input.slice(i,s);if(!r.test(a))return!0}return!1},H.isAsyncFunction=function(){if(this.options.ecmaVersion<8||!this.isContextual("async"))return!1;k.lastIndex=this.pos;var t=k.exec(this.input),e=this.pos+t[0].length;return!(w.test(this.input.slice(this.pos,e))||"function"!==this.input.slice(e,e+8)||e+8!==this.input.length&&d(this.input.charAt(e+8)))},H.parseStatement=function(t,e,i){var n,r=this.type,s=this.startNode();switch(this.isLet(t)&&(r=x._var,n="let"),r){case x._break:case x._continue:return this.parseBreakContinueStatement(s,r.keyword);case x._debugger:return this.parseDebuggerStatement(s);case x._do:return this.parseDoStatement(s);case x._for:return this.parseForStatement(s);case x._function:return t&&(this.strict||"if"!==t&&"label"!==t)&&this.options.ecmaVersion>=6&&this.unexpected(),this.parseFunctionStatement(s,!1,!t);case x._class:return t&&this.unexpected(),this.parseClass(s,!0);case x._if:return this.parseIfStatement(s);case x._return:return this.parseReturnStatement(s);case x._switch:return this.parseSwitchStatement(s);case x._throw:return this.parseThrowStatement(s);case x._try:return this.parseTryStatement(s);case x._const:case x._var:return n=n||this.value,t&&"var"!==n&&this.unexpected(),this.parseVarStatement(s,n);case x._while:return this.parseWhileStatement(s);case x._with:return this.parseWithStatement(s);case x.braceL:return this.parseBlock(!0,s);case x.semi:return this.parseEmptyStatement(s);case x._export:case x._import:if(this.options.ecmaVersion>10&&r===x._import){k.lastIndex=this.pos;var a=k.exec(this.input),o=this.pos+a[0].length,h=this.input.charCodeAt(o);if(40===h||46===h)return this.parseExpressionStatement(s,this.parseExpression())}return this.options.allowImportExportEverywhere||(e||this.raise(this.start,"'import' and 'export' may only appear at the top level"),this.inModule||this.raise(this.start,"'import' and 'export' may appear only with 'sourceType: module'")),r===x._import?this.parseImport(s):this.parseExport(s,i);default:if(this.isAsyncFunction())return t&&this.unexpected(),this.next(),this.parseFunctionStatement(s,!0,!t);var u=this.value,c=this.parseExpression();return r===x.name&&"Identifier"===c.type&&this.eat(x.colon)?this.parseLabeledStatement(s,u,c,t):this.parseExpressionStatement(s,c)}},H.parseBreakContinueStatement=function(t,e){var i="break"===e;this.next(),this.eat(x.semi)||this.insertSemicolon()?t.label=null:this.type!==x.name?this.unexpected():(t.label=this.parseIdent(),this.semicolon());for(var n=0;n<this.labels.length;++n){var r=this.labels[n];if(null==t.label||r.name===t.label.name){if(null!=r.kind&&(i||"loop"===r.kind))break;if(t.label&&i)break}}return n===this.labels.length&&this.raise(t.start,"Unsyntactic "+e),this.finishNode(t,i?"BreakStatement":"ContinueStatement")},H.parseDebuggerStatement=function(t){return this.next(),this.semicolon(),this.finishNode(t,"DebuggerStatement")},H.parseDoStatement=function(t){return this.next(),this.labels.push(W),t.body=this.parseStatement("do"),this.labels.pop(),this.expect(x._while),t.test=this.parseParenExpression(),this.options.ecmaVersion>=6?this.eat(x.semi):this.semicolon(),this.finishNode(t,"DoWhileStatement")},H.parseForStatement=function(t){this.next();var e=this.options.ecmaVersion>=9&&(this.inAsync||!this.inFunction&&this.options.allowAwaitOutsideFunction)&&this.eatContextual("await")?this.lastTokStart:-1;if(this.labels.push(W),this.enterScope(0),this.expect(x.parenL),this.type===x.semi)return e>-1&&this.unexpected(e),this.parseFor(t,null);var i=this.isLet();if(this.type===x._var||this.type===x._const||i){var n=this.startNode(),r=i?"let":this.value;return this.next(),this.parseVar(n,!0,r),this.finishNode(n,"VariableDeclaration"),(this.type===x._in||this.options.ecmaVersion>=6&&this.isContextual("of"))&&1===n.declarations.length?(this.options.ecmaVersion>=9&&(this.type===x._in?e>-1&&this.unexpected(e):t.await=e>-1),this.parseForIn(t,n)):(e>-1&&this.unexpected(e),this.parseFor(t,n))}var s=new U,a=this.parseExpression(!0,s);return this.type===x._in||this.options.ecmaVersion>=6&&this.isContextual("of")?(this.options.ecmaVersion>=9&&(this.type===x._in?e>-1&&this.unexpected(e):t.await=e>-1),this.toAssignable(a,!1,s),this.checkLValPattern(a),this.parseForIn(t,a)):(this.checkExpressionErrors(s,!0),e>-1&&this.unexpected(e),this.parseFor(t,a))},H.parseFunctionStatement=function(t,e,i){return this.next(),this.parseFunction(t,$|(i?0:Q),!1,e)},H.parseIfStatement=function(t){return this.next(),t.test=this.parseParenExpression(),t.consequent=this.parseStatement("if"),t.alternate=this.eat(x._else)?this.parseStatement("if"):null,this.finishNode(t,"IfStatement")},H.parseReturnStatement=function(t){return this.inFunction||this.options.allowReturnOutsideFunction||this.raise(this.start,"'return' outside of function"),this.next(),this.eat(x.semi)||this.insertSemicolon()?t.argument=null:(t.argument=this.parseExpression(),this.semicolon()),this.finishNode(t,"ReturnStatement")},H.parseSwitchStatement=function(t){var e;this.next(),t.discriminant=this.parseParenExpression(),t.cases=[],this.expect(x.braceL),this.labels.push(G),this.enterScope(0);for(var i=!1;this.type!==x.braceR;)if(this.type===x._case||this.type===x._default){var n=this.type===x._case;e&&this.finishNode(e,"SwitchCase"),t.cases.push(e=this.startNode()),e.consequent=[],this.next(),n?e.test=this.parseExpression():(i&&this.raiseRecoverable(this.lastTokStart,"Multiple default clauses"),i=!0,e.test=null),this.expect(x.colon)}else e||this.unexpected(),e.consequent.push(this.parseStatement(null));return this.exitScope(),e&&this.finishNode(e,"SwitchCase"),this.next(),this.labels.pop(),this.finishNode(t,"SwitchStatement")},H.parseThrowStatement=function(t){return this.next(),w.test(this.input.slice(this.lastTokEnd,this.start))&&this.raise(this.lastTokEnd,"Illegal newline after throw"),t.argument=this.parseExpression(),this.semicolon(),this.finishNode(t,"ThrowStatement")};var Z=[];H.parseTryStatement=function(t){if(this.next(),t.block=this.parseBlock(),t.handler=null,this.type===x._catch){var e=this.startNode();if(this.next(),this.eat(x.parenL)){e.param=this.parseBindingAtom();var i="Identifier"===e.param.type;this.enterScope(i?32:0),this.checkLValPattern(e.param,i?4:2),this.expect(x.parenR)}else this.options.ecmaVersion<10&&this.unexpected(),e.param=null,this.enterScope(0);e.body=this.parseBlock(!1),this.exitScope(),t.handler=this.finishNode(e,"CatchClause")}return t.finalizer=this.eat(x._finally)?this.parseBlock():null,t.handler||t.finalizer||this.raise(t.start,"Missing catch or finally clause"),this.finishNode(t,"TryStatement")},H.parseVarStatement=function(t,e){return this.next(),this.parseVar(t,!1,e),this.semicolon(),this.finishNode(t,"VariableDeclaration")},H.parseWhileStatement=function(t){return this.next(),t.test=this.parseParenExpression(),this.labels.push(W),t.body=this.parseStatement("while"),this.labels.pop(),this.finishNode(t,"WhileStatement")},H.parseWithStatement=function(t){return this.strict&&this.raise(this.start,"'with' in strict mode"),this.next(),t.object=this.parseParenExpression(),t.body=this.parseStatement("with"),this.finishNode(t,"WithStatement")},H.parseEmptyStatement=function(t){return this.next(),this.finishNode(t,"EmptyStatement")},H.parseLabeledStatement=function(t,e,i,n){for(var r=0,s=this.labels;r<s.length;r+=1)s[r].name===e&&this.raise(i.start,"Label '"+e+"' is already declared");for(var a=this.type.isLoop?"loop":this.type===x._switch?"switch":null,o=this.labels.length-1;o>=0;o--){var h=this.labels[o];if(h.statementStart!==t.start)break;h.statementStart=this.start,h.kind=a}return this.labels.push({name:e,kind:a,statementStart:this.start}),t.body=this.parseStatement(n?-1===n.indexOf("label")?n+"label":n:"label"),this.labels.pop(),t.label=i,this.finishNode(t,"LabeledStatement")},H.parseExpressionStatement=function(t,e){return t.expression=e,this.semicolon(),this.finishNode(t,"ExpressionStatement")},H.parseBlock=function(t,e,i){for(void 0===t&&(t=!0),void 0===e&&(e=this.startNode()),e.body=[],this.expect(x.braceL),t&&this.enterScope(0);this.type!==x.braceR;){var n=this.parseStatement(null);e.body.push(n)}return i&&(this.strict=!1),this.next(),t&&this.exitScope(),this.finishNode(e,"BlockStatement")},H.parseFor=function(t,e){return t.init=e,this.expect(x.semi),t.test=this.type===x.semi?null:this.parseExpression(),this.expect(x.semi),t.update=this.type===x.parenR?null:this.parseExpression(),this.expect(x.parenR),t.body=this.parseStatement("for"),this.exitScope(),this.labels.pop(),this.finishNode(t,"ForStatement")},H.parseForIn=function(t,e){var i=this.type===x._in;return this.next(),"VariableDeclaration"===e.type&&null!=e.declarations[0].init&&(!i||this.options.ecmaVersion<8||this.strict||"var"!==e.kind||"Identifier"!==e.declarations[0].id.type)&&this.raise(e.start,(i?"for-in":"for-of")+" loop variable declaration may not have an initializer"),t.left=e,t.right=i?this.parseExpression():this.parseMaybeAssign(),this.expect(x.parenR),t.body=this.parseStatement("for"),this.exitScope(),this.labels.pop(),this.finishNode(t,i?"ForInStatement":"ForOfStatement")},H.parseVar=function(t,e,i){for(t.declarations=[],t.kind=i;;){var n=this.startNode();if(this.parseVarId(n,i),this.eat(x.eq)?n.init=this.parseMaybeAssign(e):"const"!==i||this.type===x._in||this.options.ecmaVersion>=6&&this.isContextual("of")?"Identifier"===n.id.type||e&&(this.type===x._in||this.isContextual("of"))?n.init=null:this.raise(this.lastTokEnd,"Complex binding patterns require an initialization value"):this.unexpected(),t.declarations.push(this.finishNode(n,"VariableDeclarator")),!this.eat(x.comma))break}return t},H.parseVarId=function(t,e){t.id=this.parseBindingAtom(),this.checkLValPattern(t.id,"var"===e?1:2,!1)};var $=1,Q=2;H.parseFunction=function(t,e,i,n){this.initFunction(t),(this.options.ecmaVersion>=9||this.options.ecmaVersion>=6&&!n)&&(this.type===x.star&&e&Q&&this.unexpected(),t.generator=this.eat(x.star)),this.options.ecmaVersion>=8&&(t.async=!!n),e&$&&(t.id=4&e&&this.type!==x.name?null:this.parseIdent(),!t.id||e&Q||this.checkLValSimple(t.id,this.strict||t.generator||t.async?this.treatFunctionsAsVar?1:2:3));var r=this.yieldPos,s=this.awaitPos,a=this.awaitIdentPos;return this.yieldPos=0,this.awaitPos=0,this.awaitIdentPos=0,this.enterScope(B(t.async,t.generator)),e&$||(t.id=this.type===x.name?this.parseIdent():null),this.parseFunctionParams(t),this.parseFunctionBody(t,i,!1),this.yieldPos=r,this.awaitPos=s,this.awaitIdentPos=a,this.finishNode(t,e&$?"FunctionDeclaration":"FunctionExpression")},H.parseFunctionParams=function(t){this.expect(x.parenL),t.params=this.parseBindingList(x.parenR,!1,this.options.ecmaVersion>=8),this.checkYieldAwaitInDefaultParams()},H.parseClass=function(t,e){this.next();var i=this.strict;this.strict=!0,this.parseClassId(t,e),this.parseClassSuper(t);var n=this.startNode(),r=!1;for(n.body=[],this.expect(x.braceL);this.type!==x.braceR;){var s=this.parseClassElement(null!==t.superClass);s&&(n.body.push(s),"MethodDefinition"===s.type&&"constructor"===s.kind&&(r&&this.raise(s.start,"Duplicate constructor in the same class"),r=!0))}return this.strict=i,this.next(),t.body=this.finishNode(n,"ClassBody"),this.finishNode(t,e?"ClassDeclaration":"ClassExpression")},H.parseClassElement=function(t){var e=this;if(this.eat(x.semi))return null;var i=this.startNode(),n=function(t,n){void 0===n&&(n=!1);var r=e.start,s=e.startLoc;return!(!e.eatContextual(t)||(e.type===x.parenL||n&&e.canInsertSemicolon())&&(i.key&&e.unexpected(),i.computed=!1,i.key=e.startNodeAt(r,s),i.key.name=t,e.finishNode(i.key,"Identifier"),1))};i.kind="method",i.static=n("static");var r=this.eat(x.star),s=!1;r||(this.options.ecmaVersion>=8&&n("async",!0)?(s=!0,r=this.options.ecmaVersion>=9&&this.eat(x.star)):n("get")?i.kind="get":n("set")&&(i.kind="set")),i.key||this.parsePropertyName(i);var a=i.key,o=!1;return i.computed||i.static||!("Identifier"===a.type&&"constructor"===a.name||"Literal"===a.type&&"constructor"===a.value)?i.static&&"Identifier"===a.type&&"prototype"===a.name&&this.raise(a.start,"Classes may not have a static property named prototype"):("method"!==i.kind&&this.raise(a.start,"Constructor can't have get/set modifier"),r&&this.raise(a.start,"Constructor can't be a generator"),s&&this.raise(a.start,"Constructor can't be an async method"),i.kind="constructor",o=t),this.parseClassMethod(i,r,s,o),"get"===i.kind&&0!==i.value.params.length&&this.raiseRecoverable(i.value.start,"getter should have no params"),"set"===i.kind&&1!==i.value.params.length&&this.raiseRecoverable(i.value.start,"setter should have exactly one param"),"set"===i.kind&&"RestElement"===i.value.params[0].type&&this.raiseRecoverable(i.value.params[0].start,"Setter cannot use rest params"),i},H.parseClassMethod=function(t,e,i,n){return t.value=this.parseMethod(e,i,n),this.finishNode(t,"MethodDefinition")},H.parseClassId=function(t,e){this.type===x.name?(t.id=this.parseIdent(),e&&this.checkLValSimple(t.id,2,!1)):(!0===e&&this.unexpected(),t.id=null)},H.parseClassSuper=function(t){t.superClass=this.eat(x._extends)?this.parseExprSubscripts():null},H.parseExport=function(t,e){if(this.next(),this.eat(x.star))return this.options.ecmaVersion>=11&&(this.eatContextual("as")?(t.exported=this.parseIdent(!0),this.checkExport(e,t.exported.name,this.lastTokStart)):t.exported=null),this.expectContextual("from"),this.type!==x.string&&this.unexpected(),t.source=this.parseExprAtom(),this.semicolon(),this.finishNode(t,"ExportAllDeclaration");if(this.eat(x._default)){var i;if(this.checkExport(e,"default",this.lastTokStart),this.type===x._function||(i=this.isAsyncFunction())){var n=this.startNode();this.next(),i&&this.next(),t.declaration=this.parseFunction(n,4|$,!1,i)}else if(this.type===x._class){var r=this.startNode();t.declaration=this.parseClass(r,"nullableID")}else t.declaration=this.parseMaybeAssign(),this.semicolon();return this.finishNode(t,"ExportDefaultDeclaration")}if(this.shouldParseExportStatement())t.declaration=this.parseStatement(null),"VariableDeclaration"===t.declaration.type?this.checkVariableExport(e,t.declaration.declarations):this.checkExport(e,t.declaration.id.name,t.declaration.id.start),t.specifiers=[],t.source=null;else{if(t.declaration=null,t.specifiers=this.parseExportSpecifiers(e),this.eatContextual("from"))this.type!==x.string&&this.unexpected(),t.source=this.parseExprAtom();else{for(var s=0,a=t.specifiers;s<a.length;s+=1){var o=a[s];this.checkUnreserved(o.local),this.checkLocalExport(o.local)}t.source=null}this.semicolon()}return this.finishNode(t,"ExportNamedDeclaration")},H.checkExport=function(t,e,i){t&&(E(t,e)&&this.raiseRecoverable(i,"Duplicate export '"+e+"'"),t[e]=!0)},H.checkPatternExport=function(t,e){var i=e.type;if("Identifier"===i)this.checkExport(t,e.name,e.start);else if("ObjectPattern"===i)for(var n=0,r=e.properties;n<r.length;n+=1){var s=r[n];this.checkPatternExport(t,s)}else if("ArrayPattern"===i)for(var a=0,o=e.elements;a<o.length;a+=1){var h=o[a];h&&this.checkPatternExport(t,h)}else"Property"===i?this.checkPatternExport(t,e.value):"AssignmentPattern"===i?this.checkPatternExport(t,e.left):"RestElement"===i?this.checkPatternExport(t,e.argument):"ParenthesizedExpression"===i&&this.checkPatternExport(t,e.expression)},H.checkVariableExport=function(t,e){if(t)for(var i=0,n=e;i<n.length;i+=1){var r=n[i];this.checkPatternExport(t,r.id)}},H.shouldParseExportStatement=function(){return"var"===this.type.keyword||"const"===this.type.keyword||"class"===this.type.keyword||"function"===this.type.keyword||this.isLet()||this.isAsyncFunction()},H.parseExportSpecifiers=function(t){var e=[],i=!0;for(this.expect(x.braceL);!this.eat(x.braceR);){if(i)i=!1;else if(this.expect(x.comma),this.afterTrailingComma(x.braceR))break;var n=this.startNode();n.local=this.parseIdent(!0),n.exported=this.eatContextual("as")?this.parseIdent(!0):n.local,this.checkExport(t,n.exported.name,n.exported.start),e.push(this.finishNode(n,"ExportSpecifier"))}return e},H.parseImport=function(t){return this.next(),this.type===x.string?(t.specifiers=Z,t.source=this.parseExprAtom()):(t.specifiers=this.parseImportSpecifiers(),this.expectContextual("from"),t.source=this.type===x.string?this.parseExprAtom():this.unexpected()),this.semicolon(),this.finishNode(t,"ImportDeclaration")},H.parseImportSpecifiers=function(){var t=[],e=!0;if(this.type===x.name){var i=this.startNode();if(i.local=this.parseIdent(),this.checkLValSimple(i.local,2),t.push(this.finishNode(i,"ImportDefaultSpecifier")),!this.eat(x.comma))return t}if(this.type===x.star){var n=this.startNode();return this.next(),this.expectContextual("as"),n.local=this.parseIdent(),this.checkLValSimple(n.local,2),t.push(this.finishNode(n,"ImportNamespaceSpecifier")),t}for(this.expect(x.braceL);!this.eat(x.braceR);){if(e)e=!1;else if(this.expect(x.comma),this.afterTrailingComma(x.braceR))break;var r=this.startNode();r.imported=this.parseIdent(!0),this.eatContextual("as")?r.local=this.parseIdent():(this.checkUnreserved(r.imported),r.local=r.imported),this.checkLValSimple(r.local,2),t.push(this.finishNode(r,"ImportSpecifier"))}return t},H.adaptDirectivePrologue=function(t){for(var e=0;e<t.length&&this.isDirectiveCandidate(t[e]);++e)t[e].directive=t[e].expression.raw.slice(1,-1)},H.isDirectiveCandidate=function(t){return"ExpressionStatement"===t.type&&"Literal"===t.expression.type&&"string"==typeof t.expression.value&&('"'===this.input[t.start]||"'"===this.input[t.start])};var K=D.prototype;K.toAssignable=function(t,e,i){if(this.options.ecmaVersion>=6&&t)switch(t.type){case"Identifier":this.inAsync&&"await"===t.name&&this.raise(t.start,"Cannot use 'await' as identifier inside an async function");break;case"ObjectPattern":case"ArrayPattern":case"AssignmentPattern":case"RestElement":break;case"ObjectExpression":t.type="ObjectPattern",i&&this.checkPatternErrors(i,!0);for(var n=0,r=t.properties;n<r.length;n+=1){var s=r[n];this.toAssignable(s,e),"RestElement"!==s.type||"ArrayPattern"!==s.argument.type&&"ObjectPattern"!==s.argument.type||this.raise(s.argument.start,"Unexpected token")}break;case"Property":"init"!==t.kind&&this.raise(t.key.start,"Object pattern can't contain getter or setter"),this.toAssignable(t.value,e);break;case"ArrayExpression":t.type="ArrayPattern",i&&this.checkPatternErrors(i,!0),this.toAssignableList(t.elements,e);break;case"SpreadElement":t.type="RestElement",this.toAssignable(t.argument,e),"AssignmentPattern"===t.argument.type&&this.raise(t.argument.start,"Rest elements cannot have a default value");break;case"AssignmentExpression":"="!==t.operator&&this.raise(t.left.end,"Only '=' operator can be used for specifying default value."),t.type="AssignmentPattern",delete t.operator,this.toAssignable(t.left,e);break;case"ParenthesizedExpression":this.toAssignable(t.expression,e,i);break;case"ChainExpression":this.raiseRecoverable(t.start,"Optional chaining cannot appear in left-hand side");break;case"MemberExpression":if(!e)break;default:this.raise(t.start,"Assigning to rvalue")}else i&&this.checkPatternErrors(i,!0);return t},K.toAssignableList=function(t,e){for(var i=t.length,n=0;n<i;n++){var r=t[n];r&&this.toAssignable(r,e)}if(i){var s=t[i-1];6===this.options.ecmaVersion&&e&&s&&"RestElement"===s.type&&"Identifier"!==s.argument.type&&this.unexpected(s.argument.start)}return t},K.parseSpread=function(t){var e=this.startNode();return this.next(),e.argument=this.parseMaybeAssign(!1,t),this.finishNode(e,"SpreadElement")},K.parseRestBinding=function(){var t=this.startNode();return this.next(),6===this.options.ecmaVersion&&this.type!==x.name&&this.unexpected(),t.argument=this.parseBindingAtom(),this.finishNode(t,"RestElement")},K.parseBindingAtom=function(){if(this.options.ecmaVersion>=6)switch(this.type){case x.bracketL:var t=this.startNode();return this.next(),t.elements=this.parseBindingList(x.bracketR,!0,!0),this.finishNode(t,"ArrayPattern");case x.braceL:return this.parseObj(!0)}return this.parseIdent()},K.parseBindingList=function(t,e,i){for(var n=[],r=!0;!this.eat(t);)if(r?r=!1:this.expect(x.comma),e&&this.type===x.comma)n.push(null);else{if(i&&this.afterTrailingComma(t))break;if(this.type===x.ellipsis){var s=this.parseRestBinding();this.parseBindingListItem(s),n.push(s),this.type===x.comma&&this.raise(this.start,"Comma is not permitted after the rest element"),this.expect(t);break}var a=this.parseMaybeDefault(this.start,this.startLoc);this.parseBindingListItem(a),n.push(a)}return n},K.parseBindingListItem=function(t){return t},K.parseMaybeDefault=function(t,e,i){if(i=i||this.parseBindingAtom(),this.options.ecmaVersion<6||!this.eat(x.eq))return i;var n=this.startNodeAt(t,e);return n.left=i,n.right=this.parseMaybeAssign(),this.finishNode(n,"AssignmentPattern")},K.checkLValSimple=function(t,e,i){void 0===e&&(e=0);var n=0!==e;switch(t.type){case"Identifier":this.strict&&this.reservedWordsStrictBind.test(t.name)&&this.raiseRecoverable(t.start,(n?"Binding ":"Assigning to ")+t.name+" in strict mode"),n&&(2===e&&"let"===t.name&&this.raiseRecoverable(t.start,"let is disallowed as a lexically bound name"),i&&(E(i,t.name)&&this.raiseRecoverable(t.start,"Argument name clash"),i[t.name]=!0),5!==e&&this.declareName(t.name,e,t.start));break;case"ChainExpression":this.raiseRecoverable(t.start,"Optional chaining cannot appear in left-hand side");break;case"MemberExpression":n&&this.raiseRecoverable(t.start,"Binding member expression");break;case"ParenthesizedExpression":return n&&this.raiseRecoverable(t.start,"Binding parenthesized expression"),this.checkLValSimple(t.expression,e,i);default:this.raise(t.start,(n?"Binding":"Assigning to")+" rvalue")}},K.checkLValPattern=function(t,e,i){switch(void 0===e&&(e=0),t.type){case"ObjectPattern":for(var n=0,r=t.properties;n<r.length;n+=1){var s=r[n];this.checkLValInnerPattern(s,e,i)}break;case"ArrayPattern":for(var a=0,o=t.elements;a<o.length;a+=1){var h=o[a];h&&this.checkLValInnerPattern(h,e,i)}break;default:this.checkLValSimple(t,e,i)}},K.checkLValInnerPattern=function(t,e,i){switch(void 0===e&&(e=0),t.type){case"Property":this.checkLValInnerPattern(t.value,e,i);break;case"AssignmentPattern":this.checkLValPattern(t.left,e,i);break;case"RestElement":this.checkLValPattern(t.argument,e,i);break;default:this.checkLValPattern(t,e,i)}};var J=D.prototype;J.checkPropClash=function(t,e,i){if(!(this.options.ecmaVersion>=9&&"SpreadElement"===t.type||this.options.ecmaVersion>=6&&(t.computed||t.method||t.shorthand))){var n,r=t.key;switch(r.type){case"Identifier":n=r.name;break;case"Literal":n=String(r.value);break;default:return}var s=t.kind;if(this.options.ecmaVersion>=6)"__proto__"===n&&"init"===s&&(e.proto&&(i?i.doubleProto<0&&(i.doubleProto=r.start):this.raiseRecoverable(r.start,"Redefinition of __proto__ property")),e.proto=!0);else{var a=e[n="$"+n];a?("init"===s?this.strict&&a.init||a.get||a.set:a.init||a[s])&&this.raiseRecoverable(r.start,"Redefinition of property"):a=e[n]={init:!1,get:!1,set:!1},a[s]=!0}}},J.parseExpression=function(t,e){var i=this.start,n=this.startLoc,r=this.parseMaybeAssign(t,e);if(this.type===x.comma){var s=this.startNodeAt(i,n);for(s.expressions=[r];this.eat(x.comma);)s.expressions.push(this.parseMaybeAssign(t,e));return this.finishNode(s,"SequenceExpression")}return r},J.parseMaybeAssign=function(t,e,i){if(this.isContextual("yield")){if(this.inGenerator)return this.parseYield(t);this.exprAllowed=!1}var n=!1,r=-1,s=-1;e?(r=e.parenthesizedAssign,s=e.trailingComma,e.parenthesizedAssign=e.trailingComma=-1):(e=new U,n=!0);var a=this.start,o=this.startLoc;this.type!==x.parenL&&this.type!==x.name||(this.potentialArrowAt=this.start);var h=this.parseMaybeConditional(t,e);if(i&&(h=i.call(this,h,a,o)),this.type.isAssign){var u=this.startNodeAt(a,o);return u.operator=this.value,this.type===x.eq&&(h=this.toAssignable(h,!1,e)),n||(e.parenthesizedAssign=e.trailingComma=e.doubleProto=-1),e.shorthandAssign>=h.start&&(e.shorthandAssign=-1),this.type===x.eq?this.checkLValPattern(h):this.checkLValSimple(h),u.left=h,this.next(),u.right=this.parseMaybeAssign(t),this.finishNode(u,"AssignmentExpression")}return n&&this.checkExpressionErrors(e,!0),r>-1&&(e.parenthesizedAssign=r),s>-1&&(e.trailingComma=s),h},J.parseMaybeConditional=function(t,e){var i=this.start,n=this.startLoc,r=this.parseExprOps(t,e);if(this.checkExpressionErrors(e))return r;if(this.eat(x.question)){var s=this.startNodeAt(i,n);return s.test=r,s.consequent=this.parseMaybeAssign(),this.expect(x.colon),s.alternate=this.parseMaybeAssign(t),this.finishNode(s,"ConditionalExpression")}return r},J.parseExprOps=function(t,e){var i=this.start,n=this.startLoc,r=this.parseMaybeUnary(e,!1);return this.checkExpressionErrors(e)||r.start===i&&"ArrowFunctionExpression"===r.type?r:this.parseExprOp(r,i,n,-1,t)},J.parseExprOp=function(t,e,i,n,r){var s=this.type.binop;if(null!=s&&(!r||this.type!==x._in)&&s>n){var a=this.type===x.logicalOR||this.type===x.logicalAND,o=this.type===x.coalesce;o&&(s=x.logicalAND.binop);var h=this.value;this.next();var u=this.start,c=this.startLoc,l=this.parseExprOp(this.parseMaybeUnary(null,!1),u,c,s,r),f=this.buildBinary(e,i,t,l,h,a||o);return(a&&this.type===x.coalesce||o&&(this.type===x.logicalOR||this.type===x.logicalAND))&&this.raiseRecoverable(this.start,"Logical expressions and coalesce expressions cannot be mixed. Wrap either by parentheses"),this.parseExprOp(f,e,i,n,r)}return t},J.buildBinary=function(t,e,i,n,r,s){var a=this.startNodeAt(t,e);return a.left=i,a.operator=r,a.right=n,this.finishNode(a,s?"LogicalExpression":"BinaryExpression")},J.parseMaybeUnary=function(t,e){var i,n=this.start,r=this.startLoc;if(this.isContextual("await")&&(this.inAsync||!this.inFunction&&this.options.allowAwaitOutsideFunction))i=this.parseAwait(),e=!0;else if(this.type.prefix){var s=this.startNode(),a=this.type===x.incDec;s.operator=this.value,s.prefix=!0,this.next(),s.argument=this.parseMaybeUnary(null,!0),this.checkExpressionErrors(t,!0),a?this.checkLValSimple(s.argument):this.strict&&"delete"===s.operator&&"Identifier"===s.argument.type?this.raiseRecoverable(s.start,"Deleting local variable in strict mode"):e=!0,i=this.finishNode(s,a?"UpdateExpression":"UnaryExpression")}else{if(i=this.parseExprSubscripts(t),this.checkExpressionErrors(t))return i;for(;this.type.postfix&&!this.canInsertSemicolon();){var o=this.startNodeAt(n,r);o.operator=this.value,o.prefix=!1,o.argument=i,this.checkLValSimple(i),this.next(),i=this.finishNode(o,"UpdateExpression")}}return!e&&this.eat(x.starstar)?this.buildBinary(n,r,i,this.parseMaybeUnary(null,!1),"**",!1):i},J.parseExprSubscripts=function(t){var e=this.start,i=this.startLoc,n=this.parseExprAtom(t);if("ArrowFunctionExpression"===n.type&&")"!==this.input.slice(this.lastTokStart,this.lastTokEnd))return n;var r=this.parseSubscripts(n,e,i);return t&&"MemberExpression"===r.type&&(t.parenthesizedAssign>=r.start&&(t.parenthesizedAssign=-1),t.parenthesizedBind>=r.start&&(t.parenthesizedBind=-1)),r},J.parseSubscripts=function(t,e,i,n){for(var r=this.options.ecmaVersion>=8&&"Identifier"===t.type&&"async"===t.name&&this.lastTokEnd===t.end&&!this.canInsertSemicolon()&&t.end-t.start==5&&this.potentialArrowAt===t.start,s=!1;;){var a=this.parseSubscript(t,e,i,n,r,s);if(a.optional&&(s=!0),a===t||"ArrowFunctionExpression"===a.type){if(s){var o=this.startNodeAt(e,i);o.expression=a,a=this.finishNode(o,"ChainExpression")}return a}t=a}},J.parseSubscript=function(t,e,i,n,r,s){var a=this.options.ecmaVersion>=11,o=a&&this.eat(x.questionDot);n&&o&&this.raise(this.lastTokStart,"Optional chaining cannot appear in the callee of new expressions");var h=this.eat(x.bracketL);if(h||o&&this.type!==x.parenL&&this.type!==x.backQuote||this.eat(x.dot)){var u=this.startNodeAt(e,i);u.object=t,u.property=h?this.parseExpression():this.parseIdent("never"!==this.options.allowReserved),u.computed=!!h,h&&this.expect(x.bracketR),a&&(u.optional=o),t=this.finishNode(u,"MemberExpression")}else if(!n&&this.eat(x.parenL)){var c=new U,l=this.yieldPos,f=this.awaitPos,d=this.awaitIdentPos;this.yieldPos=0,this.awaitPos=0,this.awaitIdentPos=0;var p=this.parseExprList(x.parenR,this.options.ecmaVersion>=8,!1,c);if(r&&!o&&!this.canInsertSemicolon()&&this.eat(x.arrow))return this.checkPatternErrors(c,!1),this.checkYieldAwaitInDefaultParams(),this.awaitIdentPos>0&&this.raise(this.awaitIdentPos,"Cannot use 'await' as identifier inside an async function"),this.yieldPos=l,this.awaitPos=f,this.awaitIdentPos=d,this.parseArrowExpression(this.startNodeAt(e,i),p,!0);this.checkExpressionErrors(c,!0),this.yieldPos=l||this.yieldPos,this.awaitPos=f||this.awaitPos,this.awaitIdentPos=d||this.awaitIdentPos;var g=this.startNodeAt(e,i);g.callee=t,g.arguments=p,a&&(g.optional=o),t=this.finishNode(g,"CallExpression")}else if(this.type===x.backQuote){(o||s)&&this.raise(this.start,"Optional chaining cannot appear in the tag of tagged template expressions");var _=this.startNodeAt(e,i);_.tag=t,_.quasi=this.parseTemplate({isTagged:!0}),t=this.finishNode(_,"TaggedTemplateExpression")}return t},J.parseExprAtom=function(t){this.type===x.slash&&this.readRegexp();var e,i=this.potentialArrowAt===this.start;switch(this.type){case x._super:return this.allowSuper||this.raise(this.start,"'super' keyword outside a method"),e=this.startNode(),this.next(),this.type!==x.parenL||this.allowDirectSuper||this.raise(e.start,"super() call outside constructor of a subclass"),this.type!==x.dot&&this.type!==x.bracketL&&this.type!==x.parenL&&this.unexpected(),this.finishNode(e,"Super");case x._this:return e=this.startNode(),this.next(),this.finishNode(e,"ThisExpression");case x.name:var n=this.start,r=this.startLoc,s=this.containsEsc,a=this.parseIdent(!1);if(this.options.ecmaVersion>=8&&!s&&"async"===a.name&&!this.canInsertSemicolon()&&this.eat(x._function))return this.parseFunction(this.startNodeAt(n,r),0,!1,!0);if(i&&!this.canInsertSemicolon()){if(this.eat(x.arrow))return this.parseArrowExpression(this.startNodeAt(n,r),[a],!1);if(this.options.ecmaVersion>=8&&"async"===a.name&&this.type===x.name&&!s)return a=this.parseIdent(!1),!this.canInsertSemicolon()&&this.eat(x.arrow)||this.unexpected(),this.parseArrowExpression(this.startNodeAt(n,r),[a],!0)}return a;case x.regexp:var o=this.value;return(e=this.parseLiteral(o.value)).regex={pattern:o.pattern,flags:o.flags},e;case x.num:case x.string:return this.parseLiteral(this.value);case x._null:case x._true:case x._false:return(e=this.startNode()).value=this.type===x._null?null:this.type===x._true,e.raw=this.type.keyword,this.next(),this.finishNode(e,"Literal");case x.parenL:var h=this.start,u=this.parseParenAndDistinguishExpression(i);return t&&(t.parenthesizedAssign<0&&!this.isSimpleAssignTarget(u)&&(t.parenthesizedAssign=h),t.parenthesizedBind<0&&(t.parenthesizedBind=h)),u;case x.bracketL:return e=this.startNode(),this.next(),e.elements=this.parseExprList(x.bracketR,!0,!0,t),this.finishNode(e,"ArrayExpression");case x.braceL:return this.parseObj(!1,t);case x._function:return e=this.startNode(),this.next(),this.parseFunction(e,0);case x._class:return this.parseClass(this.startNode(),!1);case x._new:return this.parseNew();case x.backQuote:return this.parseTemplate();case x._import:return this.options.ecmaVersion>=11?this.parseExprImport():this.unexpected();default:this.unexpected()}},J.parseExprImport=function(){var t=this.startNode();this.containsEsc&&this.raiseRecoverable(this.start,"Escape sequence in keyword import");var e=this.parseIdent(!0);switch(this.type){case x.parenL:return this.parseDynamicImport(t);case x.dot:return t.meta=e,this.parseImportMeta(t);default:this.unexpected()}},J.parseDynamicImport=function(t){if(this.next(),t.source=this.parseMaybeAssign(),!this.eat(x.parenR)){var e=this.start;this.eat(x.comma)&&this.eat(x.parenR)?this.raiseRecoverable(e,"Trailing comma is not allowed in import()"):this.unexpected(e)}return this.finishNode(t,"ImportExpression")},J.parseImportMeta=function(t){this.next();var e=this.containsEsc;return t.property=this.parseIdent(!0),"meta"!==t.property.name&&this.raiseRecoverable(t.property.start,"The only valid meta property for import is 'import.meta'"),e&&this.raiseRecoverable(t.start,"'import.meta' must not contain escaped characters"),"module"!==this.options.sourceType&&this.raiseRecoverable(t.start,"Cannot use 'import.meta' outside a module"),this.finishNode(t,"MetaProperty")},J.parseLiteral=function(t){var e=this.startNode();return e.value=t,e.raw=this.input.slice(this.start,this.end),110===e.raw.charCodeAt(e.raw.length-1)&&(e.bigint=e.raw.slice(0,-1).replace(/_/g,"")),this.next(),this.finishNode(e,"Literal")},J.parseParenExpression=function(){this.expect(x.parenL);var t=this.parseExpression();return this.expect(x.parenR),t},J.parseParenAndDistinguishExpression=function(t){var e,i=this.start,n=this.startLoc,r=this.options.ecmaVersion>=8;if(this.options.ecmaVersion>=6){this.next();var s,a=this.start,o=this.startLoc,h=[],u=!0,c=!1,l=new U,f=this.yieldPos,d=this.awaitPos;for(this.yieldPos=0,this.awaitPos=0;this.type!==x.parenR;){if(u?u=!1:this.expect(x.comma),r&&this.afterTrailingComma(x.parenR,!0)){c=!0;break}if(this.type===x.ellipsis){s=this.start,h.push(this.parseParenItem(this.parseRestBinding())),this.type===x.comma&&this.raise(this.start,"Comma is not permitted after the rest element");break}h.push(this.parseMaybeAssign(!1,l,this.parseParenItem))}var p=this.start,g=this.startLoc;if(this.expect(x.parenR),t&&!this.canInsertSemicolon()&&this.eat(x.arrow))return this.checkPatternErrors(l,!1),this.checkYieldAwaitInDefaultParams(),this.yieldPos=f,this.awaitPos=d,this.parseParenArrowList(i,n,h);h.length&&!c||this.unexpected(this.lastTokStart),s&&this.unexpected(s),this.checkExpressionErrors(l,!0),this.yieldPos=f||this.yieldPos,this.awaitPos=d||this.awaitPos,h.length>1?((e=this.startNodeAt(a,o)).expressions=h,this.finishNodeAt(e,"SequenceExpression",p,g)):e=h[0]}else e=this.parseParenExpression();if(this.options.preserveParens){var _=this.startNodeAt(i,n);return _.expression=e,this.finishNode(_,"ParenthesizedExpression")}return e},J.parseParenItem=function(t){return t},J.parseParenArrowList=function(t,e,i){return this.parseArrowExpression(this.startNodeAt(t,e),i)};var X=[];J.parseNew=function(){this.containsEsc&&this.raiseRecoverable(this.start,"Escape sequence in keyword new");var t=this.startNode(),e=this.parseIdent(!0);if(this.options.ecmaVersion>=6&&this.eat(x.dot)){t.meta=e;var i=this.containsEsc;return t.property=this.parseIdent(!0),"target"!==t.property.name&&this.raiseRecoverable(t.property.start,"The only valid meta property for new is 'new.target'"),i&&this.raiseRecoverable(t.start,"'new.target' must not contain escaped characters"),this.inNonArrowFunction||this.raiseRecoverable(t.start,"'new.target' can only be used in functions"),this.finishNode(t,"MetaProperty")}var n=this.start,r=this.startLoc,s=this.type===x._import;return t.callee=this.parseSubscripts(this.parseExprAtom(),n,r,!0),s&&"ImportExpression"===t.callee.type&&this.raise(n,"Cannot use new with import()"),this.eat(x.parenL)?t.arguments=this.parseExprList(x.parenR,this.options.ecmaVersion>=8,!1):t.arguments=X,this.finishNode(t,"NewExpression")},J.parseTemplateElement=function(t){var e=t.isTagged,i=this.startNode();return this.type===x.invalidTemplate?(e||this.raiseRecoverable(this.start,"Bad escape sequence in untagged template literal"),i.value={raw:this.value,cooked:null}):i.value={raw:this.input.slice(this.start,this.end).replace(/\r\n?/g,"\n"),cooked:this.value},this.next(),i.tail=this.type===x.backQuote,this.finishNode(i,"TemplateElement")},J.parseTemplate=function(t){void 0===t&&(t={});var e=t.isTagged;void 0===e&&(e=!1);var i=this.startNode();this.next(),i.expressions=[];var n=this.parseTemplateElement({isTagged:e});for(i.quasis=[n];!n.tail;)this.type===x.eof&&this.raise(this.pos,"Unterminated template literal"),this.expect(x.dollarBraceL),i.expressions.push(this.parseExpression()),this.expect(x.braceR),i.quasis.push(n=this.parseTemplateElement({isTagged:e}));return this.next(),this.finishNode(i,"TemplateLiteral")},J.isAsyncProp=function(t){return!t.computed&&"Identifier"===t.key.type&&"async"===t.key.name&&(this.type===x.name||this.type===x.num||this.type===x.string||this.type===x.bracketL||this.type.keyword||this.options.ecmaVersion>=9&&this.type===x.star)&&!w.test(this.input.slice(this.lastTokEnd,this.start))},J.parseObj=function(t,e){var i=this.startNode(),n=!0,r={};for(i.properties=[],this.next();!this.eat(x.braceR);){if(n)n=!1;else if(this.expect(x.comma),this.options.ecmaVersion>=5&&this.afterTrailingComma(x.braceR))break;var s=this.parseProperty(t,e);t||this.checkPropClash(s,r,e),i.properties.push(s)}return this.finishNode(i,t?"ObjectPattern":"ObjectExpression")},J.parseProperty=function(t,e){var i,n,r,s,a=this.startNode();if(this.options.ecmaVersion>=9&&this.eat(x.ellipsis))return t?(a.argument=this.parseIdent(!1),this.type===x.comma&&this.raise(this.start,"Comma is not permitted after the rest element"),this.finishNode(a,"RestElement")):(this.type===x.parenL&&e&&(e.parenthesizedAssign<0&&(e.parenthesizedAssign=this.start),e.parenthesizedBind<0&&(e.parenthesizedBind=this.start)),a.argument=this.parseMaybeAssign(!1,e),this.type===x.comma&&e&&e.trailingComma<0&&(e.trailingComma=this.start),this.finishNode(a,"SpreadElement"));this.options.ecmaVersion>=6&&(a.method=!1,a.shorthand=!1,(t||e)&&(r=this.start,s=this.startLoc),t||(i=this.eat(x.star)));var o=this.containsEsc;return this.parsePropertyName(a),!t&&!o&&this.options.ecmaVersion>=8&&!i&&this.isAsyncProp(a)?(n=!0,i=this.options.ecmaVersion>=9&&this.eat(x.star),this.parsePropertyName(a,e)):n=!1,this.parsePropertyValue(a,t,i,n,r,s,e,o),this.finishNode(a,"Property")},J.parsePropertyValue=function(t,e,i,n,r,s,a,o){if((i||n)&&this.type===x.colon&&this.unexpected(),this.eat(x.colon))t.value=e?this.parseMaybeDefault(this.start,this.startLoc):this.parseMaybeAssign(!1,a),t.kind="init";else if(this.options.ecmaVersion>=6&&this.type===x.parenL)e&&this.unexpected(),t.kind="init",t.method=!0,t.value=this.parseMethod(i,n);else if(e||o||!(this.options.ecmaVersion>=5)||t.computed||"Identifier"!==t.key.type||"get"!==t.key.name&&"set"!==t.key.name||this.type===x.comma||this.type===x.braceR||this.type===x.eq)this.options.ecmaVersion>=6&&!t.computed&&"Identifier"===t.key.type?((i||n)&&this.unexpected(),this.checkUnreserved(t.key),"await"!==t.key.name||this.awaitIdentPos||(this.awaitIdentPos=r),t.kind="init",e?t.value=this.parseMaybeDefault(r,s,this.copyNode(t.key)):this.type===x.eq&&a?(a.shorthandAssign<0&&(a.shorthandAssign=this.start),t.value=this.parseMaybeDefault(r,s,this.copyNode(t.key))):t.value=this.copyNode(t.key),t.shorthand=!0):this.unexpected();else{(i||n)&&this.unexpected(),t.kind=t.key.name,this.parsePropertyName(t),t.value=this.parseMethod(!1);var h="get"===t.kind?0:1;if(t.value.params.length!==h){var u=t.value.start;"get"===t.kind?this.raiseRecoverable(u,"getter should have no params"):this.raiseRecoverable(u,"setter should have exactly one param")}else"set"===t.kind&&"RestElement"===t.value.params[0].type&&this.raiseRecoverable(t.value.params[0].start,"Setter cannot use rest params")}},J.parsePropertyName=function(t){if(this.options.ecmaVersion>=6){if(this.eat(x.bracketL))return t.computed=!0,t.key=this.parseMaybeAssign(),this.expect(x.bracketR),t.key;t.computed=!1}return t.key=this.type===x.num||this.type===x.string?this.parseExprAtom():this.parseIdent("never"!==this.options.allowReserved)},J.initFunction=function(t){t.id=null,this.options.ecmaVersion>=6&&(t.generator=t.expression=!1),this.options.ecmaVersion>=8&&(t.async=!1)},J.parseMethod=function(t,e,i){var n=this.startNode(),r=this.yieldPos,s=this.awaitPos,a=this.awaitIdentPos;return this.initFunction(n),this.options.ecmaVersion>=6&&(n.generator=t),this.options.ecmaVersion>=8&&(n.async=!!e),this.yieldPos=0,this.awaitPos=0,this.awaitIdentPos=0,this.enterScope(64|B(e,n.generator)|(i?128:0)),this.expect(x.parenL),n.params=this.parseBindingList(x.parenR,!1,this.options.ecmaVersion>=8),this.checkYieldAwaitInDefaultParams(),this.parseFunctionBody(n,!1,!0),this.yieldPos=r,this.awaitPos=s,this.awaitIdentPos=a,this.finishNode(n,"FunctionExpression")},J.parseArrowExpression=function(t,e,i){var n=this.yieldPos,r=this.awaitPos,s=this.awaitIdentPos;return this.enterScope(16|B(i,!1)),this.initFunction(t),this.options.ecmaVersion>=8&&(t.async=!!i),this.yieldPos=0,this.awaitPos=0,this.awaitIdentPos=0,t.params=this.toAssignableList(e,!0),this.parseFunctionBody(t,!0,!1),this.yieldPos=n,this.awaitPos=r,this.awaitIdentPos=s,this.finishNode(t,"ArrowFunctionExpression")},J.parseFunctionBody=function(t,e,i){var n=e&&this.type!==x.braceL,r=this.strict,s=!1;if(n)t.body=this.parseMaybeAssign(),t.expression=!0,this.checkParams(t,!1);else{var a=this.options.ecmaVersion>=7&&!this.isSimpleParamList(t.params);r&&!a||(s=this.strictDirective(this.end))&&a&&this.raiseRecoverable(t.start,"Illegal 'use strict' directive in function with non-simple parameter list");var o=this.labels;this.labels=[],s&&(this.strict=!0),this.checkParams(t,!r&&!s&&!e&&!i&&this.isSimpleParamList(t.params)),this.strict&&t.id&&this.checkLValSimple(t.id,5),t.body=this.parseBlock(!1,void 0,s&&!r),t.expression=!1,this.adaptDirectivePrologue(t.body.body),this.labels=o}this.exitScope()},J.isSimpleParamList=function(t){for(var e=0,i=t;e<i.length;e+=1)if("Identifier"!==i[e].type)return!1;return!0},J.checkParams=function(t,e){for(var i={},n=0,r=t.params;n<r.length;n+=1){var s=r[n];this.checkLValInnerPattern(s,1,e?null:i)}},J.parseExprList=function(t,e,i,n){for(var r=[],s=!0;!this.eat(t);){if(s)s=!1;else if(this.expect(x.comma),e&&this.afterTrailingComma(t))break;var a=void 0;i&&this.type===x.comma?a=null:this.type===x.ellipsis?(a=this.parseSpread(n),n&&this.type===x.comma&&n.trailingComma<0&&(n.trailingComma=this.start)):a=this.parseMaybeAssign(!1,n),r.push(a)}return r},J.checkUnreserved=function(t){var e=t.start,i=t.end,n=t.name;this.inGenerator&&"yield"===n&&this.raiseRecoverable(e,"Cannot use 'yield' as identifier inside a generator"),this.inAsync&&"await"===n&&this.raiseRecoverable(e,"Cannot use 'await' as identifier inside an async function"),this.keywords.test(n)&&this.raise(e,"Unexpected keyword '"+n+"'"),this.options.ecmaVersion<6&&-1!==this.input.slice(e,i).indexOf("\\")||(this.strict?this.reservedWordsStrict:this.reservedWords).test(n)&&(this.inAsync||"await"!==n||this.raiseRecoverable(e,"Cannot use keyword 'await' outside an async function"),this.raiseRecoverable(e,"The keyword '"+n+"' is reserved"))},J.parseIdent=function(t,e){var i=this.startNode();return this.type===x.name?i.name=this.value:this.type.keyword?(i.name=this.type.keyword,"class"!==i.name&&"function"!==i.name||this.lastTokEnd===this.lastTokStart+1&&46===this.input.charCodeAt(this.lastTokStart)||this.context.pop()):this.unexpected(),this.next(!!t),this.finishNode(i,"Identifier"),t||(this.checkUnreserved(i),"await"!==i.name||this.awaitIdentPos||(this.awaitIdentPos=i.start)),i},J.parseYield=function(t){this.yieldPos||(this.yieldPos=this.start);var e=this.startNode();return this.next(),this.type===x.semi||this.canInsertSemicolon()||this.type!==x.star&&!this.type.startsExpr?(e.delegate=!1,e.argument=null):(e.delegate=this.eat(x.star),e.argument=this.parseMaybeAssign(t)),this.finishNode(e,"YieldExpression")},J.parseAwait=function(){this.awaitPos||(this.awaitPos=this.start);var t=this.startNode();return this.next(),t.argument=this.parseMaybeUnary(null,!0),this.finishNode(t,"AwaitExpression")};var Y=D.prototype;Y.raise=function(t,e){var i=O(this.input,t);e+=" ("+i.line+":"+i.column+")";var n=new SyntaxError(e);throw n.pos=t,n.loc=i,n.raisedAt=this.pos,n},Y.raiseRecoverable=Y.raise,Y.curPosition=function(){if(this.options.locations)return new L(this.curLine,this.pos-this.lineStart)};var tt=D.prototype,et=function(t){this.flags=t,this.var=[],this.lexical=[],this.functions=[]};tt.enterScope=function(t){this.scopeStack.push(new et(t))},tt.exitScope=function(){this.scopeStack.pop()},tt.treatFunctionsAsVarInScope=function(t){return 2&t.flags||!this.inModule&&1&t.flags},tt.declareName=function(t,e,i){var n=!1;if(2===e){var r=this.currentScope();n=r.lexical.indexOf(t)>-1||r.functions.indexOf(t)>-1||r.var.indexOf(t)>-1,r.lexical.push(t),this.inModule&&1&r.flags&&delete this.undefinedExports[t]}else if(4===e)this.currentScope().lexical.push(t);else if(3===e){var s=this.currentScope();n=this.treatFunctionsAsVar?s.lexical.indexOf(t)>-1:s.lexical.indexOf(t)>-1||s.var.indexOf(t)>-1,s.functions.push(t)}else for(var a=this.scopeStack.length-1;a>=0;--a){var o=this.scopeStack[a];if(o.lexical.indexOf(t)>-1&&!(32&o.flags&&o.lexical[0]===t)||!this.treatFunctionsAsVarInScope(o)&&o.functions.indexOf(t)>-1){n=!0;break}if(o.var.push(t),this.inModule&&1&o.flags&&delete this.undefinedExports[t],3&o.flags)break}n&&this.raiseRecoverable(i,"Identifier '"+t+"' has already been declared")},tt.checkLocalExport=function(t){-1===this.scopeStack[0].lexical.indexOf(t.name)&&-1===this.scopeStack[0].var.indexOf(t.name)&&(this.undefinedExports[t.name]=t)},tt.currentScope=function(){return this.scopeStack[this.scopeStack.length-1]},tt.currentVarScope=function(){for(var t=this.scopeStack.length-1;;t--){var e=this.scopeStack[t];if(3&e.flags)return e}},tt.currentThisScope=function(){for(var t=this.scopeStack.length-1;;t--){var e=this.scopeStack[t];if(3&e.flags&&!(16&e.flags))return e}};var it=function(t,e,i){this.type="",this.start=e,this.end=0,t.options.locations&&(this.loc=new N(t,i)),t.options.directSourceFile&&(this.sourceFile=t.options.directSourceFile),t.options.ranges&&(this.range=[e,0])},nt=D.prototype;function rt(t,e,i,n){return t.type=e,t.end=i,this.options.locations&&(t.loc.end=n),this.options.ranges&&(t.range[1]=i),t}nt.startNode=function(){return new it(this,this.start,this.startLoc)},nt.startNodeAt=function(t,e){return new it(this,t,e)},nt.finishNode=function(t,e){return rt.call(this,t,e,this.lastTokEnd,this.lastTokEndLoc)},nt.finishNodeAt=function(t,e,i,n){return rt.call(this,t,e,i,n)},nt.copyNode=function(t){var e=new it(this,t.start,this.startLoc);for(var i in t)e[i]=t[i];return e};var st=function(t,e,i,n,r){this.token=t,this.isExpr=!!e,this.preserveSpace=!!i,this.override=n,this.generator=!!r},at={b_stat:new st("{",!1),b_expr:new st("{",!0),b_tmpl:new st("${",!1),p_stat:new st("(",!1),p_expr:new st("(",!0),q_tmpl:new st("`",!0,!0,(function(t){return t.tryReadTemplateToken()})),f_stat:new st("function",!1),f_expr:new st("function",!0),f_expr_gen:new st("function",!0,!1,null,!0),f_gen:new st("function",!1,!1,null,!0)},ot=D.prototype;ot.initialContext=function(){return[at.b_stat]},ot.braceIsBlock=function(t){var e=this.curContext();return e===at.f_expr||e===at.f_stat||(t!==x.colon||e!==at.b_stat&&e!==at.b_expr?t===x._return||t===x.name&&this.exprAllowed?w.test(this.input.slice(this.lastTokEnd,this.start)):t===x._else||t===x.semi||t===x.eof||t===x.parenR||t===x.arrow||(t===x.braceL?e===at.b_stat:t!==x._var&&t!==x._const&&t!==x.name&&!this.exprAllowed):!e.isExpr)},ot.inGeneratorContext=function(){for(var t=this.context.length-1;t>=1;t--){var e=this.context[t];if("function"===e.token)return e.generator}return!1},ot.updateContext=function(t){var e,i=this.type;i.keyword&&t===x.dot?this.exprAllowed=!1:(e=i.updateContext)?e.call(this,t):this.exprAllowed=i.beforeExpr},x.parenR.updateContext=x.braceR.updateContext=function(){if(1!==this.context.length){var t=this.context.pop();t===at.b_stat&&"function"===this.curContext().token&&(t=this.context.pop()),this.exprAllowed=!t.isExpr}else this.exprAllowed=!0},x.braceL.updateContext=function(t){this.context.push(this.braceIsBlock(t)?at.b_stat:at.b_expr),this.exprAllowed=!0},x.dollarBraceL.updateContext=function(){this.context.push(at.b_tmpl),this.exprAllowed=!0},x.parenL.updateContext=function(t){var e=t===x._if||t===x._for||t===x._with||t===x._while;this.context.push(e?at.p_stat:at.p_expr),this.exprAllowed=!0},x.incDec.updateContext=function(){},x._function.updateContext=x._class.updateContext=function(t){!t.beforeExpr||t===x._else||t===x.semi&&this.curContext()!==at.p_stat||t===x._return&&w.test(this.input.slice(this.lastTokEnd,this.start))||(t===x.colon||t===x.braceL)&&this.curContext()===at.b_stat?this.context.push(at.f_stat):this.context.push(at.f_expr),this.exprAllowed=!1},x.backQuote.updateContext=function(){this.curContext()===at.q_tmpl?this.context.pop():this.context.push(at.q_tmpl),this.exprAllowed=!1},x.star.updateContext=function(t){if(t===x._function){var e=this.context.length-1;this.context[e]===at.f_expr?this.context[e]=at.f_expr_gen:this.context[e]=at.f_gen}this.exprAllowed=!0},x.name.updateContext=function(t){var e=!1;this.options.ecmaVersion>=6&&t!==x.dot&&("of"===this.value&&!this.exprAllowed||"yield"===this.value&&this.inGeneratorContext())&&(e=!0),this.exprAllowed=e};var ht="ASCII ASCII_Hex_Digit AHex Alphabetic Alpha Any Assigned Bidi_Control Bidi_C Bidi_Mirrored Bidi_M Case_Ignorable CI Cased Changes_When_Casefolded CWCF Changes_When_Casemapped CWCM Changes_When_Lowercased CWL Changes_When_NFKC_Casefolded CWKCF Changes_When_Titlecased CWT Changes_When_Uppercased CWU Dash Default_Ignorable_Code_Point DI Deprecated Dep Diacritic Dia Emoji Emoji_Component Emoji_Modifier Emoji_Modifier_Base Emoji_Presentation Extender Ext Grapheme_Base Gr_Base Grapheme_Extend Gr_Ext Hex_Digit Hex IDS_Binary_Operator IDSB IDS_Trinary_Operator IDST ID_Continue IDC ID_Start IDS Ideographic Ideo Join_Control Join_C Logical_Order_Exception LOE Lowercase Lower Math Noncharacter_Code_Point NChar Pattern_Syntax Pat_Syn Pattern_White_Space Pat_WS Quotation_Mark QMark Radical Regional_Indicator RI Sentence_Terminal STerm Soft_Dotted SD Terminal_Punctuation Term Unified_Ideograph UIdeo Uppercase Upper Variation_Selector VS White_Space space XID_Continue XIDC XID_Start XIDS",ut=ht+" Extended_Pictographic",ct={9:ht,10:ut,11:ut,12:ut+" EBase EComp EMod EPres ExtPict"},lt="Cased_Letter LC Close_Punctuation Pe Connector_Punctuation Pc Control Cc cntrl Currency_Symbol Sc Dash_Punctuation Pd Decimal_Number Nd digit Enclosing_Mark Me Final_Punctuation Pf Format Cf Initial_Punctuation Pi Letter L Letter_Number Nl Line_Separator Zl Lowercase_Letter Ll Mark M Combining_Mark Math_Symbol Sm Modifier_Letter Lm Modifier_Symbol Sk Nonspacing_Mark Mn Number N Open_Punctuation Ps Other C Other_Letter Lo Other_Number No Other_Punctuation Po Other_Symbol So Paragraph_Separator Zp Private_Use Co Punctuation P punct Separator Z Space_Separator Zs Spacing_Mark Mc Surrogate Cs Symbol S Titlecase_Letter Lt Unassigned Cn Uppercase_Letter Lu",ft="Adlam Adlm Ahom Ahom Anatolian_Hieroglyphs Hluw Arabic Arab Armenian Armn Avestan Avst Balinese Bali Bamum Bamu Bassa_Vah Bass Batak Batk Bengali Beng Bhaiksuki Bhks Bopomofo Bopo Brahmi Brah Braille Brai Buginese Bugi Buhid Buhd Canadian_Aboriginal Cans Carian Cari Caucasian_Albanian Aghb Chakma Cakm Cham Cham Cherokee Cher Common Zyyy Coptic Copt Qaac Cuneiform Xsux Cypriot Cprt Cyrillic Cyrl Deseret Dsrt Devanagari Deva Duployan Dupl Egyptian_Hieroglyphs Egyp Elbasan Elba Ethiopic Ethi Georgian Geor Glagolitic Glag Gothic Goth Grantha Gran Greek Grek Gujarati Gujr Gurmukhi Guru Han Hani Hangul Hang Hanunoo Hano Hatran Hatr Hebrew Hebr Hiragana Hira Imperial_Aramaic Armi Inherited Zinh Qaai Inscriptional_Pahlavi Phli Inscriptional_Parthian Prti Javanese Java Kaithi Kthi Kannada Knda Katakana Kana Kayah_Li Kali Kharoshthi Khar Khmer Khmr Khojki Khoj Khudawadi Sind Lao Laoo Latin Latn Lepcha Lepc Limbu Limb Linear_A Lina Linear_B Linb Lisu Lisu Lycian Lyci Lydian Lydi Mahajani Mahj Malayalam Mlym Mandaic Mand Manichaean Mani Marchen Marc Masaram_Gondi Gonm Meetei_Mayek Mtei Mende_Kikakui Mend Meroitic_Cursive Merc Meroitic_Hieroglyphs Mero Miao Plrd Modi Modi Mongolian Mong Mro Mroo Multani Mult Myanmar Mymr Nabataean Nbat New_Tai_Lue Talu Newa Newa Nko Nkoo Nushu Nshu Ogham Ogam Ol_Chiki Olck Old_Hungarian Hung Old_Italic Ital Old_North_Arabian Narb Old_Permic Perm Old_Persian Xpeo Old_South_Arabian Sarb Old_Turkic Orkh Oriya Orya Osage Osge Osmanya Osma Pahawh_Hmong Hmng Palmyrene Palm Pau_Cin_Hau Pauc Phags_Pa Phag Phoenician Phnx Psalter_Pahlavi Phlp Rejang Rjng Runic Runr Samaritan Samr Saurashtra Saur Sharada Shrd Shavian Shaw Siddham Sidd SignWriting Sgnw Sinhala Sinh Sora_Sompeng Sora Soyombo Soyo Sundanese Sund Syloti_Nagri Sylo Syriac Syrc Tagalog Tglg Tagbanwa Tagb Tai_Le Tale Tai_Tham Lana Tai_Viet Tavt Takri Takr Tamil Taml Tangut Tang Telugu Telu Thaana Thaa Thai Thai Tibetan Tibt Tifinagh Tfng Tirhuta Tirh Ugaritic Ugar Vai Vaii Warang_Citi Wara Yi Yiii Zanabazar_Square Zanb",dt=ft+" Dogra Dogr Gunjala_Gondi Gong Hanifi_Rohingya Rohg Makasar Maka Medefaidrin Medf Old_Sogdian Sogo Sogdian Sogd",pt=dt+" Elymaic Elym Nandinagari Nand Nyiakeng_Puachue_Hmong Hmnp Wancho Wcho",gt={9:ft,10:dt,11:pt,12:pt+" Chorasmian Chrs Diak Dives_Akuru Khitan_Small_Script Kits Yezi Yezidi"},_t={};function vt(t){var e=_t[t]={binary:M(ct[t]+" "+lt),nonBinary:{General_Category:M(lt),Script:M(gt[t])}};e.nonBinary.Script_Extensions=e.nonBinary.Script,e.nonBinary.gc=e.nonBinary.General_Category,e.nonBinary.sc=e.nonBinary.Script,e.nonBinary.scx=e.nonBinary.Script_Extensions}vt(9),vt(10),vt(11),vt(12);var mt=D.prototype,yt=function(t){this.parser=t,this.validFlags="gim"+(t.options.ecmaVersion>=6?"uy":"")+(t.options.ecmaVersion>=9?"s":""),this.unicodeProperties=_t[t.options.ecmaVersion>=12?12:t.options.ecmaVersion],this.source="",this.flags="",this.start=0,this.switchU=!1,this.switchN=!1,this.pos=0,this.lastIntValue=0,this.lastStringValue="",this.lastAssertionIsQuantifiable=!1,this.numCapturingParens=0,this.maxBackReference=0,this.groupNames=[],this.backReferenceNames=[]};function xt(t){return t<=65535?String.fromCharCode(t):(t-=65536,String.fromCharCode(55296+(t>>10),56320+(1023&t)))}function wt(t){return 36===t||t>=40&&t<=43||46===t||63===t||t>=91&&t<=94||t>=123&&t<=125}function bt(t){return t>=65&&t<=90||t>=97&&t<=122}function Ct(t){return bt(t)||95===t}function St(t){return Ct(t)||kt(t)}function kt(t){return t>=48&&t<=57}function At(t){return t>=48&&t<=57||t>=65&&t<=70||t>=97&&t<=102}function It(t){return t>=65&&t<=70?t-65+10:t>=97&&t<=102?t-97+10:t-48}function Pt(t){return t>=48&&t<=55}yt.prototype.reset=function(t,e,i){var n=-1!==i.indexOf("u");this.start=0|t,this.source=e+"",this.flags=i,this.switchU=n&&this.parser.options.ecmaVersion>=6,this.switchN=n&&this.parser.options.ecmaVersion>=9},yt.prototype.raise=function(t){this.parser.raiseRecoverable(this.start,"Invalid regular expression: /"+this.source+"/: "+t)},yt.prototype.at=function(t,e){void 0===e&&(e=!1);var i=this.source,n=i.length;if(t>=n)return-1;var r=i.charCodeAt(t);if(!e&&!this.switchU||r<=55295||r>=57344||t+1>=n)return r;var s=i.charCodeAt(t+1);return s>=56320&&s<=57343?(r<<10)+s-56613888:r},yt.prototype.nextIndex=function(t,e){void 0===e&&(e=!1);var i=this.source,n=i.length;if(t>=n)return n;var r,s=i.charCodeAt(t);return!e&&!this.switchU||s<=55295||s>=57344||t+1>=n||(r=i.charCodeAt(t+1))<56320||r>57343?t+1:t+2},yt.prototype.current=function(t){return void 0===t&&(t=!1),this.at(this.pos,t)},yt.prototype.lookahead=function(t){return void 0===t&&(t=!1),this.at(this.nextIndex(this.pos,t),t)},yt.prototype.advance=function(t){void 0===t&&(t=!1),this.pos=this.nextIndex(this.pos,t)},yt.prototype.eat=function(t,e){return void 0===e&&(e=!1),this.current(e)===t&&(this.advance(e),!0)},mt.validateRegExpFlags=function(t){for(var e=t.validFlags,i=t.flags,n=0;n<i.length;n++){var r=i.charAt(n);-1===e.indexOf(r)&&this.raise(t.start,"Invalid regular expression flag"),i.indexOf(r,n+1)>-1&&this.raise(t.start,"Duplicate regular expression flag")}},mt.validateRegExpPattern=function(t){this.regexp_pattern(t),!t.switchN&&this.options.ecmaVersion>=9&&t.groupNames.length>0&&(t.switchN=!0,this.regexp_pattern(t))},mt.regexp_pattern=function(t){t.pos=0,t.lastIntValue=0,t.lastStringValue="",t.lastAssertionIsQuantifiable=!1,t.numCapturingParens=0,t.maxBackReference=0,t.groupNames.length=0,t.backReferenceNames.length=0,this.regexp_disjunction(t),t.pos!==t.source.length&&(t.eat(41)&&t.raise("Unmatched ')'"),(t.eat(93)||t.eat(125))&&t.raise("Lone quantifier brackets")),t.maxBackReference>t.numCapturingParens&&t.raise("Invalid escape");for(var e=0,i=t.backReferenceNames;e<i.length;e+=1){var n=i[e];-1===t.groupNames.indexOf(n)&&t.raise("Invalid named capture referenced")}},mt.regexp_disjunction=function(t){for(this.regexp_alternative(t);t.eat(124);)this.regexp_alternative(t);this.regexp_eatQuantifier(t,!0)&&t.raise("Nothing to repeat"),t.eat(123)&&t.raise("Lone quantifier brackets")},mt.regexp_alternative=function(t){for(;t.pos<t.source.length&&this.regexp_eatTerm(t););},mt.regexp_eatTerm=function(t){return this.regexp_eatAssertion(t)?(t.lastAssertionIsQuantifiable&&this.regexp_eatQuantifier(t)&&t.switchU&&t.raise("Invalid quantifier"),!0):!!(t.switchU?this.regexp_eatAtom(t):this.regexp_eatExtendedAtom(t))&&(this.regexp_eatQuantifier(t),!0)},mt.regexp_eatAssertion=function(t){var e=t.pos;if(t.lastAssertionIsQuantifiable=!1,t.eat(94)||t.eat(36))return!0;if(t.eat(92)){if(t.eat(66)||t.eat(98))return!0;t.pos=e}if(t.eat(40)&&t.eat(63)){var i=!1;if(this.options.ecmaVersion>=9&&(i=t.eat(60)),t.eat(61)||t.eat(33))return this.regexp_disjunction(t),t.eat(41)||t.raise("Unterminated group"),t.lastAssertionIsQuantifiable=!i,!0}return t.pos=e,!1},mt.regexp_eatQuantifier=function(t,e){return void 0===e&&(e=!1),!!this.regexp_eatQuantifierPrefix(t,e)&&(t.eat(63),!0)},mt.regexp_eatQuantifierPrefix=function(t,e){return t.eat(42)||t.eat(43)||t.eat(63)||this.regexp_eatBracedQuantifier(t,e)},mt.regexp_eatBracedQuantifier=function(t,e){var i=t.pos;if(t.eat(123)){var n=0,r=-1;if(this.regexp_eatDecimalDigits(t)&&(n=t.lastIntValue,t.eat(44)&&this.regexp_eatDecimalDigits(t)&&(r=t.lastIntValue),t.eat(125)))return-1!==r&&r<n&&!e&&t.raise("numbers out of order in {} quantifier"),!0;t.switchU&&!e&&t.raise("Incomplete quantifier"),t.pos=i}return!1},mt.regexp_eatAtom=function(t){return this.regexp_eatPatternCharacters(t)||t.eat(46)||this.regexp_eatReverseSolidusAtomEscape(t)||this.regexp_eatCharacterClass(t)||this.regexp_eatUncapturingGroup(t)||this.regexp_eatCapturingGroup(t)},mt.regexp_eatReverseSolidusAtomEscape=function(t){var e=t.pos;if(t.eat(92)){if(this.regexp_eatAtomEscape(t))return!0;t.pos=e}return!1},mt.regexp_eatUncapturingGroup=function(t){var e=t.pos;if(t.eat(40)){if(t.eat(63)&&t.eat(58)){if(this.regexp_disjunction(t),t.eat(41))return!0;t.raise("Unterminated group")}t.pos=e}return!1},mt.regexp_eatCapturingGroup=function(t){if(t.eat(40)){if(this.options.ecmaVersion>=9?this.regexp_groupSpecifier(t):63===t.current()&&t.raise("Invalid group"),this.regexp_disjunction(t),t.eat(41))return t.numCapturingParens+=1,!0;t.raise("Unterminated group")}return!1},mt.regexp_eatExtendedAtom=function(t){return t.eat(46)||this.regexp_eatReverseSolidusAtomEscape(t)||this.regexp_eatCharacterClass(t)||this.regexp_eatUncapturingGroup(t)||this.regexp_eatCapturingGroup(t)||this.regexp_eatInvalidBracedQuantifier(t)||this.regexp_eatExtendedPatternCharacter(t)},mt.regexp_eatInvalidBracedQuantifier=function(t){return this.regexp_eatBracedQuantifier(t,!0)&&t.raise("Nothing to repeat"),!1},mt.regexp_eatSyntaxCharacter=function(t){var e=t.current();return!!wt(e)&&(t.lastIntValue=e,t.advance(),!0)},mt.regexp_eatPatternCharacters=function(t){for(var e=t.pos,i=0;-1!==(i=t.current())&&!wt(i);)t.advance();return t.pos!==e},mt.regexp_eatExtendedPatternCharacter=function(t){var e=t.current();return!(-1===e||36===e||e>=40&&e<=43||46===e||63===e||91===e||94===e||124===e||(t.advance(),0))},mt.regexp_groupSpecifier=function(t){if(t.eat(63)){if(this.regexp_eatGroupName(t))return-1!==t.groupNames.indexOf(t.lastStringValue)&&t.raise("Duplicate capture group name"),void t.groupNames.push(t.lastStringValue);t.raise("Invalid group")}},mt.regexp_eatGroupName=function(t){if(t.lastStringValue="",t.eat(60)){if(this.regexp_eatRegExpIdentifierName(t)&&t.eat(62))return!0;t.raise("Invalid capture group name")}return!1},mt.regexp_eatRegExpIdentifierName=function(t){if(t.lastStringValue="",this.regexp_eatRegExpIdentifierStart(t)){for(t.lastStringValue+=xt(t.lastIntValue);this.regexp_eatRegExpIdentifierPart(t);)t.lastStringValue+=xt(t.lastIntValue);return!0}return!1},mt.regexp_eatRegExpIdentifierStart=function(t){var e=t.pos,i=this.options.ecmaVersion>=11,n=t.current(i);return t.advance(i),92===n&&this.regexp_eatRegExpUnicodeEscapeSequence(t,i)&&(n=t.lastIntValue),function(t){return f(t,!0)||36===t||95===t}(n)?(t.lastIntValue=n,!0):(t.pos=e,!1)},mt.regexp_eatRegExpIdentifierPart=function(t){var e=t.pos,i=this.options.ecmaVersion>=11,n=t.current(i);return t.advance(i),92===n&&this.regexp_eatRegExpUnicodeEscapeSequence(t,i)&&(n=t.lastIntValue),function(t){return d(t,!0)||36===t||95===t||8204===t||8205===t}(n)?(t.lastIntValue=n,!0):(t.pos=e,!1)},mt.regexp_eatAtomEscape=function(t){return!!(this.regexp_eatBackReference(t)||this.regexp_eatCharacterClassEscape(t)||this.regexp_eatCharacterEscape(t)||t.switchN&&this.regexp_eatKGroupName(t))||(t.switchU&&(99===t.current()&&t.raise("Invalid unicode escape"),t.raise("Invalid escape")),!1)},mt.regexp_eatBackReference=function(t){var e=t.pos;if(this.regexp_eatDecimalEscape(t)){var i=t.lastIntValue;if(t.switchU)return i>t.maxBackReference&&(t.maxBackReference=i),!0;if(i<=t.numCapturingParens)return!0;t.pos=e}return!1},mt.regexp_eatKGroupName=function(t){if(t.eat(107)){if(this.regexp_eatGroupName(t))return t.backReferenceNames.push(t.lastStringValue),!0;t.raise("Invalid named reference")}return!1},mt.regexp_eatCharacterEscape=function(t){return this.regexp_eatControlEscape(t)||this.regexp_eatCControlLetter(t)||this.regexp_eatZero(t)||this.regexp_eatHexEscapeSequence(t)||this.regexp_eatRegExpUnicodeEscapeSequence(t,!1)||!t.switchU&&this.regexp_eatLegacyOctalEscapeSequence(t)||this.regexp_eatIdentityEscape(t)},mt.regexp_eatCControlLetter=function(t){var e=t.pos;if(t.eat(99)){if(this.regexp_eatControlLetter(t))return!0;t.pos=e}return!1},mt.regexp_eatZero=function(t){return 48===t.current()&&!kt(t.lookahead())&&(t.lastIntValue=0,t.advance(),!0)},mt.regexp_eatControlEscape=function(t){var e=t.current();return 116===e?(t.lastIntValue=9,t.advance(),!0):110===e?(t.lastIntValue=10,t.advance(),!0):118===e?(t.lastIntValue=11,t.advance(),!0):102===e?(t.lastIntValue=12,t.advance(),!0):114===e&&(t.lastIntValue=13,t.advance(),!0)},mt.regexp_eatControlLetter=function(t){var e=t.current();return!!bt(e)&&(t.lastIntValue=e%32,t.advance(),!0)},mt.regexp_eatRegExpUnicodeEscapeSequence=function(t,e){void 0===e&&(e=!1);var i,n=t.pos,r=e||t.switchU;if(t.eat(117)){if(this.regexp_eatFixedHexDigits(t,4)){var s=t.lastIntValue;if(r&&s>=55296&&s<=56319){var a=t.pos;if(t.eat(92)&&t.eat(117)&&this.regexp_eatFixedHexDigits(t,4)){var o=t.lastIntValue;if(o>=56320&&o<=57343)return t.lastIntValue=1024*(s-55296)+(o-56320)+65536,!0}t.pos=a,t.lastIntValue=s}return!0}if(r&&t.eat(123)&&this.regexp_eatHexDigits(t)&&t.eat(125)&&((i=t.lastIntValue)>=0&&i<=1114111))return!0;r&&t.raise("Invalid unicode escape"),t.pos=n}return!1},mt.regexp_eatIdentityEscape=function(t){if(t.switchU)return!!this.regexp_eatSyntaxCharacter(t)||!!t.eat(47)&&(t.lastIntValue=47,!0);var e=t.current();return!(99===e||t.switchN&&107===e||(t.lastIntValue=e,t.advance(),0))},mt.regexp_eatDecimalEscape=function(t){t.lastIntValue=0;var e=t.current();if(e>=49&&e<=57){do{t.lastIntValue=10*t.lastIntValue+(e-48),t.advance()}while((e=t.current())>=48&&e<=57);return!0}return!1},mt.regexp_eatCharacterClassEscape=function(t){var e=t.current();if(function(t){return 100===t||68===t||115===t||83===t||119===t||87===t}(e))return t.lastIntValue=-1,t.advance(),!0;if(t.switchU&&this.options.ecmaVersion>=9&&(80===e||112===e)){if(t.lastIntValue=-1,t.advance(),t.eat(123)&&this.regexp_eatUnicodePropertyValueExpression(t)&&t.eat(125))return!0;t.raise("Invalid property name")}return!1},mt.regexp_eatUnicodePropertyValueExpression=function(t){var e=t.pos;if(this.regexp_eatUnicodePropertyName(t)&&t.eat(61)){var i=t.lastStringValue;if(this.regexp_eatUnicodePropertyValue(t)){var n=t.lastStringValue;return this.regexp_validateUnicodePropertyNameAndValue(t,i,n),!0}}if(t.pos=e,this.regexp_eatLoneUnicodePropertyNameOrValue(t)){var r=t.lastStringValue;return this.regexp_validateUnicodePropertyNameOrValue(t,r),!0}return!1},mt.regexp_validateUnicodePropertyNameAndValue=function(t,e,i){E(t.unicodeProperties.nonBinary,e)||t.raise("Invalid property name"),t.unicodeProperties.nonBinary[e].test(i)||t.raise("Invalid property value")},mt.regexp_validateUnicodePropertyNameOrValue=function(t,e){t.unicodeProperties.binary.test(e)||t.raise("Invalid property name")},mt.regexp_eatUnicodePropertyName=function(t){var e=0;for(t.lastStringValue="";Ct(e=t.current());)t.lastStringValue+=xt(e),t.advance();return""!==t.lastStringValue},mt.regexp_eatUnicodePropertyValue=function(t){var e=0;for(t.lastStringValue="";St(e=t.current());)t.lastStringValue+=xt(e),t.advance();return""!==t.lastStringValue},mt.regexp_eatLoneUnicodePropertyNameOrValue=function(t){return this.regexp_eatUnicodePropertyValue(t)},mt.regexp_eatCharacterClass=function(t){if(t.eat(91)){if(t.eat(94),this.regexp_classRanges(t),t.eat(93))return!0;t.raise("Unterminated character class")}return!1},mt.regexp_classRanges=function(t){for(;this.regexp_eatClassAtom(t);){var e=t.lastIntValue;if(t.eat(45)&&this.regexp_eatClassAtom(t)){var i=t.lastIntValue;!t.switchU||-1!==e&&-1!==i||t.raise("Invalid character class"),-1!==e&&-1!==i&&e>i&&t.raise("Range out of order in character class")}}},mt.regexp_eatClassAtom=function(t){var e=t.pos;if(t.eat(92)){if(this.regexp_eatClassEscape(t))return!0;if(t.switchU){var i=t.current();(99===i||Pt(i))&&t.raise("Invalid class escape"),t.raise("Invalid escape")}t.pos=e}var n=t.current();return 93!==n&&(t.lastIntValue=n,t.advance(),!0)},mt.regexp_eatClassEscape=function(t){var e=t.pos;if(t.eat(98))return t.lastIntValue=8,!0;if(t.switchU&&t.eat(45))return t.lastIntValue=45,!0;if(!t.switchU&&t.eat(99)){if(this.regexp_eatClassControlLetter(t))return!0;t.pos=e}return this.regexp_eatCharacterClassEscape(t)||this.regexp_eatCharacterEscape(t)},mt.regexp_eatClassControlLetter=function(t){var e=t.current();return!(!kt(e)&&95!==e||(t.lastIntValue=e%32,t.advance(),0))},mt.regexp_eatHexEscapeSequence=function(t){var e=t.pos;if(t.eat(120)){if(this.regexp_eatFixedHexDigits(t,2))return!0;t.switchU&&t.raise("Invalid escape"),t.pos=e}return!1},mt.regexp_eatDecimalDigits=function(t){var e=t.pos,i=0;for(t.lastIntValue=0;kt(i=t.current());)t.lastIntValue=10*t.lastIntValue+(i-48),t.advance();return t.pos!==e},mt.regexp_eatHexDigits=function(t){var e=t.pos,i=0;for(t.lastIntValue=0;At(i=t.current());)t.lastIntValue=16*t.lastIntValue+It(i),t.advance();return t.pos!==e},mt.regexp_eatLegacyOctalEscapeSequence=function(t){if(this.regexp_eatOctalDigit(t)){var e=t.lastIntValue;if(this.regexp_eatOctalDigit(t)){var i=t.lastIntValue;e<=3&&this.regexp_eatOctalDigit(t)?t.lastIntValue=64*e+8*i+t.lastIntValue:t.lastIntValue=8*e+i}else t.lastIntValue=e;return!0}return!1},mt.regexp_eatOctalDigit=function(t){var e=t.current();return Pt(e)?(t.lastIntValue=e-48,t.advance(),!0):(t.lastIntValue=0,!1)},mt.regexp_eatFixedHexDigits=function(t,e){var i=t.pos;t.lastIntValue=0;for(var n=0;n<e;++n){var r=t.current();if(!At(r))return t.pos=i,!1;t.lastIntValue=16*t.lastIntValue+It(r),t.advance()}return!0};var Et=function(t){this.type=t.type,this.value=t.value,this.start=t.start,this.end=t.end,t.options.locations&&(this.loc=new N(t,t.startLoc,t.endLoc)),t.options.ranges&&(this.range=[t.start,t.end])},Tt=D.prototype;function Mt(t){return"function"!=typeof BigInt?null:BigInt(t.replace(/_/g,""))}function Lt(t){return t<=65535?String.fromCharCode(t):(t-=65536,String.fromCharCode(55296+(t>>10),56320+(1023&t)))}Tt.next=function(t){!t&&this.type.keyword&&this.containsEsc&&this.raiseRecoverable(this.start,"Escape sequence in keyword "+this.type.keyword),this.options.onToken&&this.options.onToken(new Et(this)),this.lastTokEnd=this.end,this.lastTokStart=this.start,this.lastTokEndLoc=this.endLoc,this.lastTokStartLoc=this.startLoc,this.nextToken()},Tt.getToken=function(){return this.next(),new Et(this)},"undefined"!=typeof Symbol&&(Tt[Symbol.iterator]=function(){var t=this;return{next:function(){var e=t.getToken();return{done:e.type===x.eof,value:e}}}}),Tt.curContext=function(){return this.context[this.context.length-1]},Tt.nextToken=function(){var t=this.curContext();return t&&t.preserveSpace||this.skipSpace(),this.start=this.pos,this.options.locations&&(this.startLoc=this.curPosition()),this.pos>=this.input.length?this.finishToken(x.eof):t.override?t.override(this):void this.readToken(this.fullCharCodeAtPos())},Tt.readToken=function(t){return f(t,this.options.ecmaVersion>=6)||92===t?this.readWord():this.getTokenFromCode(t)},Tt.fullCharCodeAtPos=function(){var t=this.input.charCodeAt(this.pos);return t<=55295||t>=57344?t:(t<<10)+this.input.charCodeAt(this.pos+1)-56613888},Tt.skipBlockComment=function(){var t,e=this.options.onComment&&this.curPosition(),i=this.pos,n=this.input.indexOf("*/",this.pos+=2);if(-1===n&&this.raise(this.pos-2,"Unterminated comment"),this.pos=n+2,this.options.locations)for(b.lastIndex=i;(t=b.exec(this.input))&&t.index<this.pos;)++this.curLine,this.lineStart=t.index+t[0].length;this.options.onComment&&this.options.onComment(!0,this.input.slice(i+2,n),i,this.pos,e,this.curPosition())},Tt.skipLineComment=function(t){for(var e=this.pos,i=this.options.onComment&&this.curPosition(),n=this.input.charCodeAt(this.pos+=t);this.pos<this.input.length&&!C(n);)n=this.input.charCodeAt(++this.pos);this.options.onComment&&this.options.onComment(!1,this.input.slice(e+t,this.pos),e,this.pos,i,this.curPosition())},Tt.skipSpace=function(){t:for(;this.pos<this.input.length;){var t=this.input.charCodeAt(this.pos);switch(t){case 32:case 160:++this.pos;break;case 13:10===this.input.charCodeAt(this.pos+1)&&++this.pos;case 10:case 8232:case 8233:++this.pos,this.options.locations&&(++this.curLine,this.lineStart=this.pos);break;case 47:switch(this.input.charCodeAt(this.pos+1)){case 42:this.skipBlockComment();break;case 47:this.skipLineComment(2);break;default:break t}break;default:if(!(t>8&&t<14||t>=5760&&S.test(String.fromCharCode(t))))break t;++this.pos}}},Tt.finishToken=function(t,e){this.end=this.pos,this.options.locations&&(this.endLoc=this.curPosition());var i=this.type;this.type=t,this.value=e,this.updateContext(i)},Tt.readToken_dot=function(){var t=this.input.charCodeAt(this.pos+1);if(t>=48&&t<=57)return this.readNumber(!0);var e=this.input.charCodeAt(this.pos+2);return this.options.ecmaVersion>=6&&46===t&&46===e?(this.pos+=3,this.finishToken(x.ellipsis)):(++this.pos,this.finishToken(x.dot))},Tt.readToken_slash=function(){var t=this.input.charCodeAt(this.pos+1);return this.exprAllowed?(++this.pos,this.readRegexp()):61===t?this.finishOp(x.assign,2):this.finishOp(x.slash,1)},Tt.readToken_mult_modulo_exp=function(t){var e=this.input.charCodeAt(this.pos+1),i=1,n=42===t?x.star:x.modulo;return this.options.ecmaVersion>=7&&42===t&&42===e&&(++i,n=x.starstar,e=this.input.charCodeAt(this.pos+2)),61===e?this.finishOp(x.assign,i+1):this.finishOp(n,i)},Tt.readToken_pipe_amp=function(t){var e=this.input.charCodeAt(this.pos+1);return e===t?this.options.ecmaVersion>=12&&61===this.input.charCodeAt(this.pos+2)?this.finishOp(x.assign,3):this.finishOp(124===t?x.logicalOR:x.logicalAND,2):61===e?this.finishOp(x.assign,2):this.finishOp(124===t?x.bitwiseOR:x.bitwiseAND,1)},Tt.readToken_caret=function(){return 61===this.input.charCodeAt(this.pos+1)?this.finishOp(x.assign,2):this.finishOp(x.bitwiseXOR,1)},Tt.readToken_plus_min=function(t){var e=this.input.charCodeAt(this.pos+1);return e===t?45!==e||this.inModule||62!==this.input.charCodeAt(this.pos+2)||0!==this.lastTokEnd&&!w.test(this.input.slice(this.lastTokEnd,this.pos))?this.finishOp(x.incDec,2):(this.skipLineComment(3),this.skipSpace(),this.nextToken()):61===e?this.finishOp(x.assign,2):this.finishOp(x.plusMin,1)},Tt.readToken_lt_gt=function(t){var e=this.input.charCodeAt(this.pos+1),i=1;return e===t?(i=62===t&&62===this.input.charCodeAt(this.pos+2)?3:2,61===this.input.charCodeAt(this.pos+i)?this.finishOp(x.assign,i+1):this.finishOp(x.bitShift,i)):33!==e||60!==t||this.inModule||45!==this.input.charCodeAt(this.pos+2)||45!==this.input.charCodeAt(this.pos+3)?(61===e&&(i=2),this.finishOp(x.relational,i)):(this.skipLineComment(4),this.skipSpace(),this.nextToken())},Tt.readToken_eq_excl=function(t){var e=this.input.charCodeAt(this.pos+1);return 61===e?this.finishOp(x.equality,61===this.input.charCodeAt(this.pos+2)?3:2):61===t&&62===e&&this.options.ecmaVersion>=6?(this.pos+=2,this.finishToken(x.arrow)):this.finishOp(61===t?x.eq:x.prefix,1)},Tt.readToken_question=function(){var t=this.options.ecmaVersion;if(t>=11){var e=this.input.charCodeAt(this.pos+1);if(46===e){var i=this.input.charCodeAt(this.pos+2);if(i<48||i>57)return this.finishOp(x.questionDot,2)}if(63===e)return t>=12&&61===this.input.charCodeAt(this.pos+2)?this.finishOp(x.assign,3):this.finishOp(x.coalesce,2)}return this.finishOp(x.question,1)},Tt.getTokenFromCode=function(t){switch(t){case 46:return this.readToken_dot();case 40:return++this.pos,this.finishToken(x.parenL);case 41:return++this.pos,this.finishToken(x.parenR);case 59:return++this.pos,this.finishToken(x.semi);case 44:return++this.pos,this.finishToken(x.comma);case 91:return++this.pos,this.finishToken(x.bracketL);case 93:return++this.pos,this.finishToken(x.bracketR);case 123:return++this.pos,this.finishToken(x.braceL);case 125:return++this.pos,this.finishToken(x.braceR);case 58:return++this.pos,this.finishToken(x.colon);case 96:if(this.options.ecmaVersion<6)break;return++this.pos,this.finishToken(x.backQuote);case 48:var e=this.input.charCodeAt(this.pos+1);if(120===e||88===e)return this.readRadixNumber(16);if(this.options.ecmaVersion>=6){if(111===e||79===e)return this.readRadixNumber(8);if(98===e||66===e)return this.readRadixNumber(2)}case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:return this.readNumber(!1);case 34:case 39:return this.readString(t);case 47:return this.readToken_slash();case 37:case 42:return this.readToken_mult_modulo_exp(t);case 124:case 38:return this.readToken_pipe_amp(t);case 94:return this.readToken_caret();case 43:case 45:return this.readToken_plus_min(t);case 60:case 62:return this.readToken_lt_gt(t);case 61:case 33:return this.readToken_eq_excl(t);case 63:return this.readToken_question();case 126:return this.finishOp(x.prefix,1)}this.raise(this.pos,"Unexpected character '"+Lt(t)+"'")},Tt.finishOp=function(t,e){var i=this.input.slice(this.pos,this.pos+e);return this.pos+=e,this.finishToken(t,i)},Tt.readRegexp=function(){for(var t,e,i=this.pos;;){this.pos>=this.input.length&&this.raise(i,"Unterminated regular expression");var n=this.input.charAt(this.pos);if(w.test(n)&&this.raise(i,"Unterminated regular expression"),t)t=!1;else{if("["===n)e=!0;else if("]"===n&&e)e=!1;else if("/"===n&&!e)break;t="\\"===n}++this.pos}var r=this.input.slice(i,this.pos);++this.pos;var s=this.pos,a=this.readWord1();this.containsEsc&&this.unexpected(s);var o=this.regexpState||(this.regexpState=new yt(this));o.reset(i,r,a),this.validateRegExpFlags(o),this.validateRegExpPattern(o);var h=null;try{h=new RegExp(r,a)}catch(t){}return this.finishToken(x.regexp,{pattern:r,flags:a,value:h})},Tt.readInt=function(t,e,i){for(var n=this.options.ecmaVersion>=12&&void 0===e,r=i&&48===this.input.charCodeAt(this.pos),s=this.pos,a=0,o=0,h=0,u=null==e?1/0:e;h<u;++h,++this.pos){var c=this.input.charCodeAt(this.pos),l=void 0;if(n&&95===c)r&&this.raiseRecoverable(this.pos,"Numeric separator is not allowed in legacy octal numeric literals"),95===o&&this.raiseRecoverable(this.pos,"Numeric separator must be exactly one underscore"),0===h&&this.raiseRecoverable(this.pos,"Numeric separator is not allowed at the first of digits"),o=c;else{if((l=c>=97?c-97+10:c>=65?c-65+10:c>=48&&c<=57?c-48:1/0)>=t)break;o=c,a=a*t+l}}return n&&95===o&&this.raiseRecoverable(this.pos-1,"Numeric separator is not allowed at the last of digits"),this.pos===s||null!=e&&this.pos-s!==e?null:a},Tt.readRadixNumber=function(t){var e=this.pos;this.pos+=2;var i=this.readInt(t);return null==i&&this.raise(this.start+2,"Expected number in radix "+t),this.options.ecmaVersion>=11&&110===this.input.charCodeAt(this.pos)?(i=Mt(this.input.slice(e,this.pos)),++this.pos):f(this.fullCharCodeAtPos())&&this.raise(this.pos,"Identifier directly after number"),this.finishToken(x.num,i)},Tt.readNumber=function(t){var e=this.pos;t||null!==this.readInt(10,void 0,!0)||this.raise(e,"Invalid number");var i=this.pos-e>=2&&48===this.input.charCodeAt(e);i&&this.strict&&this.raise(e,"Invalid number");var n=this.input.charCodeAt(this.pos);if(!i&&!t&&this.options.ecmaVersion>=11&&110===n){var r=Mt(this.input.slice(e,this.pos));return++this.pos,f(this.fullCharCodeAtPos())&&this.raise(this.pos,"Identifier directly after number"),this.finishToken(x.num,r)}i&&/[89]/.test(this.input.slice(e,this.pos))&&(i=!1),46!==n||i||(++this.pos,this.readInt(10),n=this.input.charCodeAt(this.pos)),69!==n&&101!==n||i||(43!==(n=this.input.charCodeAt(++this.pos))&&45!==n||++this.pos,null===this.readInt(10)&&this.raise(e,"Invalid number")),f(this.fullCharCodeAtPos())&&this.raise(this.pos,"Identifier directly after number");var s,a=(s=this.input.slice(e,this.pos),i?parseInt(s,8):parseFloat(s.replace(/_/g,"")));return this.finishToken(x.num,a)},Tt.readCodePoint=function(){var t;if(123===this.input.charCodeAt(this.pos)){this.options.ecmaVersion<6&&this.unexpected();var e=++this.pos;t=this.readHexChar(this.input.indexOf("}",this.pos)-this.pos),++this.pos,t>1114111&&this.invalidStringToken(e,"Code point out of bounds")}else t=this.readHexChar(4);return t},Tt.readString=function(t){for(var e="",i=++this.pos;;){this.pos>=this.input.length&&this.raise(this.start,"Unterminated string constant");var n=this.input.charCodeAt(this.pos);if(n===t)break;92===n?(e+=this.input.slice(i,this.pos),e+=this.readEscapedChar(!1),i=this.pos):(C(n,this.options.ecmaVersion>=10)&&this.raise(this.start,"Unterminated string constant"),++this.pos)}return e+=this.input.slice(i,this.pos++),this.finishToken(x.string,e)};var Nt={};Tt.tryReadTemplateToken=function(){this.inTemplateElement=!0;try{this.readTmplToken()}catch(t){if(t!==Nt)throw t;this.readInvalidTemplateToken()}this.inTemplateElement=!1},Tt.invalidStringToken=function(t,e){if(this.inTemplateElement&&this.options.ecmaVersion>=9)throw Nt;this.raise(t,e)},Tt.readTmplToken=function(){for(var t="",e=this.pos;;){this.pos>=this.input.length&&this.raise(this.start,"Unterminated template");var i=this.input.charCodeAt(this.pos);if(96===i||36===i&&123===this.input.charCodeAt(this.pos+1))return this.pos!==this.start||this.type!==x.template&&this.type!==x.invalidTemplate?(t+=this.input.slice(e,this.pos),this.finishToken(x.template,t)):36===i?(this.pos+=2,this.finishToken(x.dollarBraceL)):(++this.pos,this.finishToken(x.backQuote));if(92===i)t+=this.input.slice(e,this.pos),t+=this.readEscapedChar(!0),e=this.pos;else if(C(i)){switch(t+=this.input.slice(e,this.pos),++this.pos,i){case 13:10===this.input.charCodeAt(this.pos)&&++this.pos;case 10:t+="\n";break;default:t+=String.fromCharCode(i)}this.options.locations&&(++this.curLine,this.lineStart=this.pos),e=this.pos}else++this.pos}},Tt.readInvalidTemplateToken=function(){for(;this.pos<this.input.length;this.pos++)switch(this.input[this.pos]){case"\\":++this.pos;break;case"$":if("{"!==this.input[this.pos+1])break;case"`":return this.finishToken(x.invalidTemplate,this.input.slice(this.start,this.pos))}this.raise(this.start,"Unterminated template")},Tt.readEscapedChar=function(t){var e=this.input.charCodeAt(++this.pos);switch(++this.pos,e){case 110:return"\n";case 114:return"\r";case 120:return String.fromCharCode(this.readHexChar(2));case 117:return Lt(this.readCodePoint());case 116:return"\t";case 98:return"\b";case 118:return"\v";case 102:return"\f";case 13:10===this.input.charCodeAt(this.pos)&&++this.pos;case 10:return this.options.locations&&(this.lineStart=this.pos,++this.curLine),"";case 56:case 57:if(this.strict&&this.invalidStringToken(this.pos-1,"Invalid escape sequence"),t){var i=this.pos-1;return this.invalidStringToken(i,"Invalid escape sequence in template string"),null}default:if(e>=48&&e<=55){var n=this.input.substr(this.pos-1,3).match(/^[0-7]+/)[0],r=parseInt(n,8);return r>255&&(n=n.slice(0,-1),r=parseInt(n,8)),this.pos+=n.length-1,e=this.input.charCodeAt(this.pos),"0"===n&&56!==e&&57!==e||!this.strict&&!t||this.invalidStringToken(this.pos-1-n.length,t?"Octal literal in template string":"Octal literal in strict mode"),String.fromCharCode(r)}return C(e)?"":String.fromCharCode(e)}},Tt.readHexChar=function(t){var e=this.pos,i=this.readInt(16,t);return null===i&&this.invalidStringToken(e,"Bad character escape sequence"),i},Tt.readWord1=function(){this.containsEsc=!1;for(var t="",e=!0,i=this.pos,n=this.options.ecmaVersion>=6;this.pos<this.input.length;){var r=this.fullCharCodeAtPos();if(d(r,n))this.pos+=r<=65535?1:2;else{if(92!==r)break;this.containsEsc=!0,t+=this.input.slice(i,this.pos);var s=this.pos;117!==this.input.charCodeAt(++this.pos)&&this.invalidStringToken(this.pos,"Expecting Unicode escape sequence \\uXXXX"),++this.pos;var a=this.readCodePoint();(e?f:d)(a,n)||this.invalidStringToken(s,"Invalid Unicode escape"),t+=Lt(a),i=this.pos}e=!1}return t+this.input.slice(i,this.pos)},Tt.readWord=function(){var t=this.readWord1(),e=x.name;return this.keywords.test(t)&&(e=m[t]),this.finishToken(e,t)};var Ot="8.0.4";D.acorn={Parser:D,version:Ot,defaultOptions:z,Position:L,SourceLocation:N,getLineInfo:O,Node:it,TokenType:p,tokTypes:x,keywordTypes:m,TokContext:st,tokContexts:at,isIdentifierChar:d,isIdentifierStart:f,Token:Et,isNewLine:C,lineBreak:w,lineBreakG:b,nonASCIIwhitespace:S},t.Node=it,t.Parser=D,t.Position=L,t.SourceLocation=N,t.TokContext=st,t.Token=Et,t.TokenType=p,t.defaultOptions=z,t.getLineInfo=O,t.isIdentifierChar=d,t.isIdentifierStart=f,t.isNewLine=C,t.keywordTypes=m,t.lineBreak=w,t.lineBreakG=b,t.nonASCIIwhitespace=S,t.parse=function(t,e){return D.parse(t,e)},t.parseExpressionAt=function(t,e,i){return D.parseExpressionAt(t,e,i)},t.tokContexts=at,t.tokTypes=x,t.tokenizer=function(t,e){return D.tokenizer(t,e)},t.version=Ot,Object.defineProperty(t,"__esModule",{value:!0})}(e)},256:(t,e,i)=>{"use strict";i.d(e,{Z:()=>o});var n=i(15),r=i.n(n),s=i(645),a=i.n(s)()(r());a.push([t.id,"*,*::after,*::before{margin:0;padding:0;box-sizing:inherit}html{font-size:62.5%}@media(max-width: 1630px){html{font-size:56.25%}}body{box-sizing:border-box;background-color:var(--color-background)}:root{--color-background: black;--color-text: orange}#page{position:absolute;height:100%;width:100%;display:flex;justify-content:center;align-items:center;flex-direction:column;cursor:none}.cursor{position:fixed;left:0;top:0;pointer-events:none}.cursor--small{width:5px;height:5px;left:-2.5px;top:-2.5px;border-radius:50%;z-index:11000;background:var(--color-text)}.cursor--canvas{width:100vw;height:100vh;z-index:12000}.link{display:inline-block;font-size:4rem;cursor:none;outline:none}.link:not(:last-child){margin-bottom:3rem}.link:last-child{font-size:6rem}.link:hover,.link:focus{color:var(--color-text)}","",{version:3,sources:["webpack://./sass/base.scss","webpack://./sass/style.scss"],names:[],mappings:"AAIA,qBAGE,QAAA,CACA,SAAA,CAGA,kBAAA,CAGF,KAKE,eAAA,CAEA,0BAPF,KAQI,gBAAA,CAAA,CAIJ,KACE,qBAAA,CACA,wCAAA,CC1BF,MACE,yBAAA,CACA,oBAAA,CAGF,MACE,iBAAA,CACA,WAAA,CACA,UAAA,CACA,YAAA,CACA,sBAAA,CACA,kBAAA,CACA,qBAAA,CAEA,WAAA,CAGF,QACE,cAAA,CACA,MAAA,CACA,KAAA,CACA,mBAAA,CAEA,eACE,SAAA,CACA,UAAA,CACA,WAAA,CACA,UAAA,CACA,iBAAA,CACA,aAAA,CACA,4BAAA,CAGF,gBACE,WAAA,CACA,YAAA,CACA,aAAA,CAIJ,MACE,oBAAA,CACA,cAAA,CACA,WAAA,CACA,YAAA,CAEA,uBACE,kBAAA,CAGF,iBACE,cAAA,CAGF,wBAEE,uBAAA",sourcesContent:["/*\nPerform basic CSS reset so that every browser displays CSS\nin exactly the same way\n*/\n*,\n*::after,\n*::before {\n  margin: 0;\n  padding: 0;\n  /* box-sizing by default is not inherited, so force it to be inherited */\n  /* i.e. all child elements with the box-sizing property will now inherit from this */\n  box-sizing: inherit;\n}\n\nhtml {\n  /* This assigned root font size will allow the usage of the rem unit */\n  /* The rem unit is used to define children element padding/font sizes */\n  /* Default font size is 16px so set it to 10px (62.5% of 16px) for easy calculations */\n  /* (1 rem == 10px) */\n  font-size: 62.5%;\n\n  @media (max-width: 1630px) {\n    font-size: 56.25%;   // 1 rem == 9px, 9/16 = 56.25%\n  }\n}\n\nbody {\n  box-sizing: border-box;\n  background-color: var(--color-background);\n}",'@import "./base.scss";\n\n:root {\n  --color-background: black;\n  --color-text: orange;\n}\n\n#page {\n  position: absolute;\n  height: 100%;\n  width: 100%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  flex-direction: column;\n\n  cursor: none;\n}\n\n.cursor {\n  position: fixed;\n  left: 0;\n  top: 0;\n  pointer-events: none;\n  \n  &--small {\n    width: 5px;\n    height: 5px;\n    left: -2.5px;\n    top: -2.5px;\n    border-radius: 50%;\n    z-index: 11000;\n    background: var(--color-text);\n  }\n\n  &--canvas {\n    width: 100vw;\n    height: 100vh;\n    z-index: 12000;\n  }\n}\n\n.link {\n  display: inline-block;\n  font-size: 4rem;\n  cursor: none;\n  outline: none;\n\n  &:not(:last-child) {\n    margin-bottom: 3rem;\n  }\n\n  &:last-child {\n    font-size: 6rem;\n  }\n\n  &:hover,\n  &:focus {\n    color: var(--color-text);\n  }\n}'],sourceRoot:""}]);const o=a},645:t=>{"use strict";t.exports=function(t){var e=[];return e.toString=function(){return this.map((function(e){var i=t(e);return e[2]?"@media ".concat(e[2]," {").concat(i,"}"):i})).join("")},e.i=function(t,i,n){"string"==typeof t&&(t=[[null,t,""]]);var r={};if(n)for(var s=0;s<this.length;s++){var a=this[s][0];null!=a&&(r[a]=!0)}for(var o=0;o<t.length;o++){var h=[].concat(t[o]);n&&r[h[0]]||(i&&(h[2]?h[2]="".concat(i," and ").concat(h[2]):h[2]=i),e.push(h))}},e}},15:t=>{"use strict";function e(t,e){(null==e||e>t.length)&&(e=t.length);for(var i=0,n=new Array(e);i<e;i++)n[i]=t[i];return n}t.exports=function(t){var i,n,r=(n=4,function(t){if(Array.isArray(t))return t}(i=t)||function(t,e){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(t)){var i=[],n=!0,r=!1,s=void 0;try{for(var a,o=t[Symbol.iterator]();!(n=(a=o.next()).done)&&(i.push(a.value),!e||i.length!==e);n=!0);}catch(t){r=!0,s=t}finally{try{n||null==o.return||o.return()}finally{if(r)throw s}}return i}}(i,n)||function(t,i){if(t){if("string"==typeof t)return e(t,i);var n=Object.prototype.toString.call(t).slice(8,-1);return"Object"===n&&t.constructor&&(n=t.constructor.name),"Map"===n||"Set"===n?Array.from(t):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?e(t,i):void 0}}(i,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),s=r[1],a=r[3];if("function"==typeof btoa){var o=btoa(unescape(encodeURIComponent(JSON.stringify(a)))),h="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(o),u="/*# ".concat(h," */"),c=a.sources.map((function(t){return"/*# sourceURL=".concat(a.sourceRoot||"").concat(t," */")}));return[s].concat(c).concat([u]).join("\n")}return[s].join("\n")}},267:function(t,e,i){var n,r,s;(function(a,o){var h=(a=a||i(878)).window,u=a.document,c=new function(){var t=/^(statics|enumerable|beans|preserve)$/,e=[],i=e.slice,n=Object.create,r=Object.getOwnPropertyDescriptor,s=Object.defineProperty,a=e.forEach||function(t,e){for(var i=0,n=this.length;i<n;i++)t.call(e,this[i],i,this)},h=function(t,e){for(var i in this)this.hasOwnProperty(i)&&t.call(e,this[i],i,this)},u=Object.assign||function(t){for(var e=1,i=arguments.length;e<i;e++){var n=arguments[e];for(var r in n)n.hasOwnProperty(r)&&(t[r]=n[r])}return t},c=function(t,e,i){if(t){var n=r(t,"length");(n&&"number"==typeof n.value?a:h).call(t,e,i=i||t)}return i};function l(e,i,n,a,o){var h={};function u(t,u){"string"==typeof(u=u||(u=r(i,t))&&(u.get?u:u.value))&&"#"===u[0]&&(u=e[u.substring(1)]||u);var c,l="function"==typeof u,d=u,p=o||l&&!u.base?u&&u.get?t in e:e[t]:null;o&&p||(l&&p&&(u.base=p),l&&!1!==a&&(c=t.match(/^([gs]et|is)(([A-Z])(.*))$/))&&(h[c[3].toLowerCase()+c[4]]=c[2]),d&&!l&&d.get&&"function"==typeof d.get&&f.isPlainObject(d)||(d={value:d,writable:!0}),(r(e,t)||{configurable:!0}).configurable&&(d.configurable=!0,d.enumerable=null!=n?n:!c),s(e,t,d))}if(i){for(var c in i)i.hasOwnProperty(c)&&!t.test(c)&&u(c);for(var c in h){var l=h[c],d=e["set"+l],p=e["get"+l]||d&&e["is"+l];!p||!0!==a&&0!==p.length||u(c,{get:p,set:d})}}return e}function f(){for(var t=0,e=arguments.length;t<e;t++){var i=arguments[t];i&&u(this,i)}return this}return l(f,{inject:function(t){if(t){var e=!0===t.statics?t:t.statics,i=t.beans,n=t.preserve;e!==t&&l(this.prototype,t,t.enumerable,i,n),l(this,e,null,i,n)}for(var r=1,s=arguments.length;r<s;r++)this.inject(arguments[r]);return this},extend:function(){for(var t,e,i,r=this,a=0,o=arguments.length;a<o&&(!t||!e);a++)i=arguments[a],t=t||i.initialize,e=e||i.prototype;return e=(t=t||function(){r.apply(this,arguments)}).prototype=e||n(this.prototype),s(e,"constructor",{value:t,writable:!0,configurable:!0}),l(t,this),arguments.length&&this.inject.apply(t,arguments),t.base=r,t}}).inject({enumerable:!1,initialize:f,set:f,inject:function(){for(var t=0,e=arguments.length;t<e;t++){var i=arguments[t];i&&l(this,i,i.enumerable,i.beans,i.preserve)}return this},extend:function(){var t=n(this);return t.inject.apply(t,arguments)},each:function(t,e){return c(this,t,e)},clone:function(){return new this.constructor(this)},statics:{set:u,each:c,create:n,define:s,describe:r,clone:function(t){return u(new t.constructor,t)},isPlainObject:function(t){var e=null!=t&&t.constructor;return e&&(e===Object||e===f||"Object"===e.name)},pick:function(t,e){return t!==o?t:e},slice:function(t,e,n){return i.call(t,e,n)}}})};t.exports=c,c.inject({enumerable:!1,toString:function(){return null!=this._id?(this._class||"Object")+(this._name?" '"+this._name+"'":" @"+this._id):"{ "+c.each(this,(function(t,e){if(!/^_/.test(e)){var i=typeof t;this.push(e+": "+("number"===i?g.instance.number(t):"string"===i?"'"+t+"'":t))}}),[]).join(", ")+" }"},getClassName:function(){return this._class||""},importJSON:function(t){return c.importJSON(t,this)},exportJSON:function(t){return c.exportJSON(this,t)},toJSON:function(){return c.serialize(this)},set:function(t,e){return t&&c.filter(this,t,e,this._prioritize),this}},{beans:!1,statics:{exports:{},extend:function t(){var e=t.base.apply(this,arguments),i=e.prototype._class;return i&&!c.exports[i]&&(c.exports[i]=e),e},equals:function(t,e){if(t===e)return!0;if(t&&t.equals)return t.equals(e);if(e&&e.equals)return e.equals(t);if(t&&e&&"object"==typeof t&&"object"==typeof e){if(Array.isArray(t)&&Array.isArray(e)){if((i=t.length)!==e.length)return!1;for(;i--;)if(!c.equals(t[i],e[i]))return!1}else{var i,n=Object.keys(t);if((i=n.length)!==Object.keys(e).length)return!1;for(;i--;){var r=n[i];if(!e.hasOwnProperty(r)||!c.equals(t[r],e[r]))return!1}}return!0}return!1},read:function(t,e,i,n){if(this===c){var r=this.peek(t,e);return t.__index++,r}var s=this.prototype,a=s._readIndex,h=e||a&&t.__index||0,u=t.length,l=t[h];if(n=n||u-h,l instanceof this||i&&i.readNull&&null==l&&n<=1)return a&&(t.__index=h+1),l&&i&&i.clone?l.clone():l;if(l=c.create(s),a&&(l.__read=!0),l=l.initialize.apply(l,h>0||h+n<u?c.slice(t,h,h+n):t)||l,a){t.__index=h+l.__read;var f=l.__filtered;f&&(t.__filtered=f,l.__filtered=o),l.__read=o}return l},peek:function(t,e){return t[t.__index=e||t.__index||0]},remain:function(t){return t.length-(t.__index||0)},readList:function(t,e,i,n){for(var r,s=[],a=e||0,o=n?a+n:t.length,h=a;h<o;h++)s.push(Array.isArray(r=t[h])?this.read(r,0,i):this.read(t,h,i,1));return s},readNamed:function(t,e,i,n,r){var s=this.getNamed(t,e),a=s!==o;if(a){var h=t.__filtered;if(!h){var u=this.getSource(t);(h=t.__filtered=c.create(u)).__unfiltered=u}h[e]=o}return this.read(a?[s]:t,i,n,r)},readSupported:function(t,e){var i=this.getSource(t),n=this,r=!1;return i&&Object.keys(i).forEach((function(i){if(i in e){var s=n.readNamed(t,i);s!==o&&(e[i]=s),r=!0}})),r},getSource:function(t){var e=t.__source;if(e===o){var i=1===t.length&&t[0];e=t.__source=i&&c.isPlainObject(i)?i:null}return e},getNamed:function(t,e){var i=this.getSource(t);if(i)return e?i[e]:t.__filtered||i},hasNamed:function(t,e){return!!this.getNamed(t,e)},filter:function(t,e,i,n){var r;function s(n){if(!(i&&n in i||r&&n in r)){var s=e[n];s!==o&&(t[n]=s)}}if(n){for(var a,h={},u=0,c=n.length;u<c;u++)(a=n[u])in e&&(s(a),h[a]=!0);r=h}return Object.keys(e.__unfiltered||e).forEach(s),t},isPlainValue:function(t,e){return c.isPlainObject(t)||Array.isArray(t)||e&&"string"==typeof t},serialize:function(t,e,i,n){e=e||{};var r,s=!n;if(s&&(e.formatter=new g(e.precision),n={length:0,definitions:{},references:{},add:function(t,e){var i="#"+t._id,n=this.references[i];if(!n){this.length++;var r=e.call(t),s=t._class;s&&r[0]!==s&&r.unshift(s),this.definitions[i]=r,n=this.references[i]=[i]}return n}}),t&&t._serialize){r=t._serialize(e,n);var a=t._class;!a||t._compactSerialize||!s&&i||r[0]===a||r.unshift(a)}else if(Array.isArray(t)){r=[];for(var o=0,h=t.length;o<h;o++)r[o]=c.serialize(t[o],e,i,n)}else if(c.isPlainObject(t)){r={};var u=Object.keys(t);for(o=0,h=u.length;o<h;o++){var l=u[o];r[l]=c.serialize(t[l],e,i,n)}}else r="number"==typeof t?e.formatter.number(t,e.precision):t;return s&&n.length>0?[["dictionary",n.definitions],r]:r},deserialize:function(t,e,i,n,r){var s=t,a=!i,o=a&&t&&t.length&&"dictionary"===t[0][0];if(i=i||{},Array.isArray(t)){var h=t[0],u="dictionary"===h;if(1==t.length&&/^#/.test(h))return i.dictionary[h];s=[];for(var l=(h=c.exports[h])?1:0,f=t.length;l<f;l++)s.push(c.deserialize(t[l],e,i,u,o));if(h){var d=s;s=e?e(h,d,a||r):new h(d)}}else if(c.isPlainObject(t))for(var p in s={},n&&(i.dictionary=s),t)s[p]=c.deserialize(t[p],e,i);return o?s[1]:s},exportJSON:function(t,e){var i=c.serialize(t,e);return e&&0==e.asString?i:JSON.stringify(i)},importJSON:function(t,e){return c.deserialize("string"==typeof t?JSON.parse(t):t,(function(t,i,n){var r=n&&e&&e.constructor===t,s=r?e:c.create(t.prototype);if(1===i.length&&s instanceof I&&(r||!(s instanceof E))){var a=i[0];c.isPlainObject(a)&&(a.insert=!1,r&&(i=i.concat([{insert:!0}])))}return(r?s.set:t).apply(s,i),r&&(e=null),s}))},push:function(t,e){var i=e.length;if(i<4096)t.push.apply(t,e);else{var n=t.length;t.length+=i;for(var r=0;r<i;r++)t[n+r]=e[r]}return t},splice:function(t,e,i,n){var r=e&&e.length,s=i===o;(i=s?t.length:i)>t.length&&(i=t.length);for(var a=0;a<r;a++)e[a]._index=i+a;if(s)return c.push(t,e),[];var h=[i,n];e&&c.push(h,e);for(var u=t.splice.apply(t,h),l=(a=0,u.length);a<l;a++)u[a]._index=o;for(a=i+r,l=t.length;a<l;a++)t[a]._index=a;return u},capitalize:function(t){return t.replace(/\b[a-z]/g,(function(t){return t.toUpperCase()}))},camelize:function(t){return t.replace(/-(.)/g,(function(t,e){return e.toUpperCase()}))},hyphenate:function(t){return t.replace(/([a-z])([A-Z])/g,"$1-$2").toLowerCase()}}});var l={on:function(t,e){if("string"!=typeof t)c.each(t,(function(t,e){this.on(e,t)}),this);else{var i=this._eventTypes,n=i&&i[t],r=this._callbacks=this._callbacks||{};-1===(r=r[t]=r[t]||[]).indexOf(e)&&(r.push(e),n&&n.install&&1===r.length&&n.install.call(this,t))}return this},off:function(t,e){if("string"==typeof t){var i,n=this._eventTypes,r=n&&n[t],s=this._callbacks&&this._callbacks[t];return s&&(!e||-1!==(i=s.indexOf(e))&&1===s.length?(r&&r.uninstall&&r.uninstall.call(this,t),delete this._callbacks[t]):-1!==i&&s.splice(i,1)),this}c.each(t,(function(t,e){this.off(e,t)}),this)},once:function(t,e){return this.on(t,(function i(){e.apply(this,arguments),this.off(t,i)}))},emit:function(t,e){var i=this._callbacks&&this._callbacks[t];if(!i)return!1;var n=c.slice(arguments,1),r=e&&e.target&&!e.currentTarget;i=i.slice(),r&&(e.currentTarget=this);for(var s=0,a=i.length;s<a;s++)if(0==i[s].apply(this,n)){e&&e.stop&&e.stop();break}return r&&delete e.currentTarget,!0},responds:function(t){return!(!this._callbacks||!this._callbacks[t])},attach:"#on",detach:"#off",fire:"#emit",_installEvents:function(t){var e=this._eventTypes,i=this._callbacks,n=t?"install":"uninstall";if(e)for(var r in i)if(i[r].length>0){var s=e[r],a=s&&s[n];a&&a.call(this,r)}},statics:{inject:function t(e){var i=e._events;if(i){var n={};c.each(i,(function(t,i){var r="string"==typeof t,s=r?t:i,a=c.capitalize(s),o=s.substring(2).toLowerCase();n[o]=r?{}:t,s="_"+s,e["get"+a]=function(){return this[s]},e["set"+a]=function(t){var e=this[s];e&&this.off(o,e),t&&this.on(o,t),this[s]=t}})),e._eventTypes=n}return t.base.apply(this,arguments)}}},f=c.extend({_class:"PaperScope",initialize:function t(){ft=this,this.settings=new c({applyMatrix:!0,insertItems:!0,handleSize:4,hitTolerance:0}),this.project=null,this.projects=[],this.tools=[],this._id=t._id++,t._scopes[this._id]=this;var e=t.prototype;if(!this.support){var i=ht.getContext(1,1)||{};e.support={nativeDash:"setLineDash"in i||"mozDash"in i,nativeBlendModes:ut.nativeModes},ht.release(i)}if(!this.agent){var n=a.navigator.userAgent.toLowerCase(),r=(/(darwin|win|mac|linux|freebsd|sunos)/.exec(n)||[])[0],s="darwin"===r?"mac":r,o=e.agent=e.browser={platform:s};s&&(o[s]=!0),n.replace(/(opera|chrome|safari|webkit|firefox|msie|trident|atom|node|jsdom)\/?\s*([.\d]+)(?:.*version\/([.\d]+))?(?:.*rv\:v?([.\d]+))?/g,(function(t,e,i,n,r){if(!o.chrome){var s="opera"===e?n:/^(node|trident)$/.test(e)?r:i;o.version=s,o.versionNumber=parseFloat(s),e={trident:"msie",jsdom:"node"}[e]||e,o.name=e,o[e]=!0}})),o.chrome&&delete o.webkit,o.atom&&delete o.chrome}},version:"0.12.11",getView:function(){var t=this.project;return t&&t._view},getPaper:function(){return this},execute:function(t,e){var i=ft.PaperScript.execute(t,this,e);return X.updateFocus(),i},install:function(t){var e=this;for(var i in c.each(["project","view","tool"],(function(i){c.define(t,i,{configurable:!0,get:function(){return e[i]}})})),this)!/^_/.test(i)&&this[i]&&(t[i]=this[i])},setup:function(t){return ft=this,this.project=new A(t),this},createCanvas:function(t,e){return ht.getCanvas(t,e)},activate:function(){ft=this},clear:function(){for(var t=this.projects,e=this.tools,i=t.length-1;i>=0;i--)t[i].remove();for(i=e.length-1;i>=0;i--)e[i].remove()},remove:function(){this.clear(),delete f._scopes[this._id]},statics:new function(){function t(t){return t+="Attribute",function(e,i){return e[t](i)||e[t]("data-paper-"+i)}}return{_scopes:{},_id:0,get:function(t){return this._scopes[t]||null},getAttribute:t("get"),hasAttribute:t("has")}}}),d=c.extend(l,{initialize:function(t){this._scope=ft,this._index=this._scope[this._list].push(this)-1,!t&&this._scope[this._reference]||this.activate()},activate:function(){if(!this._scope)return!1;var t=this._scope[this._reference];return t&&t!==this&&t.emit("deactivate"),this._scope[this._reference]=this,this.emit("activate",t),!0},isActive:function(){return this._scope[this._reference]===this},remove:function(){return null!=this._index&&(c.splice(this._scope[this._list],null,this._index,1),this._scope[this._reference]==this&&(this._scope[this._reference]=null),this._scope=null,!0)},getView:function(){return this._scope.getView()}}),p={findItemBoundsCollisions:function(t,e,i){function n(t){for(var e=new Array(t.length),i=0;i<t.length;i++){var n=t[i].getBounds();e[i]=[n.left,n.top,n.right,n.bottom]}return e}var r=n(t),s=e&&e!==t?n(e):r;return this.findBoundsCollisions(r,s,i||0)},findCurveBoundsCollisions:function(t,e,i,n){function r(t){for(var e=Math.min,i=Math.max,n=new Array(t.length),r=0;r<t.length;r++){var s=t[r];n[r]=[e(s[0],s[2],s[4],s[6]),e(s[1],s[3],s[5],s[7]),i(s[0],s[2],s[4],s[6]),i(s[1],s[3],s[5],s[7])]}return n}var s=r(t),a=e&&e!==t?r(e):s;if(n){for(var o=this.findBoundsCollisions(s,a,i||0,!1,!0),h=this.findBoundsCollisions(s,a,i||0,!0,!0),u=[],c=0,l=o.length;c<l;c++)u[c]={hor:o[c],ver:h[c]};return u}return this.findBoundsCollisions(s,a,i||0)},findBoundsCollisions:function(t,e,i,n,r){var s=!e||t===e,a=s?t:t.concat(e),o=t.length,h=a.length;function u(t,e,i){for(var n=0,r=t.length;n<r;){var s=r+n>>>1;a[t[s]][e]<i?n=s+1:r=s}return n-1}for(var c=n?1:0,l=c+2,f=n?0:1,d=f+2,p=new Array(h),g=0;g<h;g++)p[g]=g;p.sort((function(t,e){return a[t][c]-a[e][c]}));var _=[],v=new Array(o);for(g=0;g<h;g++){var m=p[g],y=a[m],x=s?m:m-o,w=m<o,b=s||!w,C=w?[]:null;if(_.length){var S=u(_,l,y[c]-i)+1;if(_.splice(0,S),s&&r){C=C.concat(_);for(var k=0;k<_.length;k++)v[P=_[k]].push(x)}else{var A=y[d],I=y[f];for(k=0;k<_.length;k++){var P=_[k],E=a[P],T=P<o,M=s||P>=o;(r||(w&&M||b&&T)&&A>=E[f]-i&&I<=E[d]+i)&&(w&&M&&C.push(s?P:P-o),b&&T&&v[P].push(x))}}}if(w&&(t===e&&C.push(m),v[m]=C),_.length){var L=u(_,l,y[l]);_.splice(L+1,0,m)}else _.push(m)}for(g=0;g<v.length;g++){var N=v[g];N&&N.sort((function(t,e){return t-e}))}return v}},g=c.extend({initialize:function(t){this.precision=c.pick(t,5),this.multiplier=Math.pow(10,this.precision)},number:function(t){return this.precision<16?Math.round(t*this.multiplier)/this.multiplier:t},pair:function(t,e,i){return this.number(t)+(i||",")+this.number(e)},point:function(t,e){return this.number(t.x)+(e||",")+this.number(t.y)},size:function(t,e){return this.number(t.width)+(e||",")+this.number(t.height)},rectangle:function(t,e){return this.point(t,e)+(e||",")+this.size(t,e)}});g.instance=new g;var _=new function(){var t=[[.5773502691896257],[0,.7745966692414834],[.33998104358485626,.8611363115940526],[0,.5384693101056831,.906179845938664],[.2386191860831969,.6612093864662645,.932469514203152],[0,.4058451513773972,.7415311855993945,.9491079123427585],[.1834346424956498,.525532409916329,.7966664774136267,.9602898564975363],[0,.3242534234038089,.6133714327005904,.8360311073266358,.9681602395076261],[.14887433898163122,.4333953941292472,.6794095682990244,.8650633666889845,.9739065285171717],[0,.26954315595234496,.5190961292068118,.7301520055740494,.8870625997680953,.978228658146057],[.1252334085114689,.3678314989981802,.5873179542866175,.7699026741943047,.9041172563704749,.9815606342467192],[0,.2304583159551348,.44849275103644687,.6423493394403402,.8015780907333099,.9175983992229779,.9841830547185881],[.10805494870734367,.31911236892788974,.5152486363581541,.6872929048116855,.827201315069765,.9284348836635735,.9862838086968123],[0,.20119409399743451,.3941513470775634,.5709721726085388,.7244177313601701,.8482065834104272,.937273392400706,.9879925180204854],[.09501250983763744,.2816035507792589,.45801677765722737,.6178762444026438,.755404408355003,.8656312023878318,.9445750230732326,.9894009349916499]],e=[[1],[.8888888888888888,.5555555555555556],[.6521451548625461,.34785484513745385],[.5688888888888889,.47862867049936647,.23692688505618908],[.46791393457269104,.3607615730481386,.17132449237917036],[.4179591836734694,.3818300505051189,.27970539148927664,.1294849661688697],[.362683783378362,.31370664587788727,.22238103445337448,.10122853629037626],[.3302393550012598,.31234707704000286,.26061069640293544,.1806481606948574,.08127438836157441],[.29552422471475287,.26926671930999635,.21908636251598204,.1494513491505806,.06667134430868814],[.2729250867779006,.26280454451024665,.23319376459199048,.18629021092773426,.1255803694649046,.05566856711617366],[.24914704581340277,.2334925365383548,.20316742672306592,.16007832854334622,.10693932599531843,.04717533638651183],[.2325515532308739,.22628318026289723,.2078160475368885,.17814598076194574,.13887351021978725,.09212149983772845,.04048400476531588],[.2152638534631578,.2051984637212956,.18553839747793782,.15720316715819355,.12151857068790319,.08015808715976021,.03511946033175186],[.2025782419255613,.19843148532711158,.1861610000155622,.16626920581699392,.13957067792615432,.10715922046717194,.07036604748810812,.03075324199611727],[.1894506104550685,.18260341504492358,.16915651939500254,.14959598881657674,.12462897125553388,.09515851168249279,.062253523938647894,.027152459411754096]],i=Math.abs,n=Math.sqrt,r=Math.pow,s=Math.log2||function(t){return Math.log(t)*Math.LOG2E},a=1e-12,o=112e-18;function h(t,e,i){return t<e?e:t>i?i:t}function u(t,e,n){function r(t){var e=134217729*t,i=t-e+e;return[i,t-i]}var s=e*e-t*n,a=e*e+t*n;if(3*i(s)<a){var o=r(t),h=r(e),u=r(n),c=e*e,l=t*n;s=c-l+(h[0]*h[0]-c+2*h[0]*h[1]+h[1]*h[1]-(o[0]*u[0]-l+o[0]*u[1]+o[1]*u[0]+o[1]*u[1]))}return s}function c(){var t=Math.max.apply(Math,arguments);return t&&(t<1e-8||t>1e8)?r(2,-Math.round(s(t))):0}return{EPSILON:a,MACHINE_EPSILON:o,CURVETIME_EPSILON:1e-8,GEOMETRIC_EPSILON:1e-7,TRIGONOMETRIC_EPSILON:1e-8,KAPPA:4*(n(2)-1)/3,isZero:function(t){return t>=-1e-12&&t<=a},isMachineZero:function(t){return t>=-112e-18&&t<=o},clamp:h,integrate:function(i,n,r,s){for(var a=t[s-2],o=e[s-2],h=.5*(r-n),u=h+n,c=0,l=s+1>>1,f=1&s?o[c++]*i(u):0;c<l;){var d=h*a[c];f+=o[c++]*(i(u+d)+i(u-d))}return h*f},findRoot:function(t,e,n,r,s,a,o){for(var u=0;u<a;u++){var c=t(n),l=c/e(n),f=n-l;if(i(l)<o){n=f;break}c>0?(s=n,n=f<=r?.5*(r+s):f):(r=n,n=f>=s?.5*(r+s):f)}return h(n,r,s)},solveQuadratic:function(t,e,r,s,l,f){var d,p=1/0;if(i(t)<a){if(i(e)<a)return i(r)<a?-1:0;d=-r/e}else{var g=u(t,e*=-.5,r);if(g&&i(g)<o){var _=c(i(t),i(e),i(r));_&&(g=u(t*=_,e*=_,r*=_))}if(g>=-112e-18){var v=g<0?0:n(g),m=e+(e<0?-v:v);0===m?p=-(d=r/t):(d=m/t,p=r/m)}}var y=0,x=null==l,w=l-a,b=f+a;return isFinite(d)&&(x||d>w&&d<b)&&(s[y++]=x?d:h(d,l,f)),p!==d&&isFinite(p)&&(x||p>w&&p<b)&&(s[y++]=x?p:h(p,l,f)),y},solveCubic:function(t,e,s,u,l,f,d){var p,g,v,m,y,x=c(i(t),i(e),i(s),i(u));function w(i){var n=t*(p=i);m=(n+(g=n+e))*p+(v=g*p+s),y=v*p+u}if(x&&(t*=x,e*=x,s*=x,u*=x),i(t)<a)t=e,g=s,v=u,p=1/0;else if(i(u)<a)g=e,v=s,p=0;else{w(-e/t/3);var b=y/t,C=r(i(b),1/3),S=b<0?-1:1,k=-m/t,A=k>0?1.324717957244746*Math.max(C,n(k)):C,I=p-S*A;if(I!==p){do{w(I),I=0===m?p:p-y/m/(1+o)}while(S*I>S*p);i(t)*p*p>i(u/p)&&(g=((v=-u/p)-s)/p)}}var P=_.solveQuadratic(t,g,v,l,f,d),E=null==f;return isFinite(p)&&(0===P||P>0&&p!==l[0]&&p!==l[1])&&(E||p>f-a&&p<d+a)&&(l[P++]=E?p:h(p,f,d)),P}}},v={_id:1,_pools:{},get:function(t){if(t){var e=this._pools[t];return e||(e=this._pools[t]={_id:1}),e._id++}return this._id++}},m=c.extend({_class:"Point",_readIndex:!0,initialize:function(t,e){var i=typeof t,n=this.__read,r=0;if("number"===i){var s="number"==typeof e;this._set(t,s?e:t),n&&(r=s?2:1)}else if("undefined"===i||null===t)this._set(0,0),n&&(r=null===t?1:0);else{var a="string"===i?t.split(/[\s,]+/)||[]:t;r=1,Array.isArray(a)?this._set(+a[0],+(a.length>1?a[1]:a[0])):"x"in a?this._set(a.x||0,a.y||0):"width"in a?this._set(a.width||0,a.height||0):"angle"in a?(this._set(a.length||0,0),this.setAngle(a.angle||0)):(this._set(0,0),r=0)}return n&&(this.__read=r),this},set:"#initialize",_set:function(t,e){return this.x=t,this.y=e,this},equals:function(t){return this===t||t&&(this.x===t.x&&this.y===t.y||Array.isArray(t)&&this.x===t[0]&&this.y===t[1])||!1},clone:function(){return new m(this.x,this.y)},toString:function(){var t=g.instance;return"{ x: "+t.number(this.x)+", y: "+t.number(this.y)+" }"},_serialize:function(t){var e=t.formatter;return[e.number(this.x),e.number(this.y)]},getLength:function(){return Math.sqrt(this.x*this.x+this.y*this.y)},setLength:function(t){if(this.isZero()){var e=this._angle||0;this._set(Math.cos(e)*t,Math.sin(e)*t)}else{var i=t/this.getLength();_.isZero(i)&&this.getAngle(),this._set(this.x*i,this.y*i)}},getAngle:function(){return 180*this.getAngleInRadians.apply(this,arguments)/Math.PI},setAngle:function(t){this.setAngleInRadians.call(this,t*Math.PI/180)},getAngleInDegrees:"#getAngle",setAngleInDegrees:"#setAngle",getAngleInRadians:function(){if(arguments.length){var t=m.read(arguments),e=this.getLength()*t.getLength();if(_.isZero(e))return NaN;var i=this.dot(t)/e;return Math.acos(i<-1?-1:i>1?1:i)}return this.isZero()?this._angle||0:this._angle=Math.atan2(this.y,this.x)},setAngleInRadians:function(t){if(this._angle=t,!this.isZero()){var e=this.getLength();this._set(Math.cos(t)*e,Math.sin(t)*e)}},getQuadrant:function(){return this.x>=0?this.y>=0?1:4:this.y>=0?2:3}},{beans:!1,getDirectedAngle:function(){var t=m.read(arguments);return 180*Math.atan2(this.cross(t),this.dot(t))/Math.PI},getDistance:function(){var t=arguments,e=m.read(t),i=e.x-this.x,n=e.y-this.y,r=i*i+n*n,s=c.read(t);return s?r:Math.sqrt(r)},normalize:function(t){t===o&&(t=1);var e=this.getLength(),i=0!==e?t/e:0,n=new m(this.x*i,this.y*i);return i>=0&&(n._angle=this._angle),n},rotate:function(t,e){if(0===t)return this.clone();t=t*Math.PI/180;var i=e?this.subtract(e):this,n=Math.sin(t),r=Math.cos(t);return i=new m(i.x*r-i.y*n,i.x*n+i.y*r),e?i.add(e):i},transform:function(t){return t?t._transformPoint(this):this},add:function(){var t=m.read(arguments);return new m(this.x+t.x,this.y+t.y)},subtract:function(){var t=m.read(arguments);return new m(this.x-t.x,this.y-t.y)},multiply:function(){var t=m.read(arguments);return new m(this.x*t.x,this.y*t.y)},divide:function(){var t=m.read(arguments);return new m(this.x/t.x,this.y/t.y)},modulo:function(){var t=m.read(arguments);return new m(this.x%t.x,this.y%t.y)},negate:function(){return new m(-this.x,-this.y)},isInside:function(){return b.read(arguments).contains(this)},isClose:function(){var t=arguments,e=m.read(t),i=c.read(t);return this.getDistance(e)<=i},isCollinear:function(){var t=m.read(arguments);return m.isCollinear(this.x,this.y,t.x,t.y)},isColinear:"#isCollinear",isOrthogonal:function(){var t=m.read(arguments);return m.isOrthogonal(this.x,this.y,t.x,t.y)},isZero:function(){var t=_.isZero;return t(this.x)&&t(this.y)},isNaN:function(){return isNaN(this.x)||isNaN(this.y)},isInQuadrant:function(t){return this.x*(t>1&&t<4?-1:1)>=0&&this.y*(t>2?-1:1)>=0},dot:function(){var t=m.read(arguments);return this.x*t.x+this.y*t.y},cross:function(){var t=m.read(arguments);return this.x*t.y-this.y*t.x},project:function(){var t=m.read(arguments),e=t.isZero()?0:this.dot(t)/t.dot(t);return new m(t.x*e,t.y*e)},statics:{min:function(){var t=arguments,e=m.read(t),i=m.read(t);return new m(Math.min(e.x,i.x),Math.min(e.y,i.y))},max:function(){var t=arguments,e=m.read(t),i=m.read(t);return new m(Math.max(e.x,i.x),Math.max(e.y,i.y))},random:function(){return new m(Math.random(),Math.random())},isCollinear:function(t,e,i,n){return Math.abs(t*n-e*i)<=1e-8*Math.sqrt((t*t+e*e)*(i*i+n*n))},isOrthogonal:function(t,e,i,n){return Math.abs(t*i+e*n)<=1e-8*Math.sqrt((t*t+e*e)*(i*i+n*n))}}},c.each(["round","ceil","floor","abs"],(function(t){var e=Math[t];this[t]=function(){return new m(e(this.x),e(this.y))}}),{})),y=m.extend({initialize:function(t,e,i,n){this._x=t,this._y=e,this._owner=i,this._setter=n},_set:function(t,e,i){return this._x=t,this._y=e,i||this._owner[this._setter](this),this},getX:function(){return this._x},setX:function(t){this._x=t,this._owner[this._setter](this)},getY:function(){return this._y},setY:function(t){this._y=t,this._owner[this._setter](this)},isSelected:function(){return!!(this._owner._selection&this._getSelection())},setSelected:function(t){this._owner._changeSelection(this._getSelection(),t)},_getSelection:function(){return"setPosition"===this._setter?4:0}}),x=c.extend({_class:"Size",_readIndex:!0,initialize:function(t,e){var i=typeof t,n=this.__read,r=0;if("number"===i){var s="number"==typeof e;this._set(t,s?e:t),n&&(r=s?2:1)}else if("undefined"===i||null===t)this._set(0,0),n&&(r=null===t?1:0);else{var a="string"===i?t.split(/[\s,]+/)||[]:t;r=1,Array.isArray(a)?this._set(+a[0],+(a.length>1?a[1]:a[0])):"width"in a?this._set(a.width||0,a.height||0):"x"in a?this._set(a.x||0,a.y||0):(this._set(0,0),r=0)}return n&&(this.__read=r),this},set:"#initialize",_set:function(t,e){return this.width=t,this.height=e,this},equals:function(t){return t===this||t&&(this.width===t.width&&this.height===t.height||Array.isArray(t)&&this.width===t[0]&&this.height===t[1])||!1},clone:function(){return new x(this.width,this.height)},toString:function(){var t=g.instance;return"{ width: "+t.number(this.width)+", height: "+t.number(this.height)+" }"},_serialize:function(t){var e=t.formatter;return[e.number(this.width),e.number(this.height)]},add:function(){var t=x.read(arguments);return new x(this.width+t.width,this.height+t.height)},subtract:function(){var t=x.read(arguments);return new x(this.width-t.width,this.height-t.height)},multiply:function(){var t=x.read(arguments);return new x(this.width*t.width,this.height*t.height)},divide:function(){var t=x.read(arguments);return new x(this.width/t.width,this.height/t.height)},modulo:function(){var t=x.read(arguments);return new x(this.width%t.width,this.height%t.height)},negate:function(){return new x(-this.width,-this.height)},isZero:function(){var t=_.isZero;return t(this.width)&&t(this.height)},isNaN:function(){return isNaN(this.width)||isNaN(this.height)},statics:{min:function(t,e){return new x(Math.min(t.width,e.width),Math.min(t.height,e.height))},max:function(t,e){return new x(Math.max(t.width,e.width),Math.max(t.height,e.height))},random:function(){return new x(Math.random(),Math.random())}}},c.each(["round","ceil","floor","abs"],(function(t){var e=Math[t];this[t]=function(){return new x(e(this.width),e(this.height))}}),{})),w=x.extend({initialize:function(t,e,i,n){this._width=t,this._height=e,this._owner=i,this._setter=n},_set:function(t,e,i){return this._width=t,this._height=e,i||this._owner[this._setter](this),this},getWidth:function(){return this._width},setWidth:function(t){this._width=t,this._owner[this._setter](this)},getHeight:function(){return this._height},setHeight:function(t){this._height=t,this._owner[this._setter](this)}}),b=c.extend({_class:"Rectangle",_readIndex:!0,beans:!0,initialize:function(t,e,i,n){var r,s=arguments,a=typeof t;if("number"===a?(this._set(t,e,i,n),r=4):"undefined"===a||null===t?(this._set(0,0,0,0),r=null===t?1:0):1===s.length&&(Array.isArray(t)?(this._set.apply(this,t),r=1):t.x!==o||t.width!==o?(this._set(t.x||0,t.y||0,t.width||0,t.height||0),r=1):t.from===o&&t.to===o&&(this._set(0,0,0,0),c.readSupported(s,this)&&(r=1))),r===o){var h,u,l=m.readNamed(s,"from"),f=c.peek(s),d=l.x,p=l.y;if(f&&f.x!==o||c.hasNamed(s,"to")){var g=m.readNamed(s,"to");h=g.x-d,u=g.y-p,h<0&&(d=g.x,h=-h),u<0&&(p=g.y,u=-u)}else{var _=x.read(s);h=_.width,u=_.height}this._set(d,p,h,u),r=s.__index}var v=s.__filtered;return v&&(this.__filtered=v),this.__read&&(this.__read=r),this},set:"#initialize",_set:function(t,e,i,n){return this.x=t,this.y=e,this.width=i,this.height=n,this},clone:function(){return new b(this.x,this.y,this.width,this.height)},equals:function(t){var e=c.isPlainValue(t)?b.read(arguments):t;return e===this||e&&this.x===e.x&&this.y===e.y&&this.width===e.width&&this.height===e.height||!1},toString:function(){var t=g.instance;return"{ x: "+t.number(this.x)+", y: "+t.number(this.y)+", width: "+t.number(this.width)+", height: "+t.number(this.height)+" }"},_serialize:function(t){var e=t.formatter;return[e.number(this.x),e.number(this.y),e.number(this.width),e.number(this.height)]},getPoint:function(t){return new(t?m:y)(this.x,this.y,this,"setPoint")},setPoint:function(){var t=m.read(arguments);this.x=t.x,this.y=t.y},getSize:function(t){return new(t?x:w)(this.width,this.height,this,"setSize")},_fw:1,_fh:1,setSize:function(){var t=x.read(arguments),e=this._sx,i=this._sy,n=t.width,r=t.height;e&&(this.x+=(this.width-n)*e),i&&(this.y+=(this.height-r)*i),this.width=n,this.height=r,this._fw=this._fh=1},getLeft:function(){return this.x},setLeft:function(t){if(!this._fw){var e=t-this.x;this.width-=.5===this._sx?2*e:e}this.x=t,this._sx=this._fw=0},getTop:function(){return this.y},setTop:function(t){if(!this._fh){var e=t-this.y;this.height-=.5===this._sy?2*e:e}this.y=t,this._sy=this._fh=0},getRight:function(){return this.x+this.width},setRight:function(t){if(!this._fw){var e=t-this.x;this.width=.5===this._sx?2*e:e}this.x=t-this.width,this._sx=1,this._fw=0},getBottom:function(){return this.y+this.height},setBottom:function(t){if(!this._fh){var e=t-this.y;this.height=.5===this._sy?2*e:e}this.y=t-this.height,this._sy=1,this._fh=0},getCenterX:function(){return this.x+this.width/2},setCenterX:function(t){this._fw||.5===this._sx?this.x=t-this.width/2:(this._sx&&(this.x+=2*(t-this.x)*this._sx),this.width=2*(t-this.x)),this._sx=.5,this._fw=0},getCenterY:function(){return this.y+this.height/2},setCenterY:function(t){this._fh||.5===this._sy?this.y=t-this.height/2:(this._sy&&(this.y+=2*(t-this.y)*this._sy),this.height=2*(t-this.y)),this._sy=.5,this._fh=0},getCenter:function(t){return new(t?m:y)(this.getCenterX(),this.getCenterY(),this,"setCenter")},setCenter:function(){var t=m.read(arguments);return this.setCenterX(t.x),this.setCenterY(t.y),this},getArea:function(){return this.width*this.height},isEmpty:function(){return 0===this.width||0===this.height},contains:function(t){return t&&t.width!==o||4===(Array.isArray(t)?t:arguments).length?this._containsRectangle(b.read(arguments)):this._containsPoint(m.read(arguments))},_containsPoint:function(t){var e=t.x,i=t.y;return e>=this.x&&i>=this.y&&e<=this.x+this.width&&i<=this.y+this.height},_containsRectangle:function(t){var e=t.x,i=t.y;return e>=this.x&&i>=this.y&&e+t.width<=this.x+this.width&&i+t.height<=this.y+this.height},intersects:function(){var t=b.read(arguments),e=c.read(arguments)||0;return t.x+t.width>this.x-e&&t.y+t.height>this.y-e&&t.x<this.x+this.width+e&&t.y<this.y+this.height+e},intersect:function(){var t=b.read(arguments),e=Math.max(this.x,t.x),i=Math.max(this.y,t.y),n=Math.min(this.x+this.width,t.x+t.width),r=Math.min(this.y+this.height,t.y+t.height);return new b(e,i,n-e,r-i)},unite:function(){var t=b.read(arguments),e=Math.min(this.x,t.x),i=Math.min(this.y,t.y),n=Math.max(this.x+this.width,t.x+t.width),r=Math.max(this.y+this.height,t.y+t.height);return new b(e,i,n-e,r-i)},include:function(){var t=m.read(arguments),e=Math.min(this.x,t.x),i=Math.min(this.y,t.y),n=Math.max(this.x+this.width,t.x),r=Math.max(this.y+this.height,t.y);return new b(e,i,n-e,r-i)},expand:function(){var t=x.read(arguments),e=t.width,i=t.height;return new b(this.x-e/2,this.y-i/2,this.width+e,this.height+i)},scale:function(t,e){return this.expand(this.width*t-this.width,this.height*(e===o?t:e)-this.height)}},c.each([["Top","Left"],["Top","Right"],["Bottom","Left"],["Bottom","Right"],["Left","Center"],["Top","Center"],["Right","Center"],["Bottom","Center"]],(function(t,e){var i=t.join(""),n=/^[RL]/.test(i);e>=4&&(t[1]+=n?"Y":"X");var r=t[n?0:1],s=t[n?1:0],a="get"+r,o="get"+s,h="set"+r,u="set"+s,c="set"+i;this["get"+i]=function(t){return new(t?m:y)(this[a](),this[o](),this,c)},this[c]=function(){var t=m.read(arguments);this[h](t.x),this[u](t.y)}}),{beans:!0})),C=b.extend({initialize:function(t,e,i,n,r,s){this._set(t,e,i,n,!0),this._owner=r,this._setter=s},_set:function(t,e,i,n,r){return this._x=t,this._y=e,this._width=i,this._height=n,r||this._owner[this._setter](this),this}},new function(){var t=b.prototype;return c.each(["x","y","width","height"],(function(t){var e=c.capitalize(t),i="_"+t;this["get"+e]=function(){return this[i]},this["set"+e]=function(t){this[i]=t,this._dontNotify||this._owner[this._setter](this)}}),c.each(["Point","Size","Center","Left","Top","Right","Bottom","CenterX","CenterY","TopLeft","TopRight","BottomLeft","BottomRight","LeftCenter","TopCenter","RightCenter","BottomCenter"],(function(e){var i="set"+e;this[i]=function(){this._dontNotify=!0,t[i].apply(this,arguments),this._dontNotify=!1,this._owner[this._setter](this)}}),{isSelected:function(){return!!(2&this._owner._selection)},setSelected:function(t){var e=this._owner;e._changeSelection&&e._changeSelection(2,t)}}))}),S=c.extend({_class:"Matrix",initialize:function t(e,i){var n=arguments,r=n.length,s=!0;if(r>=6?this._set.apply(this,n):1===r||2===r?e instanceof t?this._set(e._a,e._b,e._c,e._d,e._tx,e._ty,i):Array.isArray(e)?this._set.apply(this,i?e.concat([i]):e):s=!1:r?s=!1:this.reset(),!s)throw new Error("Unsupported matrix parameters");return this},set:"#initialize",_set:function(t,e,i,n,r,s,a){return this._a=t,this._b=e,this._c=i,this._d=n,this._tx=r,this._ty=s,a||this._changed(),this},_serialize:function(t,e){return c.serialize(this.getValues(),t,!0,e)},_changed:function(){var t=this._owner;t&&(t._applyMatrix?t.transform(null,!0):t._changed(25))},clone:function(){return new S(this._a,this._b,this._c,this._d,this._tx,this._ty)},equals:function(t){return t===this||t&&this._a===t._a&&this._b===t._b&&this._c===t._c&&this._d===t._d&&this._tx===t._tx&&this._ty===t._ty},toString:function(){var t=g.instance;return"[["+[t.number(this._a),t.number(this._c),t.number(this._tx)].join(", ")+"], ["+[t.number(this._b),t.number(this._d),t.number(this._ty)].join(", ")+"]]"},reset:function(t){return this._a=this._d=1,this._b=this._c=this._tx=this._ty=0,t||this._changed(),this},apply:function(t,e){var i=this._owner;return!!i&&(i.transform(null,c.pick(t,!0),e),this.isIdentity())},translate:function(){var t=m.read(arguments),e=t.x,i=t.y;return this._tx+=e*this._a+i*this._c,this._ty+=e*this._b+i*this._d,this._changed(),this},scale:function(){var t=arguments,e=m.read(t),i=m.read(t,0,{readNull:!0});return i&&this.translate(i),this._a*=e.x,this._b*=e.x,this._c*=e.y,this._d*=e.y,i&&this.translate(i.negate()),this._changed(),this},rotate:function(t){t*=Math.PI/180;var e=m.read(arguments,1),i=e.x,n=e.y,r=Math.cos(t),s=Math.sin(t),a=i-i*r+n*s,o=n-i*s-n*r,h=this._a,u=this._b,c=this._c,l=this._d;return this._a=r*h+s*c,this._b=r*u+s*l,this._c=-s*h+r*c,this._d=-s*u+r*l,this._tx+=a*h+o*c,this._ty+=a*u+o*l,this._changed(),this},shear:function(){var t=arguments,e=m.read(t),i=m.read(t,0,{readNull:!0});i&&this.translate(i);var n=this._a,r=this._b;return this._a+=e.y*this._c,this._b+=e.y*this._d,this._c+=e.x*n,this._d+=e.x*r,i&&this.translate(i.negate()),this._changed(),this},skew:function(){var t=arguments,e=m.read(t),i=m.read(t,0,{readNull:!0}),n=Math.PI/180,r=new m(Math.tan(e.x*n),Math.tan(e.y*n));return this.shear(r,i)},append:function(t,e){if(t){var i=this._a,n=this._b,r=this._c,s=this._d,a=t._a,o=t._c,h=t._b,u=t._d,c=t._tx,l=t._ty;this._a=a*i+h*r,this._c=o*i+u*r,this._b=a*n+h*s,this._d=o*n+u*s,this._tx+=c*i+l*r,this._ty+=c*n+l*s,e||this._changed()}return this},prepend:function(t,e){if(t){var i=this._a,n=this._b,r=this._c,s=this._d,a=this._tx,o=this._ty,h=t._a,u=t._c,c=t._b,l=t._d,f=t._tx,d=t._ty;this._a=h*i+u*n,this._c=h*r+u*s,this._b=c*i+l*n,this._d=c*r+l*s,this._tx=h*a+u*o+f,this._ty=c*a+l*o+d,e||this._changed()}return this},appended:function(t){return this.clone().append(t)},prepended:function(t){return this.clone().prepend(t)},invert:function(){var t=this._a,e=this._b,i=this._c,n=this._d,r=this._tx,s=this._ty,a=t*n-e*i,o=null;return a&&!isNaN(a)&&isFinite(r)&&isFinite(s)&&(this._a=n/a,this._b=-e/a,this._c=-i/a,this._d=t/a,this._tx=(i*s-n*r)/a,this._ty=(e*r-t*s)/a,o=this),o},inverted:function(){return this.clone().invert()},concatenate:"#append",preConcatenate:"#prepend",chain:"#appended",_shiftless:function(){return new S(this._a,this._b,this._c,this._d,0,0)},_orNullIfIdentity:function(){return this.isIdentity()?null:this},isIdentity:function(){return 1===this._a&&0===this._b&&0===this._c&&1===this._d&&0===this._tx&&0===this._ty},isInvertible:function(){var t=this._a*this._d-this._c*this._b;return t&&!isNaN(t)&&isFinite(this._tx)&&isFinite(this._ty)},isSingular:function(){return!this.isInvertible()},transform:function(t,e,i){return arguments.length<3?this._transformPoint(m.read(arguments)):this._transformCoordinates(t,e,i)},_transformPoint:function(t,e,i){var n=t.x,r=t.y;return e||(e=new m),e._set(n*this._a+r*this._c+this._tx,n*this._b+r*this._d+this._ty,i)},_transformCoordinates:function(t,e,i){for(var n=0,r=2*i;n<r;n+=2){var s=t[n],a=t[n+1];e[n]=s*this._a+a*this._c+this._tx,e[n+1]=s*this._b+a*this._d+this._ty}return e},_transformCorners:function(t){var e=t.x,i=t.y,n=e+t.width,r=i+t.height,s=[e,i,n,i,n,r,e,r];return this._transformCoordinates(s,s,4)},_transformBounds:function(t,e,i){for(var n=this._transformCorners(t),r=n.slice(0,2),s=r.slice(),a=2;a<8;a++){var o=n[a],h=1&a;o<r[h]?r[h]=o:o>s[h]&&(s[h]=o)}return e||(e=new b),e._set(r[0],r[1],s[0]-r[0],s[1]-r[1],i)},inverseTransform:function(){return this._inverseTransform(m.read(arguments))},_inverseTransform:function(t,e,i){var n=this._a,r=this._b,s=this._c,a=this._d,o=this._tx,h=this._ty,u=n*a-r*s,c=null;if(u&&!isNaN(u)&&isFinite(o)&&isFinite(h)){var l=t.x-this._tx,f=t.y-this._ty;e||(e=new m),c=e._set((l*a-f*s)/u,(f*n-l*r)/u,i)}return c},decompose:function(){var t,e,i,n=this._a,r=this._b,s=this._c,a=this._d,o=n*a-r*s,h=Math.sqrt,u=Math.atan2,c=180/Math.PI;if(0!==n||0!==r){var l=h(n*n+r*r);t=Math.acos(n/l)*(r>0?1:-1),e=[l,o/l],i=[u(n*s+r*a,l*l),0]}else if(0!==s||0!==a){var f=h(s*s+a*a);t=Math.asin(s/f)*(a>0?1:-1),e=[o/f,f],i=[0,u(n*s+r*a,f*f)]}else t=0,i=e=[0,0];return{translation:this.getTranslation(),rotation:t*c,scaling:new m(e),skewing:new m(i[0]*c,i[1]*c)}},getValues:function(){return[this._a,this._b,this._c,this._d,this._tx,this._ty]},getTranslation:function(){return new m(this._tx,this._ty)},getScaling:function(){return this.decompose().scaling},getRotation:function(){return this.decompose().rotation},applyToContext:function(t){this.isIdentity()||t.transform(this._a,this._b,this._c,this._d,this._tx,this._ty)}},c.each(["a","b","c","d","tx","ty"],(function(t){var e=c.capitalize(t),i="_"+t;this["get"+e]=function(){return this[i]},this["set"+e]=function(t){this[i]=t,this._changed()}}),{})),k=c.extend({_class:"Line",initialize:function(t,e,i,n,r){var s=!1;arguments.length>=4?(this._px=t,this._py=e,this._vx=i,this._vy=n,s=r):(this._px=t.x,this._py=t.y,this._vx=e.x,this._vy=e.y,s=i),s||(this._vx-=this._px,this._vy-=this._py)},getPoint:function(){return new m(this._px,this._py)},getVector:function(){return new m(this._vx,this._vy)},getLength:function(){return this.getVector().getLength()},intersect:function(t,e){return k.intersect(this._px,this._py,this._vx,this._vy,t._px,t._py,t._vx,t._vy,!0,e)},getSide:function(t,e){return k.getSide(this._px,this._py,this._vx,this._vy,t.x,t.y,!0,e)},getDistance:function(t){return Math.abs(this.getSignedDistance(t))},getSignedDistance:function(t){return k.getSignedDistance(this._px,this._py,this._vx,this._vy,t.x,t.y,!0)},isCollinear:function(t){return m.isCollinear(this._vx,this._vy,t._vx,t._vy)},isOrthogonal:function(t){return m.isOrthogonal(this._vx,this._vy,t._vx,t._vy)},statics:{intersect:function(t,e,i,n,r,s,a,o,h,u){h||(i-=t,n-=e,a-=r,o-=s);var c=i*o-n*a;if(!_.isMachineZero(c)){var l=t-r,f=e-s,d=(a*f-o*l)/c,p=(i*f-n*l)/c,g=-1e-12,v=1+1e-12;if(u||g<d&&d<v&&g<p&&p<v)return u||(d=d<=0?0:d>=1?1:d),new m(t+d*i,e+d*n)}},getSide:function(t,e,i,n,r,s,a,o){a||(i-=t,n-=e);var h=r-t,u=h*n-(s-e)*i;return!o&&_.isMachineZero(u)&&(u=(h*i+h*i)/(i*i+n*n))>=0&&u<=1&&(u=0),u<0?-1:u>0?1:0},getSignedDistance:function(t,e,i,n,r,s,a){return a||(i-=t,n-=e),0===i?n>0?r-t:t-r:0===n?i<0?s-e:e-s:((r-t)*n-(s-e)*i)/(n>i?n*Math.sqrt(1+i*i/(n*n)):i*Math.sqrt(1+n*n/(i*i)))},getDistance:function(t,e,i,n,r,s,a){return Math.abs(k.getSignedDistance(t,e,i,n,r,s,a))}}}),A=d.extend({_class:"Project",_list:"projects",_reference:"project",_compactSerialize:!0,initialize:function(t){d.call(this,!0),this._children=[],this._namedChildren={},this._activeLayer=null,this._currentStyle=new Q(null,null,this),this._view=X.create(this,t||ht.getCanvas(1,1)),this._selectionItems={},this._selectionCount=0,this._updateVersion=0},_serialize:function(t,e){return c.serialize(this._children,t,!0,e)},_changed:function(t,e){if(1&t){var i=this._view;i&&(i._needsUpdate=!0,!i._requested&&i._autoUpdate&&i.requestUpdate())}var n=this._changes;if(n&&e){var r=this._changesById,s=e._id,a=r[s];a?a.flags|=t:n.push(r[s]={item:e,flags:t})}},clear:function(){for(var t=this._children,e=t.length-1;e>=0;e--)t[e].remove()},isEmpty:function(){return!this._children.length},remove:function t(){return!!t.base.call(this)&&(this._view&&this._view.remove(),!0)},getView:function(){return this._view},getCurrentStyle:function(){return this._currentStyle},setCurrentStyle:function(t){this._currentStyle.set(t)},getIndex:function(){return this._index},getOptions:function(){return this._scope.settings},getLayers:function(){return this._children},getActiveLayer:function(){return this._activeLayer||new E({project:this,insert:!0})},getSymbolDefinitions:function(){var t=[],e={};return this.getItems({class:L,match:function(i){var n=i._definition,r=n._id;return e[r]||(e[r]=!0,t.push(n)),!1}}),t},getSymbols:"getSymbolDefinitions",getSelectedItems:function(){var t=this._selectionItems,e=[];for(var i in t){var n=t[i],r=n._selection;1&r&&n.isInserted()?e.push(n):r||this._updateSelection(n)}return e},_updateSelection:function(t){var e=t._id,i=this._selectionItems;t._selection?i[e]!==t&&(this._selectionCount++,i[e]=t):i[e]===t&&(this._selectionCount--,delete i[e])},selectAll:function(){for(var t=this._children,e=0,i=t.length;e<i;e++)t[e].setFullySelected(!0)},deselectAll:function(){var t=this._selectionItems;for(var e in t)t[e].setFullySelected(!1)},addLayer:function(t){return this.insertLayer(o,t)},insertLayer:function(t,e){if(e instanceof E){e._remove(!1,!0),c.splice(this._children,[e],t,0),e._setProject(this,!0);var i=e._name;i&&e.setName(i),this._changes&&e._changed(5),this._activeLayer||(this._activeLayer=e)}else e=null;return e},_insertItem:function(t,e,i){return e=this.insertLayer(t,e)||(this._activeLayer||this._insertItem(o,new E(I.NO_INSERT),!0)).insertChild(t,e),i&&e.activate&&e.activate(),e},getItems:function(t){return I._getItems(this,t)},getItem:function(t){return I._getItems(this,t,null,null,!0)[0]||null},importJSON:function(t){this.activate();var e=this._activeLayer;return c.importJSON(t,e&&e.isEmpty()&&e)},removeOn:function(t){var e=this._removeSets;if(e){"mouseup"===t&&(e.mousedrag=null);var i=e[t];if(i){for(var n in i){var r=i[n];for(var s in e){var a=e[s];a&&a!=i&&delete a[r._id]}r.remove()}e[t]=null}}},draw:function(t,e,i){this._updateVersion++,t.save(),e.applyToContext(t);for(var n=this._children,r=new c({offset:new m(0,0),pixelRatio:i,viewMatrix:e.isIdentity()?null:e,matrices:[new S],updateMatrix:!0}),s=0,a=n.length;s<a;s++)n[s].draw(t,r);if(t.restore(),this._selectionCount>0){t.save(),t.strokeWidth=1;var o=this._selectionItems,h=this._scope.settings.handleSize,u=this._updateVersion;for(var l in o)o[l]._drawSelection(t,e,h,o,u);t.restore()}}}),I=c.extend(l,{statics:{extend:function t(e){return e._serializeFields&&(e._serializeFields=c.set({},this.prototype._serializeFields,e._serializeFields)),t.base.apply(this,arguments)},NO_INSERT:{insert:!1}},_class:"Item",_name:null,_applyMatrix:!0,_canApplyMatrix:!0,_canScaleStroke:!1,_pivot:null,_visible:!0,_blendMode:"normal",_opacity:1,_locked:!1,_guide:!1,_clipMask:!1,_selection:0,_selectBounds:!0,_selectChildren:!1,_serializeFields:{name:null,applyMatrix:null,matrix:new S,pivot:null,visible:!0,blendMode:"normal",opacity:1,locked:!1,guide:!1,clipMask:!1,selected:!1,data:{}},_prioritize:["applyMatrix"]},new function(){var t=["onMouseDown","onMouseUp","onMouseDrag","onClick","onDoubleClick","onMouseMove","onMouseEnter","onMouseLeave"];return c.each(t,(function(t){this._events[t]={install:function(t){this.getView()._countItemEvent(t,1)},uninstall:function(t){this.getView()._countItemEvent(t,-1)}}}),{_events:{onFrame:{install:function(){this.getView()._animateItem(this,!0)},uninstall:function(){this.getView()._animateItem(this,!1)}},onLoad:{},onError:{}},statics:{_itemHandlers:t}})},{initialize:function(){},_initialize:function(t,e){var i=t&&c.isPlainObject(t),n=i&&!0===t.internal,r=this._matrix=new S,s=i&&t.project||ft.project,a=ft.settings;return this._id=n?null:v.get(),this._parent=this._index=null,this._applyMatrix=this._canApplyMatrix&&a.applyMatrix,e&&r.translate(e),r._owner=this,this._style=new Q(s._currentStyle,this,s),n||i&&0==t.insert||!a.insertItems&&(!i||!0!==t.insert)?this._setProject(s):(i&&t.parent||s)._insertItem(o,this,!0),i&&t!==I.NO_INSERT&&this.set(t,{internal:!0,insert:!0,project:!0,parent:!0}),i},_serialize:function(t,e){var i={},n=this;function r(r){for(var s in r){var a=n[s];c.equals(a,"leading"===s?1.2*r.fontSize:r[s])||(i[s]=c.serialize(a,t,"data"!==s,e))}}return r(this._serializeFields),this instanceof P||r(this._style._defaults),[this._class,i]},_changed:function(t){var e=this._symbol,i=this._parent||e,n=this._project;8&t&&(this._bounds=this._position=this._decomposed=o),16&t&&(this._globalMatrix=o),i&&72&t&&I._clearBoundsCache(i),2&t&&I._clearBoundsCache(this),n&&n._changed(t,this),e&&e._changed(t)},getId:function(){return this._id},getName:function(){return this._name},setName:function(t){if(this._name&&this._removeNamed(),t===+t+"")throw new Error("Names consisting only of numbers are not supported.");var e=this._getOwner();if(t&&e){var i=e._children,n=e._namedChildren;(n[t]=n[t]||[]).push(this),t in i||(i[t]=this)}this._name=t||o,this._changed(256)},getStyle:function(){return this._style},setStyle:function(t){this.getStyle().set(t)}},c.each(["locked","visible","blendMode","opacity","guide"],(function(t){var e=c.capitalize(t),i="_"+t,n={locked:256,visible:265};this["get"+e]=function(){return this[i]},this["set"+e]=function(e){e!=this[i]&&(this[i]=e,this._changed(n[t]||257))}}),{}),{beans:!0,getSelection:function(){return this._selection},setSelection:function(t){if(t!==this._selection){this._selection=t;var e=this._project;e&&(e._updateSelection(this),this._changed(257))}},_changeSelection:function(t,e){var i=this._selection;this.setSelection(e?i|t:i&~t)},isSelected:function(){if(this._selectChildren)for(var t=this._children,e=0,i=t.length;e<i;e++)if(t[e].isSelected())return!0;return!!(1&this._selection)},setSelected:function(t){if(this._selectChildren)for(var e=this._children,i=0,n=e.length;i<n;i++)e[i].setSelected(t);this._changeSelection(1,t)},isFullySelected:function(){var t=this._children,e=!!(1&this._selection);if(t&&e){for(var i=0,n=t.length;i<n;i++)if(!t[i].isFullySelected())return!1;return!0}return e},setFullySelected:function(t){var e=this._children;if(e)for(var i=0,n=e.length;i<n;i++)e[i].setFullySelected(t);this._changeSelection(1,t)},isClipMask:function(){return this._clipMask},setClipMask:function(t){this._clipMask!=(t=!!t)&&(this._clipMask=t,t&&(this.setFillColor(null),this.setStrokeColor(null)),this._changed(257),this._parent&&this._parent._changed(2048))},getData:function(){return this._data||(this._data={}),this._data},setData:function(t){this._data=t},getPosition:function(t){var e=t?m:y,i=this._position||(this._position=this._getPositionFromBounds());return new e(i.x,i.y,this,"setPosition")},setPosition:function(){this.translate(m.read(arguments).subtract(this.getPosition(!0)))},_getPositionFromBounds:function(t){return this._pivot?this._matrix._transformPoint(this._pivot):(t||this.getBounds()).getCenter(!0)},getPivot:function(){var t=this._pivot;return t?new y(t.x,t.y,this,"setPivot"):null},setPivot:function(){this._pivot=m.read(arguments,0,{clone:!0,readNull:!0}),this._position=o}},c.each({getStrokeBounds:{stroke:!0},getHandleBounds:{handle:!0},getInternalBounds:{internal:!0}},(function(t,e){this[e]=function(e){return this.getBounds(e,t)}}),{beans:!0,getBounds:function(t,e){var i=e||t instanceof S,n=c.set({},i?e:t,this._boundsOptions);n.stroke&&!this.getStrokeScaling()||(n.cacheItem=this);var r=this._getCachedBounds(i&&t,n).rect;return arguments.length?r:new C(r.x,r.y,r.width,r.height,this,"setBounds")},setBounds:function(){var t=b.read(arguments),e=this.getBounds(),i=this._matrix,n=new S,r=t.getCenter();n.translate(r),t.width==e.width&&t.height==e.height||(i.isInvertible()||(i.set(i._backup||(new S).translate(i.getTranslation())),e=this.getBounds()),n.scale(0!==e.width?t.width/e.width:0,0!==e.height?t.height/e.height:0)),r=e.getCenter(),n.translate(-r.x,-r.y),this.transform(n)},_getBounds:function(t,e){var i=this._children;return i&&i.length?(I._updateBoundsCache(this,e.cacheItem),I._getBounds(i,t,e)):new b},_getBoundsCacheKey:function(t,e){return[t.stroke?1:0,t.handle?1:0,e?1:0].join("")},_getCachedBounds:function(t,e,i){t=t&&t._orNullIfIdentity();var n=e.internal&&!i,r=e.cacheItem,s=n?null:this._matrix._orNullIfIdentity(),a=r&&(!t||t.equals(s))&&this._getBoundsCacheKey(e,n),o=this._bounds;if(I._updateBoundsCache(this._parent||this._symbol,r),a&&o&&a in o)return{rect:(f=o[a]).rect.clone(),nonscaling:f.nonscaling};var h=this._getBounds(t||s,e),u=h.rect||h,c=this._style,l=h.nonscaling||c.hasStroke()&&!c.getStrokeScaling();if(a){o||(this._bounds=o={});var f=o[a]={rect:u.clone(),nonscaling:l,internal:n}}return{rect:u,nonscaling:l}},_getStrokeMatrix:function(t,e){var i=this.getStrokeScaling()?null:e&&e.internal?this:this._parent||this._symbol&&this._symbol._item,n=i?i.getViewMatrix().invert():t;return n&&n._shiftless()},statics:{_updateBoundsCache:function(t,e){if(t&&e){var i=e._id,n=t._boundsCache=t._boundsCache||{ids:{},list:[]};n.ids[i]||(n.list.push(e),n.ids[i]=e)}},_clearBoundsCache:function(t){var e=t._boundsCache;if(e){t._bounds=t._position=t._boundsCache=o;for(var i=0,n=e.list,r=n.length;i<r;i++){var s=n[i];s!==t&&(s._bounds=s._position=o,s._boundsCache&&I._clearBoundsCache(s))}}},_getBounds:function(t,e,i){var n=1/0,r=-n,s=n,a=r,o=!1;i=i||{};for(var h=0,u=t.length;h<u;h++){var c=t[h];if(c._visible&&!c.isEmpty(!0)){var l=c._getCachedBounds(e&&e.appended(c._matrix),i,!0),f=l.rect;n=Math.min(f.x,n),s=Math.min(f.y,s),r=Math.max(f.x+f.width,r),a=Math.max(f.y+f.height,a),l.nonscaling&&(o=!0)}}return{rect:isFinite(n)?new b(n,s,r-n,a-s):new b,nonscaling:o}}}}),{beans:!0,_decompose:function(){return this._applyMatrix?null:this._decomposed||(this._decomposed=this._matrix.decompose())},getRotation:function(){var t=this._decompose();return t?t.rotation:0},setRotation:function(t){var e=this.getRotation();if(null!=e&&null!=t){var i=this._decomposed;this.rotate(t-e),i&&(i.rotation=t,this._decomposed=i)}},getScaling:function(){var t=this._decompose(),e=t&&t.scaling;return new y(e?e.x:1,e?e.y:1,this,"setScaling")},setScaling:function(){var t=this.getScaling(),e=m.read(arguments,0,{clone:!0,readNull:!0});if(t&&e&&!t.equals(e)){var i=this.getRotation(),n=this._decomposed,r=new S,s=_.isZero;if(s(t.x)||s(t.y))r.translate(n.translation),i&&r.rotate(i),r.scale(e.x,e.y),this._matrix.set(r);else{var a=this.getPosition(!0);r.translate(a),i&&r.rotate(i),r.scale(e.x/t.x,e.y/t.y),i&&r.rotate(-i),r.translate(a.negate()),this.transform(r)}n&&(n.scaling=e,this._decomposed=n)}},getMatrix:function(){return this._matrix},setMatrix:function(){var t=this._matrix;t.set.apply(t,arguments)},getGlobalMatrix:function(t){var e=this._globalMatrix;if(e)for(var i=this._parent,n=[];i;){if(!i._globalMatrix){e=null;for(var r=0,s=n.length;r<s;r++)n[r]._globalMatrix=null;break}n.push(i),i=i._parent}return e||(e=this._globalMatrix=this._matrix.clone(),(i=this._parent)&&e.prepend(i.getGlobalMatrix(!0))),t?e:e.clone()},getViewMatrix:function(){return this.getGlobalMatrix().prepend(this.getView()._matrix)},getApplyMatrix:function(){return this._applyMatrix},setApplyMatrix:function(t){(this._applyMatrix=this._canApplyMatrix&&!!t)&&this.transform(null,!0)},getTransformContent:"#getApplyMatrix",setTransformContent:"#setApplyMatrix"},{getProject:function(){return this._project},_setProject:function(t,e){if(this._project!==t){this._project&&this._installEvents(!1),this._project=t;for(var i=this._children,n=0,r=i&&i.length;n<r;n++)i[n]._setProject(t);e=!0}e&&this._installEvents(!0)},getView:function(){return this._project._view},_installEvents:function t(e){t.base.call(this,e);for(var i=this._children,n=0,r=i&&i.length;n<r;n++)i[n]._installEvents(e)},getLayer:function(){for(var t=this;t=t._parent;)if(t instanceof E)return t;return null},getParent:function(){return this._parent},setParent:function(t){return t.addChild(this)},_getOwner:"#getParent",getChildren:function(){return this._children},setChildren:function(t){this.removeChildren(),this.addChildren(t)},getFirstChild:function(){return this._children&&this._children[0]||null},getLastChild:function(){return this._children&&this._children[this._children.length-1]||null},getNextSibling:function(){var t=this._getOwner();return t&&t._children[this._index+1]||null},getPreviousSibling:function(){var t=this._getOwner();return t&&t._children[this._index-1]||null},getIndex:function(){return this._index},equals:function(t){return t===this||t&&this._class===t._class&&this._style.equals(t._style)&&this._matrix.equals(t._matrix)&&this._locked===t._locked&&this._visible===t._visible&&this._blendMode===t._blendMode&&this._opacity===t._opacity&&this._clipMask===t._clipMask&&this._guide===t._guide&&this._equals(t)||!1},_equals:function(t){return c.equals(this._children,t._children)},clone:function(t){var e=new this.constructor(I.NO_INSERT),i=this._children,n=c.pick(t?t.insert:o,t===o||!0===t),r=c.pick(t?t.deep:o,!0);i&&e.copyAttributes(this),i&&!r||e.copyContent(this),i||e.copyAttributes(this),n&&e.insertAbove(this);var s=this._name,a=this._parent;if(s&&a){i=a._children;for(var h=s,u=1;i[s];)s=h+" "+u++;s!==h&&e.setName(s)}return e},copyContent:function(t){for(var e=t._children,i=0,n=e&&e.length;i<n;i++)this.addChild(e[i].clone(!1),!0)},copyAttributes:function(t,e){this.setStyle(t._style);for(var i=["_locked","_visible","_blendMode","_opacity","_clipMask","_guide"],n=0,r=i.length;n<r;n++){var s=i[n];t.hasOwnProperty(s)&&(this[s]=t[s])}e||this._matrix.set(t._matrix,!0),this.setApplyMatrix(t._applyMatrix),this.setPivot(t._pivot),this.setSelection(t._selection);var a=t._data,o=t._name;this._data=a?c.clone(a):null,o&&this.setName(o)},rasterize:function(t,e){var i=this.getStrokeBounds(),n=(t||this.getView().getResolution())/72,r=i.getTopLeft().floor(),s=i.getBottomRight().ceil(),a=new x(s.subtract(r)),h=new M(I.NO_INSERT);if(!a.isZero()){var u=ht.getCanvas(a.multiply(n)),l=u.getContext("2d"),f=(new S).scale(n).translate(r.negate());l.save(),f.applyToContext(l),this.draw(l,new c({matrices:[f]})),l.restore(),h.setCanvas(u)}return h.transform((new S).translate(r.add(a.divide(2))).scale(1/n)),(e===o||e)&&h.insertAbove(this),h},contains:function(){var t=this._matrix;return t.isInvertible()&&!!this._contains(t._inverseTransform(m.read(arguments)))},_contains:function(t){var e=this._children;if(e){for(var i=e.length-1;i>=0;i--)if(e[i].contains(t))return!0;return!1}return t.isInside(this.getInternalBounds())},isInside:function(){return b.read(arguments).contains(this.getBounds())},_asPathItem:function(){return new F.Rectangle({rectangle:this.getInternalBounds(),matrix:this._matrix,insert:!1})},intersects:function(t,e){return t instanceof I&&this._asPathItem().getIntersections(t._asPathItem(),null,e,!0).length>0}},new function(){function t(){var t=arguments;return this._hitTest(m.read(t),O.getOptions(t))}function e(){var t=arguments,e=m.read(t),i=O.getOptions(t),n=[];return this._hitTest(e,new c({all:n},i)),n}function i(t,e,i,n){var r=this._children;if(r)for(var s=r.length-1;s>=0;s--){var a=r[s],o=a!==n&&a._hitTest(t,e,i);if(o&&!e.all)return o}return null}return A.inject({hitTest:t,hitTestAll:e,_hitTest:i}),{hitTest:t,hitTestAll:e,_hitTestChildren:i}},{_hitTest:function(t,e,i){if(this._locked||!this._visible||this._guide&&!e.guides||this.isEmpty())return null;var n=this._matrix,r=i?i.appended(n):this.getGlobalMatrix().prepend(this.getView()._matrix),s=Math.max(e.tolerance,1e-12),a=e._tolerancePadding=new x(F._getStrokePadding(s,n._shiftless().invert()));if(!(t=n._inverseTransform(t))||!this._children&&!this.getBounds({internal:!0,stroke:!0,handle:!0}).expand(a.multiply(2))._containsPoint(t))return null;var o,h,u=!(e.guides&&!this._guide||e.selected&&!this.isSelected()||e.type&&e.type!==c.hyphenate(this._class)||e.class&&!(this instanceof e.class)),l=e.match,f=this;function d(t){return t&&l&&!l(t)&&(t=null),t&&e.all&&e.all.push(t),t}function p(e,i){var n=i?o["get"+i]():f.getPosition();if(t.subtract(n).divide(a).length<=1)return new O(e,f,{name:i?c.hyphenate(i):e,point:n})}var g=e.position,_=e.center,v=e.bounds;if(u&&this._parent&&(g||_||v)){if((_||v)&&(o=this.getInternalBounds()),!(h=g&&p("position")||_&&p("center","Center"))&&v)for(var m=["TopLeft","TopRight","BottomLeft","BottomRight","LeftCenter","TopCenter","RightCenter","BottomCenter"],y=0;y<8&&!h;y++)h=p("bounds",m[y]);h=d(h)}return h||(h=this._hitTestChildren(t,e,r)||u&&d(this._hitTestSelf(t,e,r,this.getStrokeScaling()?null:r._shiftless().invert()))||null),h&&h.point&&(h.point=n.transform(h.point)),h},_hitTestSelf:function(t,e){if(e.fill&&this.hasFill()&&this._contains(t))return new O("fill",this)},matches:function(t,e){var i=typeof t;if("object"===i){for(var n in t)if(t.hasOwnProperty(n)&&!this.matches(n,t[n]))return!1;return!0}if("function"===i)return t(this);if("match"===t)return e(this);var r=/^(empty|editable)$/.test(t)?this["is"+c.capitalize(t)]():"type"===t?c.hyphenate(this._class):this[t];if("class"===t){if("function"==typeof e)return this instanceof e;r=this._class}if("function"==typeof e)return!!e(r);if(e){if(e.test)return e.test(r);if(c.isPlainObject(e))return function t(e,i){for(var n in e)if(e.hasOwnProperty(n)){var r=e[n],s=i[n];if(c.isPlainObject(r)&&c.isPlainObject(s)){if(!t(r,s))return!1}else if(!c.equals(r,s))return!1}return!0}(e,r)}return c.equals(r,e)},getItems:function(t){return I._getItems(this,t,this._matrix)},getItem:function(t){return I._getItems(this,t,this._matrix,null,!0)[0]||null},statics:{_getItems:function t(e,i,n,r,s){if(!r){var a="object"==typeof i&&i,o=a&&a.overlapping,h=a&&a.inside,u=(m=o||h)&&b.read([m]);r={items:[],recursive:a&&!1!==a.recursive,inside:!!h,overlapping:!!o,rect:u,path:o&&new F.Rectangle({rectangle:u,insert:!1})},a&&(i=c.filter({},i,{recursive:!0,inside:!0,overlapping:!0}))}var l=e._children,f=r.items;n=(u=r.rect)&&(n||new S);for(var d=0,p=l&&l.length;d<p;d++){var g=l[d],_=n&&n.appended(g._matrix),v=!0;if(u){var m=g.getBounds(_);if(!u.intersects(m))continue;u.contains(m)||r.overlapping&&(m.contains(u)||r.path.intersects(g,_))||(v=!1)}if(v&&g.matches(i)&&(f.push(g),s))break;if(!1!==r.recursive&&t(g,i,_,r,s),s&&f.length>0)break}return f}}},{importJSON:function(t){var e=c.importJSON(t,this);return e!==this?this.addChild(e):e},addChild:function(t){return this.insertChild(o,t)},insertChild:function(t,e){var i=e?this.insertChildren(t,[e]):null;return i&&i[0]},addChildren:function(t){return this.insertChildren(this._children.length,t)},insertChildren:function(t,e){var i=this._children;if(i&&e&&e.length>0){for(var n={},r=(e=c.slice(e)).length-1;r>=0;r--){var s=(u=e[r])&&u._id;!u||n[s]?e.splice(r,1):(u._remove(!1,!0),n[s]=!0)}c.splice(i,e,t,0);for(var a=this._project,o=a._changes,h=(r=0,e.length);r<h;r++){var u,l=(u=e[r])._name;u._parent=this,u._setProject(a,!0),l&&u.setName(l),o&&u._changed(5)}this._changed(11)}else e=null;return e},_insertItem:"#insertChild",_insertAt:function(t,e){var i=t&&t._getOwner(),n=t!==this&&i?this:null;return n&&(n._remove(!1,!0),i._insertItem(t._index+e,n)),n},insertAbove:function(t){return this._insertAt(t,1)},insertBelow:function(t){return this._insertAt(t,0)},sendToBack:function(){var t=this._getOwner();return t?t._insertItem(0,this):null},bringToFront:function(){var t=this._getOwner();return t?t._insertItem(o,this):null},appendTop:"#addChild",appendBottom:function(t){return this.insertChild(0,t)},moveAbove:"#insertAbove",moveBelow:"#insertBelow",addTo:function(t){return t._insertItem(o,this)},copyTo:function(t){return this.clone(!1).addTo(t)},reduce:function(t){var e=this._children;if(e&&1===e.length){var i=e[0].reduce(t);return this._parent?(i.insertAbove(this),this.remove()):i.remove(),i}return this},_removeNamed:function(){var t=this._getOwner();if(t){var e=t._children,i=t._namedChildren,n=this._name,r=i[n],s=r?r.indexOf(this):-1;-1!==s&&(e[n]==this&&delete e[n],r.splice(s,1),r.length?e[n]=r[0]:delete i[n])}},_remove:function(t,e){var i=this._getOwner(),n=this._project,r=this._index;return this._style&&this._style._dispose(),!!i&&(this._name&&this._removeNamed(),null!=r&&(n._activeLayer===this&&(n._activeLayer=this.getNextSibling()||this.getPreviousSibling()),c.splice(i._children,null,r,1)),this._installEvents(!1),t&&n._changes&&this._changed(5),e&&i._changed(11,this),this._parent=null,!0)},remove:function(){return this._remove(!0,!0)},replaceWith:function(t){var e=t&&t.insertBelow(this);return e&&this.remove(),e},removeChildren:function(t,e){if(!this._children)return null;t=t||0,e=c.pick(e,this._children.length);for(var i=c.splice(this._children,null,t,e-t),n=i.length-1;n>=0;n--)i[n]._remove(!0,!1);return i.length>0&&this._changed(11),i},clear:"#removeChildren",reverseChildren:function(){if(this._children){this._children.reverse();for(var t=0,e=this._children.length;t<e;t++)this._children[t]._index=t;this._changed(11)}},isEmpty:function(t){var e=this._children,i=e?e.length:0;if(t){for(var n=0;n<i;n++)if(!e[n].isEmpty(t))return!1;return!0}return!i},isEditable:function(){for(var t=this;t;){if(!t._visible||t._locked)return!1;t=t._parent}return!0},hasFill:function(){return this.getStyle().hasFill()},hasStroke:function(){return this.getStyle().hasStroke()},hasShadow:function(){return this.getStyle().hasShadow()},_getOrder:function(t){function e(t){var e=[];do{e.unshift(t)}while(t=t._parent);return e}for(var i=e(this),n=e(t),r=0,s=Math.min(i.length,n.length);r<s;r++)if(i[r]!=n[r])return i[r]._index<n[r]._index?1:-1;return 0},hasChildren:function(){return this._children&&this._children.length>0},isInserted:function(){return!!this._parent&&this._parent.isInserted()},isAbove:function(t){return-1===this._getOrder(t)},isBelow:function(t){return 1===this._getOrder(t)},isParent:function(t){return this._parent===t},isChild:function(t){return t&&t._parent===this},isDescendant:function(t){for(var e=this;e=e._parent;)if(e===t)return!0;return!1},isAncestor:function(t){return!!t&&t.isDescendant(this)},isSibling:function(t){return this._parent===t._parent},isGroupedWith:function(t){for(var e=this._parent;e;){if(e._parent&&/^(Group|Layer|CompoundPath)$/.test(e._class)&&t.isDescendant(e))return!0;e=e._parent}return!1}},c.each(["rotate","scale","shear","skew"],(function(t){var e="rotate"===t;this[t]=function(){var i=arguments,n=(e?c:m).read(i),r=m.read(i,0,{readNull:!0});return this.transform((new S)[t](n,r||this.getPosition(!0)))}}),{translate:function(){var t=new S;return this.transform(t.translate.apply(t,arguments))},transform:function(t,e,i){var n=this._matrix,r=t&&!t.isIdentity(),s=i&&this._canApplyMatrix||this._applyMatrix&&(r||!n.isIdentity()||e&&this._children);if(!r&&!s)return this;if(r){!t.isInvertible()&&n.isInvertible()&&(n._backup=n.getValues()),n.prepend(t,!0);var a=this._style,o=a.getFillColor(!0),h=a.getStrokeColor(!0);o&&o.transform(t),h&&h.transform(t)}if(s&&(s=this._transformContent(n,e,i))){var u=this._pivot;u&&n._transformPoint(u,u,!0),n.reset(!0),i&&this._canApplyMatrix&&(this._applyMatrix=!0)}var c=this._bounds,l=this._position;(r||s)&&this._changed(25);var f=r&&c&&t.decompose();if(f&&f.skewing.isZero()&&f.rotation%90==0){for(var d in c){var p=c[d];if(p.nonscaling)delete c[d];else if(s||!p.internal){var g=p.rect;t._transformBounds(g,g)}}this._bounds=c;var _=c[this._getBoundsCacheKey(this._boundsOptions||{})];_&&(this._position=this._getPositionFromBounds(_.rect))}else r&&l&&this._pivot&&(this._position=t._transformPoint(l,l));return this},_transformContent:function(t,e,i){var n=this._children;if(n){for(var r=0,s=n.length;r<s;r++)n[r].transform(t,e,i);return!0}},globalToLocal:function(){return this.getGlobalMatrix(!0)._inverseTransform(m.read(arguments))},localToGlobal:function(){return this.getGlobalMatrix(!0)._transformPoint(m.read(arguments))},parentToLocal:function(){return this._matrix._inverseTransform(m.read(arguments))},localToParent:function(){return this._matrix._transformPoint(m.read(arguments))},fitBounds:function(t,e){t=b.read(arguments);var i=this.getBounds(),n=i.height/i.width,r=t.height/t.width,s=(e?n>r:n<r)?t.width/i.width:t.height/i.height,a=new b(new m,new x(i.width*s,i.height*s));a.setCenter(t.getCenter()),this.setBounds(a)}}),{_setStyles:function(t,e,i){var n=this._style,r=this._matrix;if(n.hasFill()&&(t.fillStyle=n.getFillColor().toCanvasStyle(t,r)),n.hasStroke()){t.strokeStyle=n.getStrokeColor().toCanvasStyle(t,r),t.lineWidth=n.getStrokeWidth();var s=n.getStrokeJoin(),a=n.getStrokeCap(),o=n.getMiterLimit();if(s&&(t.lineJoin=s),a&&(t.lineCap=a),o&&(t.miterLimit=o),ft.support.nativeDash){var h=n.getDashArray(),u=n.getDashOffset();h&&h.length&&("setLineDash"in t?(t.setLineDash(h),t.lineDashOffset=u):(t.mozDash=h,t.mozDashOffset=u))}}if(n.hasShadow()){var c=e.pixelRatio||1,l=i._shiftless().prepend((new S).scale(c,c)),f=l.transform(new m(n.getShadowBlur(),0)),d=l.transform(this.getShadowOffset());t.shadowColor=n.getShadowColor().toCanvasStyle(t),t.shadowBlur=f.getLength(),t.shadowOffsetX=d.x,t.shadowOffsetY=d.y}},draw:function(t,e,i){if(this._updateVersion=this._project._updateVersion,this._visible&&0!==this._opacity){var n=e.matrices,r=e.viewMatrix,s=this._matrix,a=n[n.length-1].appended(s);if(a.isInvertible()){r=r?r.appended(a):a,n.push(a),e.updateMatrix&&(this._globalMatrix=a);var o,h,u,c=this._blendMode,l=_.clamp(this._opacity,0,1),f="normal"===c,d=ut.nativeModes[c],p=f&&1===l||e.dontStart||e.clip||(d||f&&l<1)&&this._canComposite(),g=e.pixelRatio||1;if(!p){var v=this.getStrokeBounds(r);if(!v.width||!v.height)return void n.pop();u=e.offset,h=e.offset=v.getTopLeft().floor(),o=t,t=ht.getContext(v.getSize().ceil().add(1).multiply(g)),1!==g&&t.scale(g,g)}t.save();var m=i?i.appended(s):this._canScaleStroke&&!this.getStrokeScaling(!0)&&r,y=!p&&e.clipItem,x=!m||y;if(p?(t.globalAlpha=l,d&&(t.globalCompositeOperation=c)):x&&t.translate(-h.x,-h.y),x&&(p?s:r).applyToContext(t),y&&e.clipItem.draw(t,e.extend({clip:!0})),m){t.setTransform(g,0,0,g,0,0);var w=e.offset;w&&t.translate(-w.x,-w.y)}this._draw(t,e,r,m),t.restore(),n.pop(),e.clip&&!e.dontFinish&&t.clip(this.getFillRule()),p||(ut.process(c,t,o,l,h.subtract(u).multiply(g)),ht.release(t),e.offset=u)}}},_isUpdated:function(t){var e=this._parent;if(e instanceof j)return e._isUpdated(t);var i=this._updateVersion===t;return!i&&e&&e._visible&&e._isUpdated(t)&&(this._updateVersion=t,i=!0),i},_drawSelection:function(t,e,i,n,r){var s=this._selection,a=1&s,o=2&s||a&&this._selectBounds,h=4&s;if(this._drawSelected||(a=!1),(a||o||h)&&this._isUpdated(r)){var u,c=this.getSelectedColor(!0)||(u=this.getLayer())&&u.getSelectedColor(!0),l=e.appended(this.getGlobalMatrix(!0)),f=i/2;if(t.strokeStyle=t.fillStyle=c?c.toCanvasStyle(t):"#009dec",a&&this._drawSelected(t,l,n),h){var d=this.getPosition(!0),p=this._parent,g=p?p.localToGlobal(d):d,_=g.x,v=g.y;t.beginPath(),t.arc(_,v,f,0,2*Math.PI,!0),t.stroke();for(var m=[[0,-1],[1,0],[0,1],[-1,0]],y=f,x=i+1,w=0;w<4;w++){var b=m[w],C=b[0],S=b[1];t.moveTo(_+C*y,v+S*y),t.lineTo(_+C*x,v+S*x),t.stroke()}}if(o){var k=l._transformCorners(this.getInternalBounds());for(t.beginPath(),w=0;w<8;w++)t[w?"lineTo":"moveTo"](k[w],k[++w]);for(t.closePath(),t.stroke(),w=0;w<8;w++)t.fillRect(k[w]-f,k[++w]-f,i,i)}}},_canComposite:function(){return!1}},c.each(["down","drag","up","move"],(function(t){this["removeOn"+c.capitalize(t)]=function(){var e={};return e[t]=!0,this.removeOn(e)}}),{removeOn:function(t){for(var e in t)if(t[e]){var i="mouse"+e,n=this._project,r=n._removeSets=n._removeSets||{};r[i]=r[i]||{},r[i][this._id]=this}return this}}),{tween:function(t,e,i){i||(i=e,e=t,t=null,i||(i=e,e=null));var n=i&&i.easing,r=i&&i.start,s=null!=i&&("number"==typeof i?i:i.duration),a=new at(this,t,e,s,n,r);return s&&this.on("frame",(function t(e){a._handleFrame(1e3*e.time),a.running||this.off("frame",t)})),a},tweenTo:function(t,e){return this.tween(null,t,e)},tweenFrom:function(t,e){return this.tween(t,null,e)}}),P=I.extend({_class:"Group",_selectBounds:!1,_selectChildren:!0,_serializeFields:{children:[]},initialize:function(t){this._children=[],this._namedChildren={},this._initialize(t)||this.addChildren(Array.isArray(t)?t:arguments)},_changed:function t(e){t.base.call(this,e),2050&e&&(this._clipItem=o)},_getClipItem:function(){var t=this._clipItem;if(t===o){t=null;for(var e=this._children,i=0,n=e.length;i<n;i++)if(e[i]._clipMask){t=e[i];break}this._clipItem=t}return t},isClipped:function(){return!!this._getClipItem()},setClipped:function(t){var e=this.getFirstChild();e&&e.setClipMask(t)},_getBounds:function t(e,i){var n=this._getClipItem();return n?n._getCachedBounds(n._matrix.prepended(e),c.set({},i,{stroke:!1})):t.base.call(this,e,i)},_hitTestChildren:function t(e,i,n){var r=this._getClipItem();return(!r||r.contains(e))&&t.base.call(this,e,i,n,r)},_draw:function(t,e){var i=e.clip,n=!i&&this._getClipItem();e=e.extend({clipItem:n,clip:!1}),i?(t.beginPath(),e.dontStart=e.dontFinish=!0):n&&n.draw(t,e.extend({clip:!0}));for(var r=this._children,s=0,a=r.length;s<a;s++){var o=r[s];o!==n&&o.draw(t,e)}}}),E=P.extend({_class:"Layer",initialize:function(){P.apply(this,arguments)},_getOwner:function(){return this._parent||null!=this._index&&this._project},isInserted:function t(){return this._parent?t.base.call(this):null!=this._index},activate:function(){this._project._activeLayer=this},_hitTestSelf:function(){}}),T=I.extend({_class:"Shape",_applyMatrix:!1,_canApplyMatrix:!1,_canScaleStroke:!0,_serializeFields:{type:null,size:null,radius:null},initialize:function(t,e){this._initialize(t,e)},_equals:function(t){return this._type===t._type&&this._size.equals(t._size)&&c.equals(this._radius,t._radius)},copyContent:function(t){this.setType(t._type),this.setSize(t._size),this.setRadius(t._radius)},getType:function(){return this._type},setType:function(t){this._type=t},getShape:"#getType",setShape:"#setType",getSize:function(){var t=this._size;return new w(t.width,t.height,this,"setSize")},setSize:function(){var t=x.read(arguments);if(this._size){if(!this._size.equals(t)){var e=this._type,i=t.width,n=t.height;"rectangle"===e?this._radius.set(x.min(this._radius,t.divide(2).abs())):"circle"===e?(i=n=(i+n)/2,this._radius=i/2):"ellipse"===e&&this._radius._set(i/2,n/2),this._size._set(i,n),this._changed(9)}}else this._size=t.clone()},getRadius:function(){var t=this._radius;return"circle"===this._type?t:new w(t.width,t.height,this,"setRadius")},setRadius:function(t){var e=this._type;if("circle"===e){if(t===this._radius)return;var i=2*t;this._radius=t,this._size._set(i,i)}else if(t=x.read(arguments),this._radius){if(this._radius.equals(t))return;this._radius.set(t),"rectangle"===e?(i=x.max(this._size,t.multiply(2)),this._size.set(i)):"ellipse"===e&&this._size._set(2*t.width,2*t.height)}else this._radius=t.clone();this._changed(9)},isEmpty:function(){return!1},toPath:function(t){var e=new(F[c.capitalize(this._type)])({center:new m,size:this._size,radius:this._radius,insert:!1});return e.copyAttributes(this),ft.settings.applyMatrix&&e.setApplyMatrix(!0),(t===o||t)&&e.insertAbove(this),e},toShape:"#clone",_asPathItem:function(){return this.toPath(!1)},_draw:function(t,e,i,n){var r=this._style,s=r.hasFill(),a=r.hasStroke(),o=e.dontFinish||e.clip,h=!n;if(s||a||o){var u=this._type,c=this._radius,l="circle"===u;if(e.dontStart||t.beginPath(),h&&l)t.arc(0,0,c,0,2*Math.PI,!0);else{var f=l?c:c.width,d=l?c:c.height,p=this._size,g=p.width,_=p.height;if(h&&"rectangle"===u&&0===f&&0===d)t.rect(-g/2,-_/2,g,_);else{var v=g/2,m=_/2,y=.44771525016920644,x=f*y,w=d*y,b=[-v,-m+d,-v,-m+w,-v+x,-m,-v+f,-m,v-f,-m,v-x,-m,v,-m+w,v,-m+d,v,m-d,v,m-w,v-x,m,v-f,m,-v+f,m,-v+x,m,-v,m-w,-v,m-d];n&&n.transform(b,b,32),t.moveTo(b[0],b[1]),t.bezierCurveTo(b[2],b[3],b[4],b[5],b[6],b[7]),v!==f&&t.lineTo(b[8],b[9]),t.bezierCurveTo(b[10],b[11],b[12],b[13],b[14],b[15]),m!==d&&t.lineTo(b[16],b[17]),t.bezierCurveTo(b[18],b[19],b[20],b[21],b[22],b[23]),v!==f&&t.lineTo(b[24],b[25]),t.bezierCurveTo(b[26],b[27],b[28],b[29],b[30],b[31])}}t.closePath()}o||!s&&!a||(this._setStyles(t,e,i),s&&(t.fill(r.getFillRule()),t.shadowColor="rgba(0,0,0,0)"),a&&t.stroke())},_canComposite:function(){return!(this.hasFill()&&this.hasStroke())},_getBounds:function(t,e){var i=new b(this._size).setCenter(0,0),n=this._style,r=e.stroke&&n.hasStroke()&&n.getStrokeWidth();return t&&(i=t._transformBounds(i)),r?i.expand(F._getStrokePadding(r,this._getStrokeMatrix(t,e))):i}},new function(){function t(t,e,i){var n=t._radius;if(!n.isZero())for(var r=t._size.divide(2),s=1;s<=4;s++){var a=new m(s>1&&s<4?-1:1,s>2?-1:1),o=a.multiply(r),h=o.subtract(a.multiply(n));if(new b(i?o.add(a.multiply(i)):o,h).contains(e))return{point:h,quadrant:s}}}function e(t,e,i,n){var r=t.divide(e);return(!n||r.isInQuadrant(n))&&r.subtract(r.normalize()).multiply(e).divide(i).length<=1}return{_contains:function e(i){if("rectangle"===this._type){var n=t(this,i);return n?i.subtract(n.point).divide(this._radius).getLength()<=1:e.base.call(this,i)}return i.divide(this.size).getLength()<=.5},_hitTestSelf:function i(n,r,s,a){var o=!1,h=this._style,u=r.stroke&&h.hasStroke(),c=r.fill&&h.hasFill();if(u||c){var l=this._type,f=this._radius,d=u?h.getStrokeWidth()/2:0,p=r._tolerancePadding.add(F._getStrokePadding(d,!h.getStrokeScaling()&&a));if("rectangle"===l){var g=p.multiply(2),_=t(this,n,g);if(_)o=e(n.subtract(_.point),f,p,_.quadrant);else{var v=new b(this._size).setCenter(0,0),m=v.expand(g),y=v.expand(g.negate());o=m._containsPoint(n)&&!y._containsPoint(n)}}else o=e(n,f,p)}return o?new O(u?"stroke":"fill",this):i.base.apply(this,arguments)}}},{statics:new function(){function t(t,e,i,n,r){var s=c.create(T.prototype);return s._type=t,s._size=i,s._radius=n,s._initialize(c.getNamed(r),e),s}return{Circle:function(){var e=arguments,i=m.readNamed(e,"center"),n=c.readNamed(e,"radius");return t("circle",i,new x(2*n),n,e)},Rectangle:function(){var e=arguments,i=b.readNamed(e,"rectangle"),n=x.min(x.readNamed(e,"radius"),i.getSize(!0).divide(2));return t("rectangle",i.getCenter(!0),i.getSize(!0),n,e)},Ellipse:function(){var e=arguments,i=T._readEllipse(e),n=i.radius;return t("ellipse",i.center,n.multiply(2),n,e)},_readEllipse:function(t){var e,i;if(c.hasNamed(t,"radius"))e=m.readNamed(t,"center"),i=x.readNamed(t,"radius");else{var n=b.readNamed(t,"rectangle");e=n.getCenter(!0),i=n.getSize(!0).divide(2)}return{center:e,radius:i}}}}}),M=I.extend({_class:"Raster",_applyMatrix:!1,_canApplyMatrix:!1,_boundsOptions:{stroke:!1,handle:!1},_serializeFields:{crossOrigin:null,source:null},_prioritize:["crossOrigin"],_smoothing:!0,beans:!0,initialize:function(t,e){if(!this._initialize(t,e!==o&&m.read(arguments))){var i,n=typeof t,r="string"===n?u.getElementById(t):"object"===n?t:null;if(r&&r!==I.NO_INSERT)if(r.getContext||null!=r.naturalHeight)i=r;else if(r){var s=x.read(arguments);s.isZero()||(i=ht.getCanvas(s))}i?this.setImage(i):this.setSource(t)}this._size||(this._size=new x,this._loaded=!1)},_equals:function(t){return this.getSource()===t.getSource()},copyContent:function(t){var e=t._image,i=t._canvas;if(e)this._setImage(e);else if(i){var n=ht.getCanvas(t._size);n.getContext("2d").drawImage(i,0,0),this._setImage(n)}this._crossOrigin=t._crossOrigin},getSize:function(){var t=this._size;return new w(t?t.width:0,t?t.height:0,this,"setSize")},setSize:function(){var t=x.read(arguments);if(!t.equals(this._size))if(t.width>0&&t.height>0){var e=this.getElement();this._setImage(ht.getCanvas(t)),e&&this.getContext(!0).drawImage(e,0,0,t.width,t.height)}else this._canvas&&ht.release(this._canvas),this._size=t.clone()},getWidth:function(){return this._size?this._size.width:0},setWidth:function(t){this.setSize(t,this.getHeight())},getHeight:function(){return this._size?this._size.height:0},setHeight:function(t){this.setSize(this.getWidth(),t)},getLoaded:function(){return this._loaded},isEmpty:function(){var t=this._size;return!t||0===t.width&&0===t.height},getResolution:function(){var t=this._matrix,e=new m(0,0).transform(t),i=new m(1,0).transform(t).subtract(e),n=new m(0,1).transform(t).subtract(e);return new x(72/i.getLength(),72/n.getLength())},getPpi:"#getResolution",getImage:function(){return this._image},setImage:function(t){var e=this;function i(t){var i=e.getView(),n=t&&t.type||"load";i&&e.responds(n)&&(ft=i._scope,e.emit(n,new tt(t)))}this._setImage(t),this._loaded?setTimeout(i,0):t&&J.add(t,{load:function(n){e._setImage(t),i(n)},error:i})},_setImage:function(t){this._canvas&&ht.release(this._canvas),t&&t.getContext?(this._image=null,this._canvas=t,this._loaded=!0):(this._image=t,this._canvas=null,this._loaded=!!(t&&t.src&&t.complete)),this._size=new x(t?t.naturalWidth||t.width:0,t?t.naturalHeight||t.height:0),this._context=null,this._changed(1033)},getCanvas:function(){if(!this._canvas){var t=ht.getContext(this._size);try{this._image&&t.drawImage(this._image,0,0),this._canvas=t.canvas}catch(e){ht.release(t)}}return this._canvas},setCanvas:"#setImage",getContext:function(t){return this._context||(this._context=this.getCanvas().getContext("2d")),t&&(this._image=null,this._changed(1025)),this._context},setContext:function(t){this._context=t},getSource:function(){var t=this._image;return t&&t.src||this.toDataURL()},setSource:function(t){var e=new a.Image,i=this._crossOrigin;i&&(e.crossOrigin=i),t&&(e.src=t),this.setImage(e)},getCrossOrigin:function(){var t=this._image;return t&&t.crossOrigin||this._crossOrigin||""},setCrossOrigin:function(t){this._crossOrigin=t;var e=this._image;e&&(e.crossOrigin=t)},getSmoothing:function(){return this._smoothing},setSmoothing:function(t){this._smoothing=t,this._changed(257)},getElement:function(){return this._canvas||this._loaded&&this._image}},{beans:!1,getSubCanvas:function(){var t=b.read(arguments),e=ht.getContext(t.getSize());return e.drawImage(this.getCanvas(),t.x,t.y,t.width,t.height,0,0,t.width,t.height),e.canvas},getSubRaster:function(){var t=b.read(arguments),e=new M(I.NO_INSERT);return e._setImage(this.getSubCanvas(t)),e.translate(t.getCenter().subtract(this.getSize().divide(2))),e._matrix.prepend(this._matrix),e.insertAbove(this),e},toDataURL:function(){var t=this._image,e=t&&t.src;if(/^data:/.test(e))return e;var i=this.getCanvas();return i?i.toDataURL.apply(i,arguments):null},drawImage:function(t){var e=m.read(arguments,1);this.getContext(!0).drawImage(t,e.x,e.y)},getAverageColor:function(t){var e,i;if(t?t instanceof D?(i=t,e=t.getBounds()):"object"==typeof t&&("width"in t?e=new b(t):"x"in t&&(e=new b(t.x-.5,t.y-.5,1,1))):e=this.getBounds(),!e)return null;var n=Math.min(e.width,32),r=Math.min(e.height,32),s=M._sampleContext;s?s.clearRect(0,0,33,33):s=M._sampleContext=ht.getContext(new x(32)),s.save();var a=(new S).scale(n/e.width,r/e.height).translate(-e.x,-e.y);a.applyToContext(s),i&&i.draw(s,new c({clip:!0,matrices:[a]})),this._matrix.applyToContext(s);var o=this.getElement(),h=this._size;o&&s.drawImage(o,-h.width/2,-h.height/2),s.restore();for(var u=s.getImageData(.5,.5,Math.ceil(n),Math.ceil(r)).data,l=[0,0,0],f=0,d=0,p=u.length;d<p;d+=4){var g=u[d+3];f+=g,g/=255,l[0]+=u[d]*g,l[1]+=u[d+1]*g,l[2]+=u[d+2]*g}for(d=0;d<3;d++)l[d]/=f;return f?G.read(l):null},getPixel:function(){var t=m.read(arguments),e=this.getContext().getImageData(t.x,t.y,1,1).data;return new G("rgb",[e[0]/255,e[1]/255,e[2]/255],e[3]/255)},setPixel:function(){var t=arguments,e=m.read(t),i=G.read(t),n=i._convert("rgb"),r=i._alpha,s=this.getContext(!0),a=s.createImageData(1,1),o=a.data;o[0]=255*n[0],o[1]=255*n[1],o[2]=255*n[2],o[3]=null!=r?255*r:255,s.putImageData(a,e.x,e.y)},clear:function(){var t=this._size;this.getContext(!0).clearRect(0,0,t.width+1,t.height+1)},createImageData:function(){var t=x.read(arguments);return this.getContext().createImageData(t.width,t.height)},getImageData:function(){var t=b.read(arguments);return t.isEmpty()&&(t=new b(this._size)),this.getContext().getImageData(t.x,t.y,t.width,t.height)},setImageData:function(t){var e=m.read(arguments,1);this.getContext(!0).putImageData(t,e.x,e.y)},_getBounds:function(t,e){var i=new b(this._size).setCenter(0,0);return t?t._transformBounds(i):i},_hitTestSelf:function(t){if(this._contains(t)){var e=this;return new O("pixel",e,{offset:t.add(e._size.divide(2)).round(),color:{get:function(){return e.getPixel(this.offset)}}})}},_draw:function(t,e,i){var n=this.getElement();n&&n.width>0&&n.height>0&&(t.globalAlpha=_.clamp(this._opacity,0,1),this._setStyles(t,e,i),K.setPrefixed(t,"imageSmoothingEnabled",this._smoothing),t.drawImage(n,-this._size.width/2,-this._size.height/2))},_canComposite:function(){return!0}}),L=I.extend({_class:"SymbolItem",_applyMatrix:!1,_canApplyMatrix:!1,_boundsOptions:{stroke:!0},_serializeFields:{symbol:null},initialize:function(t,e){this._initialize(t,e!==o&&m.read(arguments,1))||this.setDefinition(t instanceof N?t:new N(t))},_equals:function(t){return this._definition===t._definition},copyContent:function(t){this.setDefinition(t._definition)},getDefinition:function(){return this._definition},setDefinition:function(t){this._definition=t,this._changed(9)},getSymbol:"#getDefinition",setSymbol:"#setDefinition",isEmpty:function(){return this._definition._item.isEmpty()},_getBounds:function(t,e){var i=this._definition._item;return i._getCachedBounds(i._matrix.prepended(t),e)},_hitTestSelf:function(t,e,i){var n=e.extend({all:!1}),r=this._definition._item._hitTest(t,n,i);return r&&(r.item=this),r},_draw:function(t,e){this._definition._item.draw(t,e)}}),N=c.extend({_class:"SymbolDefinition",initialize:function(t,e){this._id=v.get(),this.project=ft.project,t&&this.setItem(t,e)},_serialize:function(t,e){return e.add(this,(function(){return c.serialize([this._class,this._item],t,!1,e)}))},_changed:function(t){8&t&&I._clearBoundsCache(this),1&t&&this.project._changed(t)},getItem:function(){return this._item},setItem:function(t,e){t._symbol&&(t=t.clone()),this._item&&(this._item._symbol=null),this._item=t,t.remove(),t.setSelected(!1),e||t.setPosition(new m),t._symbol=this,this._changed(9)},getDefinition:"#getItem",setDefinition:"#setItem",place:function(t){return new L(this,t)},clone:function(){return new N(this._item.clone(!1))},equals:function(t){return t===this||t&&this._item.equals(t._item)||!1}}),O=c.extend({_class:"HitResult",initialize:function(t,e,i){this.type=t,this.item=e,i&&this.inject(i)},statics:{getOptions:function(t){var e=t&&c.read(t);return new c({type:null,tolerance:ft.settings.hitTolerance,fill:!e,stroke:!e,segments:!e,handles:!1,ends:!1,position:!1,center:!1,bounds:!1,guides:!1,selected:!1},e)}}}),z=c.extend({_class:"Segment",beans:!0,_selection:0,initialize:function(t,e,i,n,r,s){var a,h,u,c,l=arguments.length;l>0&&(null==t||"object"==typeof t?1===l&&t&&"point"in t?(a=t.point,h=t.handleIn,u=t.handleOut,c=t.selection):(a=t,h=e,u=i,c=n):(a=[t,e],h=i!==o?[i,n]:null,u=r!==o?[r,s]:null)),new V(a,this,"_point"),new V(h,this,"_handleIn"),new V(u,this,"_handleOut"),c&&this.setSelection(c)},_serialize:function(t,e){var i=this._point,n=this._selection,r=n||this.hasHandles()?[i,this._handleIn,this._handleOut]:i;return n&&r.push(n),c.serialize(r,t,!0,e)},_changed:function(t){var e=this._path;if(e){var i,n=e._curves,r=this._index;n&&(t&&t!==this._point&&t!==this._handleIn||!(i=r>0?n[r-1]:e._closed?n[n.length-1]:null)||i._changed(),t&&t!==this._point&&t!==this._handleOut||!(i=n[r])||i._changed()),e._changed(41)}},getPoint:function(){return this._point},setPoint:function(){this._point.set(m.read(arguments))},getHandleIn:function(){return this._handleIn},setHandleIn:function(){this._handleIn.set(m.read(arguments))},getHandleOut:function(){return this._handleOut},setHandleOut:function(){this._handleOut.set(m.read(arguments))},hasHandles:function(){return!this._handleIn.isZero()||!this._handleOut.isZero()},isSmooth:function(){var t=this._handleIn,e=this._handleOut;return!t.isZero()&&!e.isZero()&&t.isCollinear(e)},clearHandles:function(){this._handleIn._set(0,0),this._handleOut._set(0,0)},getSelection:function(){return this._selection},setSelection:function(t){var e=this._selection,i=this._path;this._selection=t=t||0,i&&t!==e&&(i._updateSelection(this,e,t),i._changed(257))},_changeSelection:function(t,e){var i=this._selection;this.setSelection(e?i|t:i&~t)},isSelected:function(){return!!(7&this._selection)},setSelected:function(t){this._changeSelection(7,t)},getIndex:function(){return this._index!==o?this._index:null},getPath:function(){return this._path||null},getCurve:function(){var t=this._path,e=this._index;return t?(e>0&&!t._closed&&e===t._segments.length-1&&e--,t.getCurves()[e]||null):null},getLocation:function(){var t=this.getCurve();return t?new B(t,this===t._segment1?0:1):null},getNext:function(){var t=this._path&&this._path._segments;return t&&(t[this._index+1]||this._path._closed&&t[0])||null},smooth:function(t,e,i){var n=t||{},r=n.type,s=n.factor,a=this.getPrevious(),h=this.getNext(),u=(a||this)._point,c=this._point,l=(h||this)._point,f=u.getDistance(c),d=c.getDistance(l);if(r&&"catmull-rom"!==r){if("geometric"!==r)throw new Error("Smoothing method '"+r+"' not supported.");if(a&&h){var p=u.subtract(l),g=s===o?.4:s,_=g*f/(f+d);e||this.setHandleIn(p.multiply(_)),i||this.setHandleOut(p.multiply(_-g))}}else{var v=s===o?.5:s,y=Math.pow(f,v),x=y*y,w=Math.pow(d,v),b=w*w;if(!e&&a){var C=2*b+3*w*y+x,S=3*w*(w+y);this.setHandleIn(0!==S?new m((b*u._x+C*c._x-x*l._x)/S-c._x,(b*u._y+C*c._y-x*l._y)/S-c._y):new m)}!i&&h&&(C=2*x+3*y*w+b,S=3*y*(y+w),this.setHandleOut(0!==S?new m((x*l._x+C*c._x-b*u._x)/S-c._x,(x*l._y+C*c._y-b*u._y)/S-c._y):new m))}},getPrevious:function(){var t=this._path&&this._path._segments;return t&&(t[this._index-1]||this._path._closed&&t[t.length-1])||null},isFirst:function(){return!this._index},isLast:function(){var t=this._path;return t&&this._index===t._segments.length-1||!1},reverse:function(){var t=this._handleIn,e=this._handleOut,i=t.clone();t.set(e),e.set(i)},reversed:function(){return new z(this._point,this._handleOut,this._handleIn)},remove:function(){return!!this._path&&!!this._path.removeSegment(this._index)},clone:function(){return new z(this._point,this._handleIn,this._handleOut)},equals:function(t){return t===this||t&&this._class===t._class&&this._point.equals(t._point)&&this._handleIn.equals(t._handleIn)&&this._handleOut.equals(t._handleOut)||!1},toString:function(){var t=["point: "+this._point];return this._handleIn.isZero()||t.push("handleIn: "+this._handleIn),this._handleOut.isZero()||t.push("handleOut: "+this._handleOut),"{ "+t.join(", ")+" }"},transform:function(t){this._transformCoordinates(t,new Array(6),!0),this._changed()},interpolate:function(t,e,i){var n=1-i,r=i,s=t._point,a=e._point,o=t._handleIn,h=e._handleIn,u=e._handleOut,c=t._handleOut;this._point._set(n*s._x+r*a._x,n*s._y+r*a._y,!0),this._handleIn._set(n*o._x+r*h._x,n*o._y+r*h._y,!0),this._handleOut._set(n*c._x+r*u._x,n*c._y+r*u._y,!0),this._changed()},_transformCoordinates:function(t,e,i){var n=this._point,r=i&&this._handleIn.isZero()?null:this._handleIn,s=i&&this._handleOut.isZero()?null:this._handleOut,a=n._x,o=n._y,h=2;return e[0]=a,e[1]=o,r&&(e[h++]=r._x+a,e[h++]=r._y+o),s&&(e[h++]=s._x+a,e[h++]=s._y+o),t&&(t._transformCoordinates(e,e,h/2),a=e[0],o=e[1],i?(n._x=a,n._y=o,h=2,r&&(r._x=e[h++]-a,r._y=e[h++]-o),s&&(s._x=e[h++]-a,s._y=e[h++]-o)):(r||(e[h++]=a,e[h++]=o),s||(e[h++]=a,e[h++]=o))),e}}),V=m.extend({initialize:function(t,e,i){var n,r,s;if(t)if((n=t[0])!==o)r=t[1];else{var a=t;(n=a.x)===o&&(n=(a=m.read(arguments)).x),r=a.y,s=a.selected}else n=r=0;this._x=n,this._y=r,this._owner=e,e[i]=this,s&&this.setSelected(!0)},_set:function(t,e){return this._x=t,this._y=e,this._owner._changed(this),this},getX:function(){return this._x},setX:function(t){this._x=t,this._owner._changed(this)},getY:function(){return this._y},setY:function(t){this._y=t,this._owner._changed(this)},isZero:function(){var t=_.isZero;return t(this._x)&&t(this._y)},isSelected:function(){return!!(this._owner._selection&this._getSelection())},setSelected:function(t){this._owner._changeSelection(this._getSelection(),t)},_getSelection:function(){var t=this._owner;return this===t._point?1:this===t._handleIn?2:this===t._handleOut?4:0}}),R=c.extend({_class:"Curve",beans:!0,initialize:function(t,e,i,n,r,s,a,o){var h,u,c,l,f,d,p=arguments.length;3===p?(this._path=t,h=e,u=i):p?1===p?"segment1"in t?(h=new z(t.segment1),u=new z(t.segment2)):"point1"in t?(c=t.point1,f=t.handle1,d=t.handle2,l=t.point2):Array.isArray(t)&&(c=[t[0],t[1]],l=[t[6],t[7]],f=[t[2]-t[0],t[3]-t[1]],d=[t[4]-t[6],t[5]-t[7]]):2===p?(h=new z(t),u=new z(e)):4===p?(c=t,f=e,d=i,l=n):8===p&&(c=[t,e],l=[a,o],f=[i-t,n-e],d=[r-a,s-o]):(h=new z,u=new z),this._segment1=h||new z(c,null,f),this._segment2=u||new z(l,d,null)},_serialize:function(t,e){return c.serialize(this.hasHandles()?[this.getPoint1(),this.getHandle1(),this.getHandle2(),this.getPoint2()]:[this.getPoint1(),this.getPoint2()],t,!0,e)},_changed:function(){this._length=this._bounds=o},clone:function(){return new R(this._segment1,this._segment2)},toString:function(){var t=["point1: "+this._segment1._point];return this._segment1._handleOut.isZero()||t.push("handle1: "+this._segment1._handleOut),this._segment2._handleIn.isZero()||t.push("handle2: "+this._segment2._handleIn),t.push("point2: "+this._segment2._point),"{ "+t.join(", ")+" }"},classify:function(){return R.classify(this.getValues())},remove:function(){var t=!1;if(this._path){var e=this._segment2,i=e._handleOut;(t=e.remove())&&this._segment1._handleOut.set(i)}return t},getPoint1:function(){return this._segment1._point},setPoint1:function(){this._segment1._point.set(m.read(arguments))},getPoint2:function(){return this._segment2._point},setPoint2:function(){this._segment2._point.set(m.read(arguments))},getHandle1:function(){return this._segment1._handleOut},setHandle1:function(){this._segment1._handleOut.set(m.read(arguments))},getHandle2:function(){return this._segment2._handleIn},setHandle2:function(){this._segment2._handleIn.set(m.read(arguments))},getSegment1:function(){return this._segment1},getSegment2:function(){return this._segment2},getPath:function(){return this._path},getIndex:function(){return this._segment1._index},getNext:function(){var t=this._path&&this._path._curves;return t&&(t[this._segment1._index+1]||this._path._closed&&t[0])||null},getPrevious:function(){var t=this._path&&this._path._curves;return t&&(t[this._segment1._index-1]||this._path._closed&&t[t.length-1])||null},isFirst:function(){return!this._segment1._index},isLast:function(){var t=this._path;return t&&this._segment1._index===t._curves.length-1||!1},isSelected:function(){return this.getPoint1().isSelected()&&this.getHandle1().isSelected()&&this.getHandle2().isSelected()&&this.getPoint2().isSelected()},setSelected:function(t){this.getPoint1().setSelected(t),this.getHandle1().setSelected(t),this.getHandle2().setSelected(t),this.getPoint2().setSelected(t)},getValues:function(t){return R.getValues(this._segment1,this._segment2,t)},getPoints:function(){for(var t=this.getValues(),e=[],i=0;i<8;i+=2)e.push(new m(t[i],t[i+1]));return e}},{getLength:function(){return null==this._length&&(this._length=R.getLength(this.getValues(),0,1)),this._length},getArea:function(){return R.getArea(this.getValues())},getLine:function(){return new k(this._segment1._point,this._segment2._point)},getPart:function(t,e){return new R(R.getPart(this.getValues(),t,e))},getPartLength:function(t,e){return R.getLength(this.getValues(),t,e)},divideAt:function(t){return this.divideAtTime(t&&t.curve===this?t.time:this.getTimeAt(t))},divideAtTime:function(t,e){var i=null;if(t>=1e-8&&t<=.99999999){var n=R.subdivide(this.getValues(),t),r=n[0],s=n[1],a=e||this.hasHandles(),o=this._segment1,h=this._segment2,u=this._path;a&&(o._handleOut._set(r[2]-r[0],r[3]-r[1]),h._handleIn._set(s[4]-s[6],s[5]-s[7]));var c=r[6],l=r[7],f=new z(new m(c,l),a&&new m(r[4]-c,r[5]-l),a&&new m(s[2]-c,s[3]-l));u?(u.insert(o._index+1,f),i=this.getNext()):(this._segment2=f,this._changed(),i=new R(f,h))}return i},splitAt:function(t){var e=this._path;return e?e.splitAt(t):null},splitAtTime:function(t){return this.splitAt(this.getLocationAtTime(t))},divide:function(t,e){return this.divideAtTime(t===o?.5:e?t:this.getTimeAt(t))},split:function(t,e){return this.splitAtTime(t===o?.5:e?t:this.getTimeAt(t))},reversed:function(){return new R(this._segment2.reversed(),this._segment1.reversed())},clearHandles:function(){this._segment1._handleOut._set(0,0),this._segment2._handleIn._set(0,0)},statics:{getValues:function(t,e,i,n){var r=t._point,s=t._handleOut,a=e._handleIn,o=e._point,h=r.x,u=r.y,c=o.x,l=o.y,f=n?[h,u,h,u,c,l,c,l]:[h,u,h+s._x,u+s._y,c+a._x,l+a._y,c,l];return i&&i._transformCoordinates(f,f,4),f},subdivide:function(t,e){var i=t[0],n=t[1],r=t[2],s=t[3],a=t[4],h=t[5],u=t[6],c=t[7];e===o&&(e=.5);var l=1-e,f=l*i+e*r,d=l*n+e*s,p=l*r+e*a,g=l*s+e*h,_=l*a+e*u,v=l*h+e*c,m=l*f+e*p,y=l*d+e*g,x=l*p+e*_,w=l*g+e*v,b=l*m+e*x,C=l*y+e*w;return[[i,n,f,d,m,y,b,C],[b,C,x,w,_,v,u,c]]},getMonoCurves:function(t,e){var i=[],n=e?0:1,r=t[n+0],s=t[n+2],a=t[n+4],o=t[n+6];if(r>=s==s>=a&&s>=a==a>=o||R.isStraight(t))i.push(t);else{var h=3*(s-a)-r+o,u=2*(r+a)-4*s,c=s-r,l=[],f=_.solveQuadratic(h,u,c,l,1e-8,.99999999);if(f){l.sort();var d=l[0],p=R.subdivide(t,d);i.push(p[0]),f>1&&(d=(l[1]-d)/(1-d),p=R.subdivide(p[1],d),i.push(p[0])),i.push(p[1])}else i.push(t)}return i},solveCubic:function(t,e,i,n,r,s){var a=t[e],o=t[e+2],h=t[e+4],u=t[e+6],c=0;if(!(a<i&&u<i&&o<i&&h<i||a>i&&u>i&&o>i&&h>i)){var l=3*(o-a),f=3*(h-o)-l,d=u-a-l-f;c=_.solveCubic(d,f,l,a-i,n,r,s)}return c},getTimeOf:function(t,e){var i=new m(t[0],t[1]),n=new m(t[6],t[7]),r=1e-7;if(null===(e.isClose(i,1e-12)?0:e.isClose(n,1e-12)?1:null))for(var s=[e.x,e.y],a=[],o=0;o<2;o++)for(var h=R.solveCubic(t,o,s[o],a,0,1),u=0;u<h;u++){var c=a[u];if(e.isClose(R.getPoint(t,c),r))return c}return e.isClose(i,r)?0:e.isClose(n,r)?1:null},getNearestTime:function(t,e){if(R.isStraight(t)){var i=t[0],n=t[1],r=t[6]-i,s=t[7]-n,a=r*r+s*s;if(0===a)return 0;var o=((e.x-i)*r+(e.y-n)*s)/a;return o<1e-12?0:o>.999999999999?1:R.getTimeOf(t,new m(i+o*r,n+o*s))}var h=1/0,u=0;function c(i){if(i>=0&&i<=1){var n=e.getDistance(R.getPoint(t,i),!0);if(n<h)return h=n,u=i,!0}}for(var l=0;l<=100;l++)c(l/100);for(var f=.005;f>1e-8;)c(u-f)||c(u+f)||(f/=2);return u},getPart:function(t,e,i){var n=e>i;if(n){var r=e;e=i,i=r}return e>0&&(t=R.subdivide(t,e)[1]),i<1&&(t=R.subdivide(t,(i-e)/(1-e))[0]),n?[t[6],t[7],t[4],t[5],t[2],t[3],t[0],t[1]]:t},isFlatEnough:function(t,e){var i=t[0],n=t[1],r=t[2],s=t[3],a=t[4],o=t[5],h=t[6],u=t[7],c=3*r-2*i-h,l=3*s-2*n-u,f=3*a-2*h-i,d=3*o-2*u-n;return Math.max(c*c,f*f)+Math.max(l*l,d*d)<=16*e*e},getArea:function(t){var e=t[0],i=t[1],n=t[2],r=t[3],s=t[4],a=t[5],o=t[6],h=t[7];return 3*((h-i)*(n+s)-(o-e)*(r+a)+r*(e-s)-n*(i-a)+h*(s+e/3)-o*(a+i/3))/20},getBounds:function(t){for(var e=t.slice(0,2),i=e.slice(),n=[0,0],r=0;r<2;r++)R._addBounds(t[r],t[r+2],t[r+4],t[r+6],r,0,e,i,n);return new b(e[0],e[1],i[0]-e[0],i[1]-e[1])},_addBounds:function(t,e,i,n,r,s,a,o,h){function u(t,e){var i=t-e,n=t+e;i<a[r]&&(a[r]=i),n>o[r]&&(o[r]=n)}s/=2;var c=a[r]+s,l=o[r]-s;if(t<c||e<c||i<c||n<c||t>l||e>l||i>l||n>l)if(e<t!=e<n&&i<t!=i<n)u(t,0),u(n,0);else{var f=3*(e-i)-t+n,d=2*(t+i)-4*e,p=e-t,g=_.solveQuadratic(f,d,p,h);u(n,0);for(var v=0;v<g;v++){var m=h[v],y=1-m;1e-8<=m&&m<=.99999999&&u(y*y*y*t+3*y*y*m*e+3*y*m*m*i+m*m*m*n,s)}}}}},c.each(["getBounds","getStrokeBounds","getHandleBounds"],(function(t){this[t]=function(){this._bounds||(this._bounds={});var e=this._bounds[t];return e||(e=this._bounds[t]=F[t]([this._segment1,this._segment2],!1,this._path)),e.clone()}}),{}),c.each({isStraight:function(t,e,i,n){if(e.isZero()&&i.isZero())return!0;var r=n.subtract(t);if(r.isZero())return!1;if(r.isCollinear(e)&&r.isCollinear(i)){var s=new k(t,n);if(s.getDistance(t.add(e))<1e-7&&s.getDistance(n.add(i))<1e-7){var a=r.dot(r),o=r.dot(e)/a,h=r.dot(i)/a;return o>=0&&o<=1&&h<=0&&h>=-1}}return!1},isLinear:function(t,e,i,n){var r=n.subtract(t).divide(3);return e.equals(r)&&i.negate().equals(r)}},(function(t,e){this[e]=function(e){var i=this._segment1,n=this._segment2;return t(i._point,i._handleOut,n._handleIn,n._point,e)},this.statics[e]=function(e,i){var n=e[0],r=e[1],s=e[6],a=e[7];return t(new m(n,r),new m(e[2]-n,e[3]-r),new m(e[4]-s,e[5]-a),new m(s,a),i)}}),{statics:{},hasHandles:function(){return!this._segment1._handleOut.isZero()||!this._segment2._handleIn.isZero()},hasLength:function(t){return(!this.getPoint1().equals(this.getPoint2())||this.hasHandles())&&this.getLength()>(t||0)},isCollinear:function(t){return t&&this.isStraight()&&t.isStraight()&&this.getLine().isCollinear(t.getLine())},isHorizontal:function(){return this.isStraight()&&Math.abs(this.getTangentAtTime(.5).y)<1e-8},isVertical:function(){return this.isStraight()&&Math.abs(this.getTangentAtTime(.5).x)<1e-8}}),{beans:!1,getLocationAt:function(t,e){return this.getLocationAtTime(e?t:this.getTimeAt(t))},getLocationAtTime:function(t){return null!=t&&t>=0&&t<=1?new B(this,t):null},getTimeAt:function(t,e){return R.getTimeAt(this.getValues(),t,e)},getParameterAt:"#getTimeAt",getTimesWithTangent:function(){var t=m.read(arguments);return t.isZero()?[]:R.getTimesWithTangent(this.getValues(),t)},getOffsetAtTime:function(t){return this.getPartLength(0,t)},getLocationOf:function(){return this.getLocationAtTime(this.getTimeOf(m.read(arguments)))},getOffsetOf:function(){var t=this.getLocationOf.apply(this,arguments);return t?t.getOffset():null},getTimeOf:function(){return R.getTimeOf(this.getValues(),m.read(arguments))},getParameterOf:"#getTimeOf",getNearestLocation:function(){var t=m.read(arguments),e=this.getValues(),i=R.getNearestTime(e,t),n=R.getPoint(e,i);return new B(this,i,n,null,t.getDistance(n))},getNearestPoint:function(){var t=this.getNearestLocation.apply(this,arguments);return t?t.getPoint():t}},new function(){var t=["getPoint","getTangent","getNormal","getWeightedTangent","getWeightedNormal","getCurvature"];return c.each(t,(function(t){this[t+"At"]=function(e,i){var n=this.getValues();return R[t](n,i?e:R.getTimeAt(n,e))},this[t+"AtTime"]=function(e){return R[t](this.getValues(),e)}}),{statics:{_evaluateMethods:t}})},new function(){function t(t){var e=t[0],i=t[1],n=t[2],r=t[3],s=t[4],a=t[5],o=t[6],h=t[7],u=9*(n-s)+3*(o-e),c=6*(e+s)-12*n,l=3*(n-e),f=9*(r-a)+3*(h-i),d=6*(i+a)-12*r,p=3*(r-i);return function(t){var e=(u*t+c)*t+l,i=(f*t+d)*t+p;return Math.sqrt(e*e+i*i)}}function e(t,e){return Math.max(2,Math.min(16,Math.ceil(32*Math.abs(e-t))))}function i(t,e,i,n){if(null==e||e<0||e>1)return null;var r=t[0],s=t[1],a=t[2],o=t[3],h=t[4],u=t[5],c=t[6],l=t[7],f=_.isZero;f(a-r)&&f(o-s)&&(a=r,o=s),f(h-c)&&f(u-l)&&(h=c,u=l);var d,p,g=3*(a-r),v=3*(h-a)-g,y=c-r-g-v,x=3*(o-s),w=3*(u-o)-x,b=l-s-x-w;if(0===i)d=0===e?r:1===e?c:((y*e+v)*e+g)*e+r,p=0===e?s:1===e?l:((b*e+w)*e+x)*e+s;else{var C=1e-8,S=1-C;if(e<C?(d=g,p=x):e>S?(d=3*(c-h),p=3*(l-u)):(d=(3*y*e+2*v)*e+g,p=(3*b*e+2*w)*e+x),n){0===d&&0===p&&(e<C||e>S)&&(d=h-a,p=u-o);var k=Math.sqrt(d*d+p*p);k&&(d/=k,p/=k)}if(3===i){h=6*y*e+2*v,u=6*b*e+2*w;var A=Math.pow(d*d+p*p,1.5);d=0!==A?(d*u-p*h)/A:0,p=0}}return 2===i?new m(p,-d):new m(d,p)}return{statics:{classify:function(t){var e=t[0],i=t[1],n=t[2],r=t[3],s=t[4],a=t[5],h=t[6],u=t[7],c=n*(i-u)+r*(h-e)+e*u-i*h,l=3*(s*(r-i)+a*(e-n)+n*i-r*e),f=l-c,d=f-c+(e*(u-a)+i*(s-h)+h*a-u*s),p=Math.sqrt(d*d+f*f+l*l),g=0!==p?1/p:0,v=_.isZero,m="serpentine";function y(t,e,i){var n=e!==o,r=n&&e>0&&e<1,s=n&&i>0&&i<1;return!n||(r||s)&&("loop"!==t||r&&s)||(t="arch",r=s=!1),{type:t,roots:r||s?r&&s?e<i?[e,i]:[i,e]:[r?e:i]:null}}if(f*=g,l*=g,v(d*=g))return v(f)?y(v(l)?"line":"quadratic"):y(m,l/(3*f));var x=3*f*f-4*d*l;if(v(x))return y("cusp",f/(2*d));var w=x>0?Math.sqrt(x/3):Math.sqrt(-x),b=2*d;return y(x>0?m:"loop",(f+w)/b,(f-w)/b)},getLength:function(i,n,r,s){if(n===o&&(n=0),r===o&&(r=1),R.isStraight(i)){var a=i;r<1&&(a=R.subdivide(a,r)[0],n/=r),n>0&&(a=R.subdivide(a,n)[1]);var h=a[6]-a[0],u=a[7]-a[1];return Math.sqrt(h*h+u*u)}return _.integrate(s||t(i),n,r,e(n,r))},getTimeAt:function(i,n,r){if(r===o&&(r=n<0?1:0),0===n)return r;var s=Math.abs,a=n>0,h=a?r:0,u=a?1:r,c=t(i),l=R.getLength(i,h,u,c),f=s(n)-l;if(s(f)<1e-12)return a?u:h;if(f>1e-12)return null;var d=n/l,p=0;return _.findRoot((function(t){return p+=_.integrate(c,r,t,e(r,t)),r=t,p-n}),c,r+d,h,u,32,1e-12)},getPoint:function(t,e){return i(t,e,0,!1)},getTangent:function(t,e){return i(t,e,1,!0)},getWeightedTangent:function(t,e){return i(t,e,1,!1)},getNormal:function(t,e){return i(t,e,2,!0)},getWeightedNormal:function(t,e){return i(t,e,2,!1)},getCurvature:function(t,e){return i(t,e,3,!1).x},getPeaks:function(t){var e=t[0],i=t[1],n=t[2],r=t[3],s=t[4],a=t[5],o=3*n-e-3*s+t[6],h=3*e-6*n+3*s,u=-3*e+3*n,c=3*r-i-3*a+t[7],l=3*i-6*r+3*a,f=-3*i+3*r,d=[];return _.solveCubic(9*(o*o+c*c),9*(o*h+l*c),2*(h*h+l*l)+3*(u*o+f*c),u*h+l*f,d,1e-8,.99999999),d.sort()}}}},new function(){function t(t,e,i,n,r,s,a){var o=!a&&i.getPrevious()===r,h=!a&&i!==r&&i.getNext()===r,u=1e-8,c=1-u;if(null!==n&&n>=(o?u:0)&&n<=(h?c:1)&&null!==s&&s>=(h?u:0)&&s<=(o?c:1)){var l=new B(i,n,null,a),f=new B(r,s,null,a);l._intersection=f,f._intersection=l,e&&!e(l)||B.insert(t,l,!0)}}function e(n,r,s,a,o,h,u,c,l,f,d,p,g){if(++l>=4096||++c>=40)return l;var _,v,m=r[0],y=r[1],x=r[6],w=r[7],b=k.getSignedDistance,C=b(m,y,x,w,r[2],r[3]),S=b(m,y,x,w,r[4],r[5]),A=C*S>0?3/4:4/9,I=A*Math.min(0,C,S),P=A*Math.max(0,C,S),E=b(m,y,x,w,n[0],n[1]),T=b(m,y,x,w,n[2],n[3]),M=b(m,y,x,w,n[4],n[5]),L=b(m,y,x,w,n[6],n[7]),N=function(t,e,i,n){var r,s=[0,t],a=[1/3,e],o=[2/3,i],h=[1,n],u=e-(2*t+n)/3,c=i-(t+2*n)/3;if(u*c<0)r=[[s,a,h],[s,o,h]];else{var l=u/c;r=[l>=2?[s,a,h]:l<=.5?[s,o,h]:[s,a,o,h],[s,h]]}return(u||c)<0?r.reverse():r}(E,T,M,L),O=N[0],z=N[1];if(0===C&&0===S&&0===E&&0===T&&0===M&&0===L||null==(_=i(O,z,I,P))||null==(v=i(O.reverse(),z.reverse(),I,P)))return l;var V=f+(d-f)*_,B=f+(d-f)*v;if(Math.max(g-p,B-V)<1e-9){var D=(V+B)/2,F=(p+g)/2;t(o,h,u?a:s,u?F:D,u?s:a,u?D:F)}else{n=R.getPart(n,_,v);var j=g-p;if(v-_>.8)if(B-V>j)D=(V+B)/2,l=e(r,(q=R.subdivide(n,.5))[0],a,s,o,h,!u,c,l,p,g,V,D),l=e(r,q[1],a,s,o,h,!u,c,l,p,g,D,B);else{var q;F=(p+g)/2,l=e((q=R.subdivide(r,.5))[0],n,a,s,o,h,!u,c,l,p,F,V,B),l=e(q[1],n,a,s,o,h,!u,c,l,F,g,V,B)}else l=0===j||j>=1e-9?e(r,n,a,s,o,h,!u,c,l,p,g,V,B):e(n,r,s,a,o,h,u,c,l,V,B,p,g)}return l}function i(t,e,i,r){return t[0][1]<i?n(t,!0,i):e[0][1]>r?n(e,!1,r):t[0][0]}function n(t,e,i){for(var n=t[0][0],r=t[0][1],s=1,a=t.length;s<a;s++){var o=t[s][0],h=t[s][1];if(e?h>=i:h<=i)return h===i?o:n+(i-r)*(o-n)/(h-r);n=o,r=h}return null}function r(t,e,i,n,r){var s=_.isZero;if(s(n)&&s(r)){var a=R.getTimeOf(t,new m(e,i));return null===a?[]:[a]}for(var o=Math.atan2(-r,n),h=Math.sin(o),u=Math.cos(o),c=[],l=[],f=0;f<8;f+=2){var d=t[f]-e,p=t[f+1]-i;c.push(d*u-p*h,d*h+p*u)}return R.solveCubic(c,1,0,l,0,1),l}function s(e,i,n,s,a,o,h){for(var u=i[0],c=i[1],l=r(e,u,c,i[6]-u,i[7]-c),f=0,d=l.length;f<d;f++){var p=l[f],g=R.getPoint(e,p),_=R.getTimeOf(i,g);null!==_&&t(a,o,h?s:n,h?_:p,h?n:s,h?p:_)}}function a(e,i,n,r,s,a){var o=k.intersect(e[0],e[1],e[6],e[7],i[0],i[1],i[6],i[7]);o&&t(s,a,n,R.getTimeOf(e,o),r,R.getTimeOf(i,o))}function o(i,n,r,o,h,c){var l=1e-12,f=Math.min,d=Math.max;if(d(i[0],i[2],i[4],i[6])+l>f(n[0],n[2],n[4],n[6])&&f(i[0],i[2],i[4],i[6])-l<d(n[0],n[2],n[4],n[6])&&d(i[1],i[3],i[5],i[7])+l>f(n[1],n[3],n[5],n[7])&&f(i[1],i[3],i[5],i[7])-l<d(n[1],n[3],n[5],n[7])){var p=u(i,n);if(p)for(var g=0;g<2;g++){var _=p[g];t(h,c,r,_[0],o,_[1],!0)}else{var v=R.isStraight(i),y=R.isStraight(n),x=v&&y,w=v&&!y,b=h.length;if((x?a:v||y?s:e)(w?n:i,w?i:n,w?o:r,w?r:o,h,c,w,0,0,0,1,0,1),!x||h.length===b)for(g=0;g<4;g++){var C=g>>1,S=1&g,k=6*C,A=6*S,I=new m(i[k],i[k+1]),P=new m(n[A],n[A+1]);I.isClose(P,l)&&t(h,c,r,C,o,S)}}}return h}function h(e,i,n,r){var s=R.classify(e);if("loop"===s.type){var a=s.roots;t(n,r,i,a[0],i,a[1])}return n}function u(t,e){function i(t){var e=t[6]-t[0],i=t[7]-t[1];return e*e+i*i}var n=Math.abs,r=k.getDistance,s=1e-7,a=R.isStraight(t),o=R.isStraight(e),h=a&&o,u=i(t)<i(e),c=u?e:t,l=u?t:e,f=c[0],d=c[1],p=c[6]-f,g=c[7]-d;if(r(f,d,p,g,l[0],l[1],!0)<s&&r(f,d,p,g,l[6],l[7],!0)<s)!h&&r(f,d,p,g,c[2],c[3],!0)<s&&r(f,d,p,g,c[4],c[5],!0)<s&&r(f,d,p,g,l[2],l[3],!0)<s&&r(f,d,p,g,l[4],l[5],!0)<s&&(a=o=h=!0);else if(h)return null;if(a^o)return null;for(var _=[t,e],v=[],y=0;y<4&&v.length<2;y++){var x=1&y,w=1^x,b=y>>1,C=R.getTimeOf(_[x],new m(_[w][b?6:0],_[w][b?7:1]));if(null!=C){var S=x?[b,C]:[C,b];(!v.length||n(S[0]-v[0][0])>1e-8&&n(S[1]-v[0][1])>1e-8)&&v.push(S)}if(y>2&&!v.length)break}if(2!==v.length)v=null;else if(!h){var A=R.getPart(t,v[0][0],v[1][0]),I=R.getPart(e,v[0][1],v[1][1]);(n(I[2]-A[2])>s||n(I[3]-A[3])>s||n(I[4]-A[4])>s||n(I[5]-A[5])>s)&&(v=null)}return v}return{getIntersections:function(t){var e=this.getValues(),i=t&&t!==this&&t.getValues();return i?o(e,i,this,t,[]):h(e,this,[])},statics:{getOverlaps:u,getIntersections:function(t,e,i,n,r,s){var a=!e;a&&(e=t);for(var u=t.length,c=e.length,l=new Array(u),f=a?l:new Array(c),d=[],g=0;g<u;g++)l[g]=t[g].getValues(n);if(!a)for(g=0;g<c;g++)f[g]=e[g].getValues(r);for(var _=p.findCurveBoundsCollisions(l,f,1e-7),v=0;v<u;v++){var m=t[v],y=l[v];a&&h(y,m,d,i);var x=_[v];if(x)for(var w=0;w<x.length;w++){if(s&&d.length)return d;var b=x[w];if(!a||b>v){var C=e[b];o(y,f[b],m,C,d,i)}}}return d},getCurveLineIntersections:r,getTimesWithTangent:function(t,e){var i=t[0],n=t[1],r=t[2],s=t[3],a=t[4],o=t[5],h=t[6],u=t[7],c=e.normalize(),l=c.x,f=c.y,d=3*h-9*a+9*r-3*i,p=3*u-9*o+9*s-3*n,g=6*a-12*r+6*i,v=6*o-12*s+6*n,m=3*r-3*i,y=3*s-3*n,x=2*d*f-2*p*l,w=[];if(Math.abs(x)<_.CURVETIME_EPSILON){if(0!=(x=d*v-p*g)){var b=-(d*y-p*m)/x;b>=0&&b<=1&&w.push(b)}}else{var C=(g*g-4*d*m)*f*f+(-2*g*v+4*p*m+4*d*y)*l*f+(v*v-4*p*y)*l*l,S=g*f-v*l;if(C>=0&&0!=x){var k=Math.sqrt(C),A=-(S+k)/x,I=(-S+k)/x;A>=0&&A<=1&&w.push(A),I>=0&&I<=1&&w.push(I)}}return w}}}}),B=c.extend({_class:"CurveLocation",initialize:function(t,e,i,n,r){if(e>=.99999999){var s=t.getNext();s&&(e=0,t=s)}this._setCurve(t),this._time=e,this._point=i||t.getPointAtTime(e),this._overlap=n,this._distance=r,this._intersection=this._next=this._previous=null},_setPath:function(t){this._path=t,this._version=t?t._version:0},_setCurve:function(t){this._setPath(t._path),this._curve=t,this._segment=null,this._segment1=t._segment1,this._segment2=t._segment2},_setSegment:function(t){var e=t.getCurve();e?this._setCurve(e):(this._setPath(t._path),this._segment1=t,this._segment2=null),this._segment=t,this._time=t===this._segment1?0:1,this._point=t._point.clone()},getSegment:function(){var t=this._segment;if(!t){var e=this.getCurve(),i=this.getTime();0===i?t=e._segment1:1===i?t=e._segment2:null!=i&&(t=e.getPartLength(0,i)<e.getPartLength(i,1)?e._segment1:e._segment2),this._segment=t}return t},getCurve:function(){var t=this._path,e=this;function i(t){var i=t&&t.getCurve();if(i&&null!=(e._time=i.getTimeOf(e._point)))return e._setCurve(i),i}return t&&t._version!==this._version&&(this._time=this._offset=this._curveOffset=this._curve=null),this._curve||i(this._segment)||i(this._segment1)||i(this._segment2.getPrevious())},getPath:function(){var t=this.getCurve();return t&&t._path},getIndex:function(){var t=this.getCurve();return t&&t.getIndex()},getTime:function(){var t=this.getCurve(),e=this._time;return t&&null==e?this._time=t.getTimeOf(this._point):e},getParameter:"#getTime",getPoint:function(){return this._point},getOffset:function(){var t=this._offset;if(null==t){t=0;var e=this.getPath(),i=this.getIndex();if(e&&null!=i)for(var n=e.getCurves(),r=0;r<i;r++)t+=n[r].getLength();this._offset=t+=this.getCurveOffset()}return t},getCurveOffset:function(){var t=this._curveOffset;if(null==t){var e=this.getCurve(),i=this.getTime();this._curveOffset=t=null!=i&&e&&e.getPartLength(0,i)}return t},getIntersection:function(){return this._intersection},getDistance:function(){return this._distance},divide:function(){var t=this.getCurve(),e=t&&t.divideAtTime(this.getTime());return e&&this._setSegment(e._segment1),e},split:function(){var t=this.getCurve(),e=t._path,i=t&&t.splitAtTime(this.getTime());return i&&this._setSegment(e.getLastSegment()),i},equals:function(t,e){var i=this===t;if(!i&&t instanceof B){var n=this.getCurve(),r=t.getCurve(),s=n._path;if(s===r._path){var a=Math.abs,o=a(this.getOffset()-t.getOffset()),h=!e&&this._intersection,u=!e&&t._intersection;i=(o<1e-7||s&&a(s.getLength()-o)<1e-7)&&(!h&&!u||h&&u&&h.equals(u,!0))}}return i},toString:function(){var t=[],e=this.getPoint(),i=g.instance;e&&t.push("point: "+e);var n=this.getIndex();null!=n&&t.push("index: "+n);var r=this.getTime();return null!=r&&t.push("time: "+i.number(r)),null!=this._distance&&t.push("distance: "+i.number(this._distance)),"{ "+t.join(", ")+" }"},isTouching:function(){var t=this._intersection;if(t&&this.getTangent().isCollinear(t.getTangent())){var e=this.getCurve(),i=t.getCurve();return!(e.isStraight()&&i.isStraight()&&e.getLine().intersect(i.getLine()))}return!1},isCrossing:function(){var t=this._intersection;if(!t)return!1;var e=this.getTime(),i=t.getTime(),n=1e-8,r=1-n,s=e>=n&&e<=r,a=i>=n&&i<=r;if(s&&a)return!this.isTouching();var o=this.getCurve(),h=o&&e<n?o.getPrevious():o,u=t.getCurve(),c=u&&i<n?u.getPrevious():u;if(e>r&&(o=o.getNext()),i>r&&(u=u.getNext()),!(h&&o&&c&&u))return!1;var l=[];function f(t,e){var i=t.getValues(),n=R.classify(i).roots||R.getPeaks(i),r=n.length,s=R.getLength(i,e&&r?n[r-1]:0,!e&&r?n[0]:1);l.push(r?s:s/32)}function d(t,e,i){return e<i?t>e&&t<i:t>e||t<i}s||(f(h,!0),f(o,!1)),a||(f(c,!0),f(u,!1));var p=this.getPoint(),g=Math.min.apply(Math,l),_=s?o.getTangentAtTime(e):o.getPointAt(g).subtract(p),v=s?_.negate():h.getPointAt(-g).subtract(p),m=a?u.getTangentAtTime(i):u.getPointAt(g).subtract(p),y=a?m.negate():c.getPointAt(-g).subtract(p),x=v.getAngle(),w=_.getAngle(),b=y.getAngle(),C=m.getAngle();return!!(s?d(x,b,C)^d(w,b,C)&&d(x,C,b)^d(w,C,b):d(b,x,w)^d(C,x,w)&&d(b,w,x)^d(C,w,x))},hasOverlap:function(){return!!this._overlap}},c.each(R._evaluateMethods,(function(t){var e=t+"At";this[t]=function(){var t=this.getCurve(),i=this.getTime();return null!=i&&t&&t[e](i,!0)}}),{preserve:!0}),new function(){function t(t,e,i){var n=t.length,r=0,s=n-1;function a(i,r){for(var s=i+r;s>=-1&&s<=n;s+=r){var a=t[(s%n+n)%n];if(!e.getPoint().isClose(a.getPoint(),1e-7))break;if(e.equals(a))return a}return null}for(;r<=s;){var o,h=r+s>>>1,u=t[h];if(i&&(o=e.equals(u)?u:a(h,-1)||a(h,1)))return e._overlap&&(o._overlap=o._intersection._overlap=!0),o;var c=e.getPath(),l=u.getPath();(c!==l?c._id-l._id:e.getIndex()+e.getTime()-(u.getIndex()+u.getTime()))<0?s=h-1:r=h+1}return t.splice(r,0,e),e}return{statics:{insert:t,expand:function(e){for(var i=e.slice(),n=e.length-1;n>=0;n--)t(i,e[n]._intersection,!1);return i}}}}),D=I.extend({_class:"PathItem",_selectBounds:!1,_canScaleStroke:!0,beans:!0,initialize:function(){},statics:{create:function(t){var e,i,n;if(c.isPlainObject(t)?(i=t.segments,e=t.pathData):Array.isArray(t)?i=t:"string"==typeof t&&(e=t),i){var r=i[0];n=r&&Array.isArray(r[0])}else e&&(n=(e.match(/m/gi)||[]).length>1||/z\s*\S+/i.test(e));return new(n?j:F)(t)}},_asPathItem:function(){return this},isClockwise:function(){return this.getArea()>=0},setClockwise:function(t){this.isClockwise()!=(t=!!t)&&this.reverse()},setPathData:function(t){var e,i,n,r=t&&t.match(/[mlhvcsqtaz][^mlhvcsqtaz]*/gi),s=!1,a=new m,o=new m;function h(t,i){var n=+e[t];return s&&(n+=a[i]),n}function u(t){return new m(h(t,"x"),h(t+1,"y"))}this.clear();for(var c=0,l=r&&r.length;c<l;c++){var f=r[c],d=f[0],p=d.toLowerCase(),g=(e=f.match(/[+-]?(?:\d*\.\d+|\d+\.?)(?:[eE][+-]?\d+)?/g))&&e.length;switch(s=d===p,"z"!==i||/[mz]/.test(p)||this.moveTo(a),p){case"m":case"l":for(var _="m"===p,v=0;v<g;v+=2)this[_?"moveTo":"lineTo"](a=u(v)),_&&(o=a,_=!1);n=a;break;case"h":case"v":var y="h"===p?"x":"y";for(a=a.clone(),v=0;v<g;v++)a[y]=h(v,y),this.lineTo(a);n=a;break;case"c":for(v=0;v<g;v+=6)this.cubicCurveTo(u(v),n=u(v+2),a=u(v+4));break;case"s":for(v=0;v<g;v+=4)this.cubicCurveTo(/[cs]/.test(i)?a.multiply(2).subtract(n):a,n=u(v),a=u(v+2)),i=p;break;case"q":for(v=0;v<g;v+=4)this.quadraticCurveTo(n=u(v),a=u(v+2));break;case"t":for(v=0;v<g;v+=2)this.quadraticCurveTo(n=/[qt]/.test(i)?a.multiply(2).subtract(n):a,a=u(v)),i=p;break;case"a":for(v=0;v<g;v+=7)this.arcTo(a=u(v+5),new x(+e[v],+e[v+1]),+e[v+2],+e[v+4],+e[v+3]);break;case"z":this.closePath(1e-12),a=o}i=p}},_canComposite:function(){return!(this.hasFill()&&this.hasStroke())},_contains:function(t){var e=t.isInside(this.getBounds({internal:!0,handle:!0}))?this._getWinding(t):{};return e.onPath||!!("evenodd"===this.getFillRule()?1&e.windingL||1&e.windingR:e.winding)},getIntersections:function(t,e,i,n){var r=this===t||!t,s=this._matrix._orNullIfIdentity(),a=r?s:(i||t._matrix)._orNullIfIdentity();return r||this.getBounds(s).intersects(t.getBounds(a),1e-12)?R.getIntersections(this.getCurves(),!r&&t.getCurves(),e,s,a,n):[]},getCrossings:function(t){return this.getIntersections(t,(function(t){return t.isCrossing()}))},getNearestLocation:function(){for(var t=m.read(arguments),e=this.getCurves(),i=1/0,n=null,r=0,s=e.length;r<s;r++){var a=e[r].getNearestLocation(t);a._distance<i&&(i=a._distance,n=a)}return n},getNearestPoint:function(){var t=this.getNearestLocation.apply(this,arguments);return t?t.getPoint():t},interpolate:function(t,e,i){var n=!this._children,r=n?"_segments":"_children",s=t[r],a=e[r],o=this[r];if(!s||!a||s.length!==a.length)throw new Error("Invalid operands in interpolate() call: "+t+", "+e);var h=o.length,u=a.length;if(h<u)for(var c=n?z:F,l=h;l<u;l++)this.add(new c);else h>u&&this[n?"removeSegments":"removeChildren"](u,h);for(l=0;l<u;l++)o[l].interpolate(s[l],a[l],i);n&&(this.setClosed(t._closed),this._changed(9))},compare:function(t){var e=!1;if(t){var i=this._children||[this],n=t._children?t._children.slice():[t],r=i.length,s=n.length,a=[],o=0;e=!0;for(var h=p.findItemBoundsCollisions(i,n,_.GEOMETRIC_EPSILON),u=r-1;u>=0&&e;u--){var c=i[u];e=!1;var l=h[u];if(l)for(var f=l.length-1;f>=0&&!e;f--)c.compare(n[l[f]])&&(a[l[f]]||(a[l[f]]=!0,o++),e=!0)}e=e&&o===s}return e}}),F=D.extend({_class:"Path",_serializeFields:{segments:[],closed:!1},initialize:function(t){this._closed=!1,this._segments=[],this._version=0;var e=arguments,i=Array.isArray(t)?"object"==typeof t[0]?t:e:!t||t.size!==o||t.x===o&&t.point===o?null:e;i&&i.length>0?this.setSegments(i):(this._curves=o,this._segmentSelection=0,i||"string"!=typeof t||(this.setPathData(t),t=null)),this._initialize(!i&&t)},_equals:function(t){return this._closed===t._closed&&c.equals(this._segments,t._segments)},copyContent:function(t){this.setSegments(t._segments),this._closed=t._closed},_changed:function t(e){if(t.base.call(this,e),8&e){if(this._length=this._area=o,32&e)this._version++;else if(this._curves)for(var i=0,n=this._curves.length;i<n;i++)this._curves[i]._changed()}else 64&e&&(this._bounds=o)},getStyle:function(){var t=this._parent;return(t instanceof j?t:this)._style},getSegments:function(){return this._segments},setSegments:function(t){var e=this.isFullySelected(),i=t&&t.length;if(this._segments.length=0,this._segmentSelection=0,this._curves=o,i){var n=t[i-1];"boolean"==typeof n&&(this.setClosed(n),i--),this._add(z.readList(t,0,{},i))}e&&this.setFullySelected(!0)},getFirstSegment:function(){return this._segments[0]},getLastSegment:function(){return this._segments[this._segments.length-1]},getCurves:function(){var t=this._curves,e=this._segments;if(!t){var i=this._countCurves();t=this._curves=new Array(i);for(var n=0;n<i;n++)t[n]=new R(this,e[n],e[n+1]||e[0])}return t},getFirstCurve:function(){return this.getCurves()[0]},getLastCurve:function(){var t=this.getCurves();return t[t.length-1]},isClosed:function(){return this._closed},setClosed:function(t){if(this._closed!=(t=!!t)){if(this._closed=t,this._curves){var e=this._curves.length=this._countCurves();t&&(this._curves[e-1]=new R(this,this._segments[e-1],this._segments[0]))}this._changed(41)}}},{beans:!0,getPathData:function(t,e){var i,n,r,s,a,o,h,u,c=this._segments,l=c.length,f=new g(e),d=new Array(6),p=!0,_=[];function v(e,c){if(e._transformCoordinates(t,d),i=d[0],n=d[1],p)_.push("M"+f.pair(i,n)),p=!1;else if(a=d[2],o=d[3],a===i&&o===n&&h===r&&u===s){if(!c){var l=i-r,g=n-s;_.push(0===l?"v"+f.number(g):0===g?"h"+f.number(l):"l"+f.pair(l,g))}}else _.push("c"+f.pair(h-r,u-s)+" "+f.pair(a-r,o-s)+" "+f.pair(i-r,n-s));r=i,s=n,h=d[4],u=d[5]}if(!l)return"";for(var m=0;m<l;m++)v(c[m]);return this._closed&&l>0&&(v(c[0],!0),_.push("z")),_.join("")},isEmpty:function(){return!this._segments.length},_transformContent:function(t){for(var e=this._segments,i=new Array(6),n=0,r=e.length;n<r;n++)e[n]._transformCoordinates(t,i,!0);return!0},_add:function(t,e){for(var i=this._segments,n=this._curves,r=t.length,s=null==e,a=(e=s?i.length:e,0);a<r;a++){var o=t[a];o._path&&(o=t[a]=o.clone()),o._path=this,o._index=e+a,o._selection&&this._updateSelection(o,0,o._selection)}if(s)c.push(i,t);else{i.splice.apply(i,[e,0].concat(t)),a=e+r;for(var h=i.length;a<h;a++)i[a]._index=a}if(n){var u=this._countCurves(),l=e>0&&e+r-1===u?e-1:e,f=l,d=Math.min(l+r,u);for(t._curves&&(n.splice.apply(n,[l,0].concat(t._curves)),f+=t._curves.length),a=f;a<d;a++)n.splice(a,0,new R(this,null,null));this._adjustCurves(l,d)}return this._changed(41),t},_adjustCurves:function(t,e){for(var i,n=this._segments,r=this._curves,s=t;s<e;s++)(i=r[s])._path=this,i._segment1=n[s],i._segment2=n[s+1]||n[0],i._changed();(i=r[this._closed&&!t?n.length-1:t-1])&&(i._segment2=n[t]||n[0],i._changed()),(i=r[e])&&(i._segment1=n[e],i._changed())},_countCurves:function(){var t=this._segments.length;return!this._closed&&t>0?t-1:t},add:function(t){var e=arguments;return e.length>1&&"number"!=typeof t?this._add(z.readList(e)):this._add([z.read(e)])[0]},insert:function(t,e){var i=arguments;return i.length>2&&"number"!=typeof e?this._add(z.readList(i,1),t):this._add([z.read(i,1)],t)[0]},addSegment:function(){return this._add([z.read(arguments)])[0]},insertSegment:function(t){return this._add([z.read(arguments,1)],t)[0]},addSegments:function(t){return this._add(z.readList(t))},insertSegments:function(t,e){return this._add(z.readList(e),t)},removeSegment:function(t){return this.removeSegments(t,t+1)[0]||null},removeSegments:function(t,e,i){t=t||0,e=c.pick(e,this._segments.length);var n=this._segments,r=this._curves,s=n.length,a=n.splice(t,e-t),o=a.length;if(!o)return a;for(var h=0;h<o;h++){var u=a[h];u._selection&&this._updateSelection(u,u._selection,0),u._index=u._path=null}h=t;for(var l=n.length;h<l;h++)n[h]._index=h;if(r){var f=t>0&&e===s+(this._closed?1:0)?t-1:t;for(h=(r=r.splice(f,o)).length-1;h>=0;h--)r[h]._path=null;i&&(a._curves=r.slice(1)),this._adjustCurves(f,f)}return this._changed(41),a},clear:"#removeSegments",hasHandles:function(){for(var t=this._segments,e=0,i=t.length;e<i;e++)if(t[e].hasHandles())return!0;return!1},clearHandles:function(){for(var t=this._segments,e=0,i=t.length;e<i;e++)t[e].clearHandles()},getLength:function(){if(null==this._length){for(var t=this.getCurves(),e=0,i=0,n=t.length;i<n;i++)e+=t[i].getLength();this._length=e}return this._length},getArea:function(){var t=this._area;if(null==t){var e=this._segments,i=this._closed;t=0;for(var n=0,r=e.length;n<r;n++){var s=n+1===r;t+=R.getArea(R.getValues(e[n],e[s?0:n+1],null,s&&!i))}this._area=t}return t},isFullySelected:function(){var t=this._segments.length;return this.isSelected()&&t>0&&this._segmentSelection===7*t},setFullySelected:function(t){t&&this._selectSegments(!0),this.setSelected(t)},setSelection:function t(e){1&e||this._selectSegments(!1),t.base.call(this,e)},_selectSegments:function(t){var e=this._segments,i=e.length,n=t?7:0;this._segmentSelection=n*i;for(var r=0;r<i;r++)e[r]._selection=n},_updateSelection:function(t,e,i){t._selection=i,(this._segmentSelection+=i-e)>0&&this.setSelected(!0)},divideAt:function(t){var e,i=this.getLocationAt(t);return i&&(e=i.getCurve().divideAt(i.getCurveOffset()))?e._segment1:null},splitAt:function(t){var e=this.getLocationAt(t),i=e&&e.index,n=e&&e.time;n>.99999999&&(i++,n=0);var r=this.getCurves();if(i>=0&&i<r.length){n>=1e-8&&r[i++].divideAtTime(n);var s,a=this.removeSegments(i,this._segments.length,!0);return this._closed?(this.setClosed(!1),s=this):((s=new F(I.NO_INSERT)).insertAbove(this),s.copyAttributes(this)),s._add(a,0),this.addSegment(a[0]),s}return null},split:function(t,e){var i,n=e===o?t:(i=this.getCurves()[t])&&i.getLocationAtTime(e);return null!=n?this.splitAt(n):null},join:function(t,e){var i=e||0;if(t&&t!==this){var n=t._segments,r=this.getLastSegment(),s=t.getLastSegment();if(!s)return this;r&&r._point.isClose(s._point,i)&&t.reverse();var a=t.getFirstSegment();if(r&&r._point.isClose(a._point,i))r.setHandleOut(a._handleOut),this._add(n.slice(1));else{var o=this.getFirstSegment();o&&o._point.isClose(a._point,i)&&t.reverse(),s=t.getLastSegment(),o&&o._point.isClose(s._point,i)?(o.setHandleIn(s._handleIn),this._add(n.slice(0,n.length-1),0)):this._add(n.slice())}t._closed&&this._add([n[0]]),t.remove()}var h=this.getFirstSegment(),u=this.getLastSegment();return h!==u&&h._point.isClose(u._point,i)&&(h.setHandleIn(u._handleIn),u.remove(),this.setClosed(!0)),this},reduce:function(t){for(var e=this.getCurves(),i=t&&t.simplify,n=i?1e-7:0,r=e.length-1;r>=0;r--){var s=e[r];!s.hasHandles()&&(!s.hasLength(n)||i&&s.isCollinear(s.getNext()))&&s.remove()}return this},reverse:function(){this._segments.reverse();for(var t=0,e=this._segments.length;t<e;t++){var i=this._segments[t],n=i._handleIn;i._handleIn=i._handleOut,i._handleOut=n,i._index=t}this._curves=null,this._changed(9)},flatten:function(t){for(var e=new q(this,t||.25,256,!0).parts,i=e.length,n=[],r=0;r<i;r++)n.push(new z(e[r].curve.slice(0,2)));!this._closed&&i>0&&n.push(new z(e[i-1].curve.slice(6))),this.setSegments(n)},simplify:function(t){var e=new U(this).fit(t||2.5);return e&&this.setSegments(e),!!e},smooth:function(t){var e=this,i=t||{},n=i.type||"asymmetric",r=this._segments,s=r.length,a=this._closed;function h(t,i){var n=t&&t.index;if(null!=n){var r=t.path;if(r&&r!==e)throw new Error(t._class+" "+n+" of "+r+" is not part of "+e);i&&t instanceof R&&n++}else n="number"==typeof t?t:i;return Math.min(n<0&&a?n%s:n<0?n+s:n,s-1)}var u=a&&i.from===o&&i.to===o,c=h(i.from,0),l=h(i.to,s-1);if(c>l)if(a)c-=s;else{var f=c;c=l,l=f}if(/^(?:asymmetric|continuous)$/.test(n)){var d="asymmetric"===n,p=Math.min,g=l-c+1,_=g-1,v=u?p(g,4):1,m=v,y=v,x=[];if(a||(m=p(1,c),y=p(1,s-l-1)),(_+=m+y)<=1)return;for(var w=0,b=c-m;w<=_;w++,b++)x[w]=r[(b<0?b+s:b)%s]._point;var C=x[0]._x+2*x[1]._x,S=x[0]._y+2*x[1]._y,k=2,A=_-1,I=[C],P=[S],E=[k],T=[],M=[];for(w=1;w<_;w++){var L=w<A,N=L?4:d?2:7,O=L?4:d?3:8,z=L?2:d?0:1,V=(L||d?1:2)/k;k=E[w]=N-V,C=I[w]=O*x[w]._x+z*x[w+1]._x-V*C,S=P[w]=O*x[w]._y+z*x[w+1]._y-V*S}for(T[A]=I[A]/E[A],M[A]=P[A]/E[A],w=_-2;w>=0;w--)T[w]=(I[w]-T[w+1])/E[w],M[w]=(P[w]-M[w+1])/E[w];T[_]=(3*x[_]._x-T[A])/2,M[_]=(3*x[_]._y-M[A])/2,w=m;var B=_-y;for(b=c;w<=B;w++,b++){var D=r[b<0?b+s:b],F=D._point,j=T[w]-F._x,q=M[w]-F._y;(u||w<B)&&D.setHandleOut(j,q),(u||w>m)&&D.setHandleIn(-j,-q)}}else for(w=c;w<=l;w++)r[w<0?w+s:w].smooth(i,!u&&w===c,!u&&w===l)},toShape:function(t){if(!this._closed)return null;var e,i,n,r,s,a,h,u=this._segments;function c(t,e){var i=u[t],n=i.getNext(),r=u[e],s=r.getNext();return i._handleOut.isZero()&&n._handleIn.isZero()&&r._handleOut.isZero()&&s._handleIn.isZero()&&n._point.subtract(i._point).isCollinear(s._point.subtract(r._point))}function l(t){var e=u[t],i=e.getNext(),n=e._handleOut,r=i._handleIn,s=.5522847498307936;if(n.isOrthogonal(r)){var a=e._point,o=i._point,h=new k(a,n,!0).intersect(new k(o,r,!0),!0);return h&&_.isZero(n.getLength()/h.subtract(a).getLength()-s)&&_.isZero(r.getLength()/h.subtract(o).getLength()-s)}return!1}function f(t,e){return u[t]._point.getDistance(u[e]._point)}if(!this.hasHandles()&&4===u.length&&c(0,2)&&c(1,3)&&(a=(s=u[1]).getPrevious(),h=s.getNext(),a._handleOut.isZero()&&s._handleIn.isZero()&&s._handleOut.isZero()&&h._handleIn.isZero()&&s._point.subtract(a._point).isOrthogonal(h._point.subtract(s._point)))?(e=T.Rectangle,i=new x(f(0,3),f(0,1)),r=u[1]._point.add(u[2]._point).divide(2)):8===u.length&&l(0)&&l(2)&&l(4)&&l(6)&&c(1,5)&&c(3,7)?(e=T.Rectangle,n=(i=new x(f(1,6),f(0,3))).subtract(new x(f(0,7),f(1,2))).divide(2),r=u[3]._point.add(u[4]._point).divide(2)):4===u.length&&l(0)&&l(1)&&l(2)&&l(3)&&(_.isZero(f(0,2)-f(1,3))?(e=T.Circle,n=f(0,2)/2):(e=T.Ellipse,n=new x(f(2,0)/2,f(3,1)/2)),r=u[1]._point),e){var d=this.getPosition(!0),p=new e({center:d,size:i,radius:n,insert:!1});return p.copyAttributes(this,!0),p._matrix.prepend(this._matrix),p.rotate(r.subtract(d).getAngle()+90),(t===o||t)&&p.insertAbove(this),p}return null},toPath:"#clone",compare:function t(e){if(!e||e instanceof j)return t.base.call(this,e);var i=this.getCurves(),n=e.getCurves(),r=i.length,s=n.length;if(!r||!s)return r==s;for(var a,o,h=i[0].getValues(),u=[],c=0,l=0,f=0;f<s;f++){var d=n[f].getValues();if(u.push(d),_=R.getOverlaps(h,d)){a=!f&&_[0][0]>0?s-1:f,o=_[0][1];break}}var p,g=Math.abs;for(d=u[a];h&&d;){var _;if((_=R.getOverlaps(h,d))&&g(_[0][0]-l)<1e-8){1===(l=_[1][0])&&(h=++c<r?i[c].getValues():null,l=0);var v=_[0][1];if(g(v-o)<1e-8){if(p||(p=[a,v]),1===(o=_[1][1])&&(++a>=s&&(a=0),d=u[a]||n[a].getValues(),o=0),!h)return p[0]===a&&p[1]===o;continue}}break}return!1},_hitTestSelf:function(t,e,i,n){var r,s,a,o,h,u,c=this,l=this.getStyle(),f=this._segments,d=f.length,p=this._closed,g=e._tolerancePadding,_=g,v=e.stroke&&l.hasStroke(),m=e.fill&&l.hasFill(),y=e.curves,x=v?l.getStrokeWidth()/2:m&&e.tolerance>0||y?0:null;function w(e,i){return t.subtract(e).divide(i).length<=1}function b(t,i,n){if(!e.selected||i.isSelected()){var r=t._point;if(i!==r&&(i=i.add(r)),w(i,_))return new O(n,c,{segment:t,point:i})}}function C(t,i){return(i||e.segments)&&b(t,t._point,"segment")||!i&&e.handles&&(b(t,t._handleIn,"handle-in")||b(t,t._handleOut,"handle-out"))}function S(t){o.add(t)}function k(e){var i,h=p||e._index>0&&e._index<d-1;return"round"===(h?r:s)?w(e._point,_):(o=new F({internal:!0,closed:!0}),h?e.isSmooth()||F._addBevelJoin(e,r,x,a,null,n,S,!0):"square"===s&&F._addSquareCap(e,s,x,null,n,S,!0),o.isEmpty()?void 0:o.contains(t)||(i=o.getNearestLocation(t))&&w(i.getPoint(),g))}if(null!==x&&(x>0?(r=l.getStrokeJoin(),s=l.getStrokeCap(),a=l.getMiterLimit(),_=_.add(F._getStrokePadding(x,n))):r=s="round"),!e.ends||e.segments||p){if(e.segments||e.handles)for(var A=0;A<d;A++)if(u=C(f[A]))return u}else if(u=C(f[0],!0)||C(f[d-1],!0))return u;if(null!==x){if(h=this.getNearestLocation(t)){var I=h.getTime();0===I||1===I&&d>1?k(h.getSegment())||(h=null):w(h.getPoint(),_)||(h=null)}if(!h&&"miter"===r&&d>1)for(A=0;A<d;A++){var P=f[A];if(t.getDistance(P._point)<=a*x&&k(P)){h=P.getLocation();break}}}return!h&&m&&this._contains(t)||h&&!v&&!y?new O("fill",this):h?new O(v?"stroke":"curve",this,{location:h,point:h.getPoint()}):null}},c.each(R._evaluateMethods,(function(t){this[t+"At"]=function(e){var i=this.getLocationAt(e);return i&&i[t]()}}),{beans:!1,getLocationOf:function(){for(var t=m.read(arguments),e=this.getCurves(),i=0,n=e.length;i<n;i++){var r=e[i].getLocationOf(t);if(r)return r}return null},getOffsetOf:function(){var t=this.getLocationOf.apply(this,arguments);return t?t.getOffset():null},getLocationAt:function(t){if("number"==typeof t){for(var e=this.getCurves(),i=0,n=0,r=e.length;n<r;n++){var s=i,a=e[n];if((i+=a.getLength())>t)return a.getLocationAt(t-s)}if(e.length>0&&t<=this.getLength())return new B(e[e.length-1],1)}else if(t&&t.getPath&&t.getPath()===this)return t;return null},getOffsetsWithTangent:function(){var t=m.read(arguments);if(t.isZero())return[];for(var e=[],i=0,n=this.getCurves(),r=0,s=n.length;r<s;r++){for(var a=n[r],o=a.getTimesWithTangent(t),h=0,u=o.length;h<u;h++){var c=i+a.getOffsetAtTime(o[h]);e.indexOf(c)<0&&e.push(c)}i+=a.length}return e}}),new function(){function t(t,e,i){var n,r,s,a,o,h,u,c,l=e._segments,f=l.length,d=new Array(6),p=!0;function g(e){if(i)e._transformCoordinates(i,d),n=d[0],r=d[1];else{var l=e._point;n=l._x,r=l._y}if(p)t.moveTo(n,r),p=!1;else{if(i)o=d[2],h=d[3];else{var f=e._handleIn;o=n+f._x,h=r+f._y}o===n&&h===r&&u===s&&c===a?t.lineTo(n,r):t.bezierCurveTo(u,c,o,h,n,r)}s=n,a=r,i?(u=d[4],c=d[5]):(f=e._handleOut,u=s+f._x,c=a+f._y)}for(var _=0;_<f;_++)g(l[_]);e._closed&&f>0&&g(l[0])}return{_draw:function(e,i,n,r){var s=i.dontStart,a=i.dontFinish||i.clip,o=this.getStyle(),h=o.hasFill(),u=o.hasStroke(),c=o.getDashArray(),l=!ft.support.nativeDash&&u&&c&&c.length;function f(t){return c[(t%l+l)%l]}if(s||e.beginPath(),(h||u&&!l||a)&&(t(e,this,r),this._closed&&e.closePath()),!a&&(h||u)&&(this._setStyles(e,i,n),h&&(e.fill(o.getFillRule()),e.shadowColor="rgba(0,0,0,0)"),u)){if(l){s||e.beginPath();for(var d,p=new q(this,.25,32,!1,r),g=p.length,_=-o.getDashOffset(),v=0;_>0;)_-=f(v--)+f(v--);for(;_<g;)d=_+f(v++),(_>0||d>0)&&p.drawPart(e,Math.max(_,0),Math.max(d,0)),_=d+f(v++)}e.stroke()}},_drawSelected:function(e,i){e.beginPath(),t(e,this,i),e.stroke(),function(t,e,i,n){if(!(n<=0))for(var r,s,a=n/2,o=n-2,h=a-1,u=new Array(6),c=0,l=e.length;c<l;c++){var f=e[c],d=f._selection;if(f._transformCoordinates(i,u),r=u[0],s=u[1],2&d&&g(2),4&d&&g(4),t.fillRect(r-a,s-a,n,n),o>0&&!(1&d)){var p=t.fillStyle;t.fillStyle="#ffffff",t.fillRect(r-h,s-h,o,o),t.fillStyle=p}}function g(e){var i=u[e],n=u[e+1];r==i&&s==n||(t.beginPath(),t.moveTo(r,s),t.lineTo(i,n),t.stroke(),t.beginPath(),t.arc(i,n,a,0,2*Math.PI,!0),t.fill())}}(e,this._segments,i,ft.settings.handleSize)}}},new function(){function t(t){var e=t._segments;if(!e.length)throw new Error("Use a moveTo() command first");return e[e.length-1]}return{moveTo:function(){var t=this._segments;1===t.length&&this.removeSegment(0),t.length||this._add([new z(m.read(arguments))])},moveBy:function(){throw new Error("moveBy() is unsupported on Path items.")},lineTo:function(){this._add([new z(m.read(arguments))])},cubicCurveTo:function(){var e=arguments,i=m.read(e),n=m.read(e),r=m.read(e),s=t(this);s.setHandleOut(i.subtract(s._point)),this._add([new z(r,n.subtract(r))])},quadraticCurveTo:function(){var e=arguments,i=m.read(e),n=m.read(e),r=t(this)._point;this.cubicCurveTo(i.add(r.subtract(i).multiply(1/3)),i.add(n.subtract(i).multiply(1/3)),n)},curveTo:function(){var e=arguments,i=m.read(e),n=m.read(e),r=c.pick(c.read(e),.5),s=1-r,a=t(this)._point,o=i.subtract(a.multiply(s*s)).subtract(n.multiply(r*r)).divide(2*r*s);if(o.isNaN())throw new Error("Cannot put a curve through points with parameter = "+r);this.quadraticCurveTo(o,n)},arcTo:function(){var e,i,n,r,s=arguments,a=Math.abs,o=Math.sqrt,h=t(this),u=h._point,l=m.read(s),f=c.peek(s);if("boolean"==typeof(y=c.pick(f,!0)))var d=(b=u.add(l).divide(2)).add(b.subtract(u).rotate(y?-90:90));else if(c.remain(s)<=2)d=l,l=m.read(s);else if(!u.equals(l)){var p=x.read(s),g=_.isZero;if(g(p.width)||g(p.height))return this.lineTo(l);var v=c.read(s),y=!!c.read(s),w=!!c.read(s),b=u.add(l).divide(2),C=($=u.subtract(b).rotate(-v)).x,A=$.y,I=a(p.width),P=a(p.height),E=I*I,T=P*P,M=C*C,L=A*A,N=o(M/E+L/T);if(N>1&&(E=(I*=N)*I,T=(P*=N)*P),a(N=(E*T-E*L-T*M)/(E*L+T*M))<1e-12&&(N=0),N<0)throw new Error("Cannot create an arc with the given arguments");e=new m(I*A/P,-P*C/I).multiply((w===y?-1:1)*o(N)).rotate(v).add(b),i=(n=(r=(new S).translate(e).rotate(v).scale(I,P))._inverseTransform(u)).getDirectedAngle(r._inverseTransform(l)),!y&&i>0?i-=360:y&&i<0&&(i+=360)}if(d){var O=new k(u.add(d).divide(2),d.subtract(u).rotate(90),!0),V=new k(d.add(l).divide(2),l.subtract(d).rotate(90),!0),R=new k(u,l),B=R.getSide(d);if(!(e=O.intersect(V,!0))){if(!B)return this.lineTo(l);throw new Error("Cannot create an arc with the given arguments")}i=(n=u.subtract(e)).getDirectedAngle(l.subtract(e));var D=R.getSide(e,!0);0===D?i=B*a(i):B===D&&(i+=i<0?360:-360)}if(i){for(var F=1e-7,j=a(i),q=j>=360?4:Math.ceil((j-F)/90),U=i/q,H=U*Math.PI/360,W=4/3*Math.sin(H)/(1+Math.cos(H)),G=[],Z=0;Z<=q;Z++){var $=l,Q=null;if(Z<q&&(Q=n.rotate(90).multiply(W),r?($=r._transformPoint(n),Q=r._transformPoint(n.add(Q)).subtract($)):$=e.add(n)),Z){var K=n.rotate(-90).multiply(W);r&&(K=r._transformPoint(n.add(K)).subtract($)),G.push(new z($,K,Q))}else h.setHandleOut(Q);n=n.rotate(U)}this._add(G)}},lineBy:function(){var e=m.read(arguments),i=t(this)._point;this.lineTo(i.add(e))},curveBy:function(){var e=arguments,i=m.read(e),n=m.read(e),r=c.read(e),s=t(this)._point;this.curveTo(s.add(i),s.add(n),r)},cubicCurveBy:function(){var e=arguments,i=m.read(e),n=m.read(e),r=m.read(e),s=t(this)._point;this.cubicCurveTo(s.add(i),s.add(n),s.add(r))},quadraticCurveBy:function(){var e=arguments,i=m.read(e),n=m.read(e),r=t(this)._point;this.quadraticCurveTo(r.add(i),r.add(n))},arcBy:function(){var e=arguments,i=t(this)._point,n=i.add(m.read(e)),r=c.pick(c.peek(e),!0);"boolean"==typeof r?this.arcTo(n,r):this.arcTo(n,i.add(m.read(e)))},closePath:function(t){this.setClosed(!0),this.join(this,t)}}},{_getBounds:function(t,e){var i=e.handle?"getHandleBounds":e.stroke?"getStrokeBounds":"getBounds";return F[i](this._segments,this._closed,this,t,e)},statics:{getBounds:function(t,e,i,n,r,s){var a=t[0];if(!a)return new b;var o=new Array(6),h=a._transformCoordinates(n,new Array(6)),u=h.slice(0,2),c=u.slice(),l=new Array(2);function f(t){t._transformCoordinates(n,o);for(var e=0;e<2;e++)R._addBounds(h[e],h[e+4],o[e+2],o[e],e,s?s[e]:0,u,c,l);var i=h;h=o,o=i}for(var d=1,p=t.length;d<p;d++)f(t[d]);return e&&f(a),new b(u[0],u[1],c[0]-u[0],c[1]-u[1])},getStrokeBounds:function(t,e,i,n,r){var s=i.getStyle(),a=s.hasStroke(),o=s.getStrokeWidth(),h=a&&i._getStrokeMatrix(n,r),u=a&&F._getStrokePadding(o,h),c=F.getBounds(t,e,i,n,r,u);if(!a)return c;var l=o/2,f=s.getStrokeJoin(),d=s.getStrokeCap(),p=s.getMiterLimit(),g=new b(new x(u));function _(t){c=c.include(t)}function v(t){c=c.unite(g.setCenter(t._point.transform(n)))}function m(t,e){"round"===e||t.isSmooth()?v(t):F._addBevelJoin(t,e,l,p,n,h,_)}function y(t,e){"round"===e?v(t):F._addSquareCap(t,e,l,n,h,_)}var w=t.length-(e?0:1);if(w>0){for(var C=1;C<w;C++)m(t[C],f);e?m(t[0],f):(y(t[0],d),y(t[t.length-1],d))}return c},_getStrokePadding:function(t,e){if(!e)return[t,t];var i=new m(t,0).transform(e),n=new m(0,t).transform(e),r=i.getAngleInRadians(),s=i.getLength(),a=n.getLength(),o=Math.sin(r),h=Math.cos(r),u=Math.tan(r),c=Math.atan2(a*u,s),l=Math.atan2(a,u*s);return[Math.abs(s*Math.cos(c)*h+a*Math.sin(c)*o),Math.abs(a*Math.sin(l)*h+s*Math.cos(l)*o)]},_addBevelJoin:function(t,e,i,n,r,s,a,o){var h=t.getCurve(),u=h.getPrevious(),c=h.getPoint1().transform(r),l=u.getNormalAtTime(1).multiply(i).transform(s),f=h.getNormalAtTime(0).multiply(i).transform(s),d=l.getDirectedAngle(f);if((d<0||d>=180)&&(l=l.negate(),f=f.negate()),o&&a(c),a(c.add(l)),"miter"===e){var p=new k(c.add(l),new m(-l.y,l.x),!0).intersect(new k(c.add(f),new m(-f.y,f.x),!0),!0);p&&c.getDistance(p)<=n*i&&a(p)}a(c.add(f))},_addSquareCap:function(t,e,i,n,r,s,a){var o=t._point.transform(n),h=t.getLocation(),u=h.getNormal().multiply(0===h.getTime()?i:-i).transform(r);"square"===e&&(a&&(s(o.subtract(u)),s(o.add(u))),o=o.add(u.rotate(-90))),s(o.add(u)),s(o.subtract(u))},getHandleBounds:function(t,e,i,n,r){var s,a,o=i.getStyle();if(r.stroke&&o.hasStroke()){var h=i._getStrokeMatrix(n,r),u=o.getStrokeWidth()/2,c=u;"miter"===o.getStrokeJoin()&&(c=u*o.getMiterLimit()),"square"===o.getStrokeCap()&&(c=Math.max(c,u*Math.SQRT2)),s=F._getStrokePadding(u,h),a=F._getStrokePadding(c,h)}for(var l=new Array(6),f=1/0,d=-f,p=f,g=d,_=0,v=t.length;_<v;_++){t[_]._transformCoordinates(n,l);for(var m=0;m<6;m+=2){var y=m?s:a,x=y?y[0]:0,w=y?y[1]:0,C=l[m],S=l[m+1],k=C-x,A=C+x,I=S-w,P=S+w;k<f&&(f=k),A>d&&(d=A),I<p&&(p=I),P>g&&(g=P)}}return new b(f,p,d-f,g-p)}}});F.inject({statics:new function(){var t=.5522847498307936,e=[new z([-1,0],[0,t],[0,-t]),new z([0,-1],[-t,0],[t,0]),new z([1,0],[0,-t],[0,t]),new z([0,1],[t,0],[-t,0])];function i(t,e,i){var n=c.getNamed(i),r=new F(n&&0==n.insert&&I.NO_INSERT);return r._add(t),r._closed=e,r.set(n,{insert:!0})}function n(t,n,r){for(var s=new Array(4),a=0;a<4;a++){var o=e[a];s[a]=new z(o._point.multiply(n).add(t),o._handleIn.multiply(n),o._handleOut.multiply(n))}return i(s,!0,r)}return{Line:function(){var t=arguments;return i([new z(m.readNamed(t,"from")),new z(m.readNamed(t,"to"))],!1,t)},Circle:function(){var t=arguments,e=m.readNamed(t,"center"),i=c.readNamed(t,"radius");return n(e,new x(i),t)},Rectangle:function(){var e,n=arguments,r=b.readNamed(n,"rectangle"),s=x.readNamed(n,"radius",0,{readNull:!0}),a=r.getBottomLeft(!0),o=r.getTopLeft(!0),h=r.getTopRight(!0),u=r.getBottomRight(!0);if(!s||s.isZero())e=[new z(a),new z(o),new z(h),new z(u)];else{var c=(s=x.min(s,r.getSize(!0).divide(2))).width,l=s.height,f=c*t,d=l*t;e=[new z(a.add(c,0),null,[-f,0]),new z(a.subtract(0,l),[0,d]),new z(o.add(0,l),null,[0,-d]),new z(o.add(c,0),[-f,0],null),new z(h.subtract(c,0),null,[f,0]),new z(h.add(0,l),[0,-d],null),new z(u.subtract(0,l),null,[0,d]),new z(u.subtract(c,0),[f,0])]}return i(e,!0,n)},RoundRectangle:"#Rectangle",Ellipse:function(){var t=arguments,e=T._readEllipse(t);return n(e.center,e.radius,t)},Oval:"#Ellipse",Arc:function(){var t=arguments,e=m.readNamed(t,"from"),i=m.readNamed(t,"through"),n=m.readNamed(t,"to"),r=c.getNamed(t),s=new F(r&&0==r.insert&&I.NO_INSERT);return s.moveTo(e),s.arcTo(i,n),s.set(r)},RegularPolygon:function(){for(var t=arguments,e=m.readNamed(t,"center"),n=c.readNamed(t,"sides"),r=c.readNamed(t,"radius"),s=360/n,a=n%3==0,o=new m(0,a?-r:r),h=a?-1:.5,u=new Array(n),l=0;l<n;l++)u[l]=new z(e.add(o.rotate((l+h)*s)));return i(u,!0,t)},Star:function(){for(var t=arguments,e=m.readNamed(t,"center"),n=2*c.readNamed(t,"points"),r=c.readNamed(t,"radius1"),s=c.readNamed(t,"radius2"),a=360/n,o=new m(0,-1),h=new Array(n),u=0;u<n;u++)h[u]=new z(e.add(o.rotate(a*u).multiply(u%2?s:r)));return i(h,!0,t)}}}});var j=D.extend({_class:"CompoundPath",_serializeFields:{children:[]},beans:!0,initialize:function(t){this._children=[],this._namedChildren={},this._initialize(t)||("string"==typeof t?this.setPathData(t):this.addChildren(Array.isArray(t)?t:arguments))},insertChildren:function t(e,i){var n=i,r=n[0];r&&"number"==typeof r[0]&&(n=[n]);for(var s=i.length-1;s>=0;s--){var a=n[s];n!==i||a instanceof F||(n=c.slice(n)),Array.isArray(a)?n[s]=new F({segments:a,insert:!1}):a instanceof j&&(n.splice.apply(n,[s,1].concat(a.removeChildren())),a.remove())}return t.base.call(this,e,n)},reduce:function t(e){for(var i=this._children,n=i.length-1;n>=0;n--){var r;(r=i[n].reduce(e)).isEmpty()&&r.remove()}return i.length?t.base.call(this):((r=new F(I.NO_INSERT)).copyAttributes(this),r.insertAbove(this),this.remove(),r)},isClosed:function(){for(var t=this._children,e=0,i=t.length;e<i;e++)if(!t[e]._closed)return!1;return!0},setClosed:function(t){for(var e=this._children,i=0,n=e.length;i<n;i++)e[i].setClosed(t)},getFirstSegment:function(){var t=this.getFirstChild();return t&&t.getFirstSegment()},getLastSegment:function(){var t=this.getLastChild();return t&&t.getLastSegment()},getCurves:function(){for(var t=this._children,e=[],i=0,n=t.length;i<n;i++)c.push(e,t[i].getCurves());return e},getFirstCurve:function(){var t=this.getFirstChild();return t&&t.getFirstCurve()},getLastCurve:function(){var t=this.getLastChild();return t&&t.getLastCurve()},getArea:function(){for(var t=this._children,e=0,i=0,n=t.length;i<n;i++)e+=t[i].getArea();return e},getLength:function(){for(var t=this._children,e=0,i=0,n=t.length;i<n;i++)e+=t[i].getLength();return e},getPathData:function(t,e){for(var i=this._children,n=[],r=0,s=i.length;r<s;r++){var a=i[r],o=a._matrix;n.push(a.getPathData(t&&!o.isIdentity()?t.appended(o):t,e))}return n.join("")},_hitTestChildren:function t(e,i,n){return t.base.call(this,e,i.class===F||"path"===i.type?i:c.set({},i,{fill:!1}),n)},_draw:function(t,e,i,n){var r=this._children;if(r.length){e=e.extend({dontStart:!0,dontFinish:!0}),t.beginPath();for(var s=0,a=r.length;s<a;s++)r[s].draw(t,e,n);if(!e.clip){this._setStyles(t,e,i);var o=this._style;o.hasFill()&&(t.fill(o.getFillRule()),t.shadowColor="rgba(0,0,0,0)"),o.hasStroke()&&t.stroke()}}},_drawSelected:function(t,e,i){for(var n=this._children,r=0,s=n.length;r<s;r++){var a=n[r],o=a._matrix;i[a._id]||a._drawSelected(t,o.isIdentity()?e:e.appended(o))}}},new function(){function t(t,e){var i=t._children;if(e&&!i.length)throw new Error("Use a moveTo() command first");return i[i.length-1]}return c.each(["lineTo","cubicCurveTo","quadraticCurveTo","curveTo","arcTo","lineBy","cubicCurveBy","quadraticCurveBy","curveBy","arcBy"],(function(e){this[e]=function(){var i=t(this,!0);i[e].apply(i,arguments)}}),{moveTo:function(){var e=t(this),i=e&&e.isEmpty()?e:new F(I.NO_INSERT);i!==e&&this.addChild(i),i.moveTo.apply(i,arguments)},moveBy:function(){var e=t(this,!0),i=e&&e.getLastSegment(),n=m.read(arguments);this.moveTo(i?n.add(i._point):n)},closePath:function(e){t(this,!0).closePath(e)}})},c.each(["reverse","flatten","simplify","smooth"],(function(t){this[t]=function(e){for(var i,n=this._children,r=0,s=n.length;r<s;r++)i=n[r][t](e)||i;return i}}),{}));D.inject(new function(){var t=Math.min,e=Math.max,i=Math.abs,n={unite:{1:!0,2:!0},intersect:{2:!0},subtract:{1:!0},exclude:{1:!0,"-1":!0}};function r(t){return t._children||[t]}function s(t,e){var i=t.clone(!1).reduce({simplify:!0}).transform(null,!0,!0);if(e){for(var n=r(i),s=0,a=n.length;s<a;s++)(t=n[s])._closed||t.isEmpty()||(t.closePath(1e-12),t.getFirstSegment().setHandleIn(0,0),t.getLastSegment().setHandleOut(0,0));i=i.resolveCrossings().reorient("nonzero"===i.getFillRule(),!0)}return i}function a(t,e,i,n,r){var s=new j(I.NO_INSERT);return s.addChildren(t,!0),s=s.reduce({simplify:e}),r&&0==r.insert||s.insertAbove(n&&i.isSibling(n)&&i.getIndex()<n.getIndex()?n:i),s.copyAttributes(i,!0),s}function h(t){return t.hasOverlap()||t.isCrossing()}function u(t,e,i,o){if(o&&(0==o.trace||o.stroke)&&/^(subtract|intersect)$/.test(i))return l(t,e,i);var u=s(t,!0),f=e&&t!==e&&s(e,!0),d=n[i];d[i]=!0,f&&(d.subtract||d.exclude)^f.isClockwise()^u.isClockwise()&&f.reverse();var _,m=v(B.expand(u.getIntersections(f,h))),w=r(u),b=f&&r(f),C=[],S=[];function k(t){for(var e=0,i=t.length;e<i;e++){var n=t[e];c.push(C,n._segments),c.push(S,n.getCurves()),n._overlapsOnly=!0}}function A(t){for(var e=[],i=0,n=t&&t.length;i<n;i++)e.push(S[t[i]]);return e}if(m.length){k(w),b&&k(b);for(var I=new Array(S.length),P=0,E=S.length;P<E;P++)I[P]=S[P].getValues();var T=p.findCurveBoundsCollisions(I,I,0,!0),M={};for(P=0;P<S.length;P++){var L=S[P],N=L._path._id;(M[N]=M[N]||{})[L.getIndex()]={hor:A(T[P].hor),ver:A(T[P].ver)}}for(P=0,E=m.length;P<E;P++)y(m[P]._segment,u,f,M,d);for(P=0,E=C.length;P<E;P++){var O=C[P],z=O._intersection;O._winding||y(O,u,f,M,d),z&&z._overlap||(O._path._overlapsOnly=!1)}_=x(C,d)}else _=g(b?w.concat(b):w.slice(),(function(t){return!!d[t]}));return a(_,!0,t,e,o)}function l(t,e,i){var n=s(t),r=s(e),o=n.getIntersections(r,h),u="subtract"===i,c="divide"===i,l={},f=[];function d(t){if(!l[t._id]&&(c||r.contains(t.getPointAt(t.getLength()/2))^u))return f.unshift(t),l[t._id]=!0}for(var p=o.length-1;p>=0;p--){var g=o[p].split();g&&(d(g)&&g.getFirstSegment().setHandleIn(0,0),n.getLastSegment().setHandleOut(0,0))}return d(n),a(f,!1,t,e)}function f(t,e){for(var i=t;i;){if(i===e)return;i=i._previous}for(;t._next&&t._next!==e;)t=t._next;if(!t._next){for(;e._previous;)e=e._previous;t._next=e,e._previous=t}}function d(t){for(var e=t.length-1;e>=0;e--)t[e].clearHandles()}function g(t,e,n){var r=t&&t.length;if(r){var s=c.each(t,(function(t,e){this[t._id]={container:null,winding:t.isClockwise()?1:-1,index:e}}),{}),a=t.slice().sort((function(t,e){return i(e.getArea())-i(t.getArea())})),o=a[0],h=p.findItemBoundsCollisions(a,null,_.GEOMETRIC_EPSILON);null==n&&(n=o.isClockwise());for(var u=0;u<r;u++){var l=a[u],f=s[l._id],d=0,g=h[u];if(g)for(var v=null,m=g.length-1;m>=0;m--)if(g[m]<u){v=v||l.getInteriorPoint();var y=a[g[m]];if(y.contains(v)){var x=s[y._id];d=x.winding,f.winding+=d,f.container=x.exclude?x.container:y;break}}if(e(f.winding)===e(d))f.exclude=!0,t[f.index]=null;else{var w=f.container;l.setClockwise(w?!w.isClockwise():n)}}}return t}function v(t,e,i){var n,r,s,a=e&&[],o=!1,h=i||[],u=i&&{};function c(t){return t._path._id+"."+t._segment1._index}for(var l=(i&&i.length)-1;l>=0;l--)(p=i[l])._path&&(u[c(p)]=!0);for(l=t.length-1;l>=0;l--){var p,g,_=t[l],v=_._time,m=v,y=e&&!e(_);if((p=_._curve)&&(p!==r?(o=!p.hasHandles()||u&&u[c(p)],n=[],s=null,r=p):s>=1e-8&&(v/=s)),y)n&&n.push(_);else{if(e&&a.unshift(_),s=m,v<1e-8)g=p._segment1;else if(v>.99999999)g=p._segment2;else{var x=p.divideAtTime(v,!0);o&&h.push(p,x),g=x._segment1;for(var w=n.length-1;w>=0;w--){var b=n[w];b._time=(b._time-v)/(1-v)}}_._setSegment(g);var C=g._intersection,S=_._intersection;if(C){f(C,S);for(var k=C;k;)f(k._intersection,C),k=k._next}else g._intersection=S}}return i||d(h),a||t}function m(n,r,s,a,o){var h,u,c=Array.isArray(r)?r:r[s?"hor":"ver"],l=s?1:0,f=1^l,d=[n.x,n.y],p=d[l],g=d[f],_=1e-6,v=p-1e-9,y=p+1e-9,x=0,w=0,b=0,C=0,S=!1,k=!1,A=1,I=[];function P(i){var u=i[f+0],c=i[f+6];if(!(g<t(u,c)||g>e(u,c))){var d=i[l+0],x=i[l+2],w=i[l+4],k=i[l+6];if(u!==c){var P=g===u?0:g===c||v>e(d,x,w,k)||y<t(d,x,w,k)?1:R.solveCubic(i,f,g,I,0,1)>0?I[0]:1,E=0===P?d:1===P?k:R.getPoint(i,P)[s?"y":"x"],T=u>c?1:-1,M=h[f]>h[f+6]?1:-1,L=h[l+6];return g!==u?(E<v?b+=T:E>y?C+=T:S=!0,E>p-_&&E<p+_&&(A/=2)):(T!==M?d<v?b+=T:d>y&&(C+=T):d!=L&&(L<y&&E>y?(C+=T,S=!0):L>v&&E<v&&(b+=T,S=!0)),A/=4),h=i,!o&&E>v&&E<y&&0===R.getTangent(i,P)[s?"x":"y"]&&m(n,r,!s,a,!0)}(d<y&&k>v||k<y&&d>v)&&(S=!0)}}function E(i){var n=i[f+0],r=i[f+2],a=i[f+4],o=i[f+6];if(g<=e(n,r,a,o)&&g>=t(n,r,a,o))for(var h,u=i[l+0],c=i[l+2],d=i[l+4],p=i[l+6],_=v>e(u,c,d,p)||y<t(u,c,d,p)?[i]:R.getMonoCurves(i,s),m=0,x=_.length;m<x;m++)if(h=P(_[m]))return h}for(var T=0,M=c.length;T<M;T++){var L,N=c[T],O=N._path,z=N.getValues();if(!(T&&c[T-1]._path===O||(h=null,O._closed||(u=R.getValues(O.getLastCurve().getSegment2(),N.getSegment1(),null,!a))[f]!==u[f+6]&&(h=u),h))){h=z;for(var V=O.getLastCurve();V&&V!==N;){var B=V.getValues();if(B[f]!==B[f+6]){h=B;break}V=V.getPrevious()}}if(L=E(z))return L;if(T+1===M||c[T+1]._path!==O){if(u&&(L=E(u)))return L;!S||b||C||(b=C=O.isClockwise(a)^s?1:-1),x+=b,w+=C,b=C=0,S&&(k=!0,S=!1),u=null}}return x=i(x),w=i(w),{winding:e(x,w),windingL:x,windingR:w,quality:A,onPath:k}}function y(t,e,n,r,s){var a=[],o=t,h=0;do{if(y=t.getCurve()){var u=y.getLength();a.push({segment:t,curve:y,length:u}),h+=u}t=t.getNext()}while(t&&!t._intersection&&t!==o);for(var c=[.5,.25,.75],l={winding:0,quality:-1},f=0;f<c.length&&l.quality<.5;f++){u=h*c[f];for(var d=0,p=a.length;d<p;d++){var g=a[d],v=g.length;if(u<=v){var y,x=(y=g.curve)._path,w=x._parent,b=w instanceof j?w:x,C=_.clamp(y.getTimeAt(u),.001,.999),S=y.getPointAtTime(C),k=i(y.getTangentAtTime(C).y)<Math.SQRT1_2,A=null;if(s.subtract&&n){var I=(b===e?n:e)._getWinding(S,k,!0);if(b===e&&I.winding||b===n&&!I.winding){if(I.quality<1)continue;A={winding:0,quality:1}}}(A=A||m(S,r[x._id][y.getIndex()],k,!0)).quality>l.quality&&(l=A);break}u-=v}}for(d=a.length-1;d>=0;d--)a[d].segment._winding=l}function x(t,e){var i,n=[];function r(t){var i;return!(!t||t._visited||e&&(!e[(i=t._winding||{}).winding]||e.unite&&2===i.winding&&i.windingL&&i.windingR))}function s(t){if(t)for(var e=0,n=i.length;e<n;e++)if(t===i[e])return!0;return!1}function a(t){for(var e=t._segments,i=0,n=e.length;i<n;i++)e[i]._visited=!0}function o(t,e){var n=t._intersection,a=n,o=[];function h(n,a){for(;n&&n!==a;){var h=n._segment,u=h&&h._path;if(u){var c=h.getNext()||u.getFirstSegment(),l=c._intersection;h!==t&&(s(h)||s(c)||c&&r(h)&&(r(c)||l&&r(l._segment)))&&o.push(h),e&&i.push(h)}n=n._next}}if(e&&(i=[t]),n){for(h(n);n&&n._previous;)n=n._previous;h(n,a)}return o}t.sort((function(t,e){var i=t._intersection,n=e._intersection,r=!(!i||!i._overlap),s=!(!n||!n._overlap),a=t._path,o=e._path;return r^s?r?1:-1:!i^!n?i?1:-1:a!==o?a._id-o._id:t._index-e._index}));for(var h=0,u=t.length;h<u;h++){var c,l,f,d=t[h],p=r(d),g=null,_=!1,v=!0,m=[];if(p&&d._path._overlapsOnly){var y=d._path,x=d._intersection._segment._path;y.compare(x)&&(y.getArea()&&n.push(y.clone(!1)),a(y),a(x),p=!1)}for(;p;){var w=!g,b=o(d,w),C=b.shift(),S=!(_=!w&&(s(d)||s(C)))&&C;if(w&&(g=new F(I.NO_INSERT),c=null),_){(d.isFirst()||d.isLast())&&(v=d._path._closed),d._visited=!0;break}if(S&&c&&(m.push(c),c=null),c||(S&&b.push(d),c={start:g._segments.length,crossings:b,visited:l=[],handleIn:f}),S&&(d=C),!r(d)){g.removeSegments(c.start);for(var k=0,A=l.length;k<A;k++)l[k]._visited=!1;l.length=0;do{(d=c&&c.crossings.shift())&&d._path||(d=null,(c=m.pop())&&(l=c.visited,f=c.handleIn))}while(c&&!r(d));if(!d)break}var P=d.getNext();g.add(new z(d._point,f,P&&d._handleOut)),d._visited=!0,l.push(d),d=P||d._path.getFirstSegment(),f=P&&P._handleIn}_&&(v&&(g.getFirstSegment().setHandleIn(f),g.setClosed(v)),0!==g.getArea()&&n.push(g))}return n}return{_getWinding:function(t,e,i){return m(t,this.getCurves(),e,i)},unite:function(t,e){return u(this,t,"unite",e)},intersect:function(t,e){return u(this,t,"intersect",e)},subtract:function(t,e){return u(this,t,"subtract",e)},exclude:function(t,e){return u(this,t,"exclude",e)},divide:function(t,e){return e&&(0==e.trace||e.stroke)?l(this,t,"divide"):a([this.subtract(t,e),this.intersect(t,e)],!0,this,t,e)},resolveCrossings:function(){var t=this._children,e=t||[this];function i(t,e){var i=t&&t._intersection;return i&&i._overlap&&i._path===e}var n=!1,r=!1,s=this.getIntersections(null,(function(t){return t.hasOverlap()&&(n=!0)||t.isCrossing()&&(r=!0)})),a=n&&r&&[];if(s=B.expand(s),n)for(var o=v(s,(function(t){return t.hasOverlap()}),a),h=o.length-1;h>=0;h--){var u=o[h],l=u._path,f=u._segment,p=f.getPrevious(),g=f.getNext();i(p,l)&&i(g,l)&&(f.remove(),p._handleOut._set(0,0),g._handleIn._set(0,0),p===f||p.getCurve().hasLength()||(g._handleIn.set(p._handleIn),p.remove()))}r&&(v(s,n&&function(t){var e=t.getCurve(),i=t.getSegment(),n=t._intersection,r=n._curve,s=n._segment;if(e&&r&&e._path&&r._path)return!0;i&&(i._intersection=null),s&&(s._intersection=null)},a),a&&d(a),e=x(c.each(e,(function(t){c.push(this,t._segments)}),[])));var _,m=e.length;return m>1&&t?(e!==t&&this.setChildren(e),_=this):1!==m||t||(e[0]!==this&&this.setSegments(e[0].removeSegments()),_=this),_||((_=new j(I.NO_INSERT)).addChildren(e),(_=_.reduce()).copyAttributes(this),this.replaceWith(_)),_},reorient:function(t,e){var i=this._children;return i&&i.length?this.setChildren(g(this.removeChildren(),(function(e){return!!(t?e:1&e)}),e)):e!==o&&this.setClockwise(e),this},getInteriorPoint:function(){var i=this.getBounds().getCenter(!0);if(!this.contains(i)){for(var n=this.getCurves(),r=i.y,s=[],a=[],o=0,h=n.length;o<h;o++){var u=n[o].getValues(),c=u[1],l=u[3],f=u[5],d=u[7];if(r>=t(c,l,f,d)&&r<=e(c,l,f,d))for(var p=R.getMonoCurves(u),g=0,_=p.length;g<_;g++){var v=p[g],m=v[1],y=v[7];if(m!==y&&(r>=m&&r<=y||r>=y&&r<=m)){var x=r===m?v[0]:r===y?v[6]:1===R.solveCubic(v,1,r,a,0,1)?R.getPoint(v,a[0]).x:(v[0]+v[6])/2;s.push(x)}}}s.length>1&&(s.sort((function(t,e){return t-e})),i.x=(s[0]+s[1])/2)}return i}}});var q=c.extend({_class:"PathFlattener",initialize:function(t,e,i,n,r){var s,a=[],o=[],h=0,u=1/(i||32),c=t._segments,l=c[0];function f(t,e){var i=R.getValues(t,e,r);a.push(i),d(i,t._index,0,1)}function d(t,i,r,s){if(!(s-r>u)||n&&R.isStraight(t)||R.isFlatEnough(t,e||.25)){var a=t[6]-t[0],c=t[7]-t[1],l=Math.sqrt(a*a+c*c);l>0&&(h+=l,o.push({offset:h,curve:t,index:i,time:s}))}else{var f=R.subdivide(t,.5),p=(r+s)/2;d(f[0],i,r,p),d(f[1],i,p,s)}}for(var p=1,g=c.length;p<g;p++)f(l,s=c[p]),l=s;t._closed&&f(s||l,c[0]),this.curves=a,this.parts=o,this.length=h,this.index=0},_get:function(t){for(var e,i=this.parts,n=i.length,r=this.index;e=r,r&&!(i[--r].offset<t););for(;e<n;e++){var s=i[e];if(s.offset>=t){this.index=e;var a=i[e-1],o=a&&a.index===s.index?a.time:0,h=a?a.offset:0;return{index:s.index,time:o+(s.time-o)*(t-h)/(s.offset-h)}}}return{index:i[n-1].index,time:1}},drawPart:function(t,e,i){for(var n=this._get(e),r=this._get(i),s=n.index,a=r.index;s<=a;s++){var o=R.getPart(this.curves[s],s===n.index?n.time:0,s===r.index?r.time:1);s===n.index&&t.moveTo(o[0],o[1]),t.bezierCurveTo.apply(t,o.slice(2))}}},c.each(R._evaluateMethods,(function(t){this[t+"At"]=function(e){var i=this._get(e);return R[t](this.curves[i.index],i.time)}}),{})),U=c.extend({initialize:function(t){for(var e,i=this.points=[],n=t._segments,r=t._closed,s=0,a=n.length;s<a;s++){var o=n[s].point;e&&e.equals(o)||i.push(e=o.clone())}r&&(i.unshift(i[i.length-1]),i.push(i[1])),this.closed=r},fit:function(t){var e=this.points,i=e.length,n=null;return i>0&&(n=[new z(e[0])],i>1&&(this.fitCubic(n,t,0,i-1,e[1].subtract(e[0]),e[i-2].subtract(e[i-1])),this.closed&&(n.shift(),n.pop()))),n},fitCubic:function(t,e,i,n,r,s){var a=this.points;if(n-i!=1){for(var o,h=this.chordLengthParameterize(i,n),u=Math.max(e,e*e),c=!0,l=0;l<=4;l++){var f=this.generateBezier(i,n,h,r,s),d=this.findMaxError(i,n,f,h);if(d.error<e&&c)return void this.addCurve(t,f);if(o=d.index,d.error>=u)break;c=this.reparameterize(i,n,h,f),u=d.error}var p=a[o-1].subtract(a[o+1]);this.fitCubic(t,e,i,o,r,p),this.fitCubic(t,e,o,n,p.negate(),s)}else{var g=a[i],_=a[n],v=g.getDistance(_)/3;this.addCurve(t,[g,g.add(r.normalize(v)),_.add(s.normalize(v)),_])}},addCurve:function(t,e){t[t.length-1].setHandleOut(e[1].subtract(e[0])),t.push(new z(e[3],e[2].subtract(e[3])))},generateBezier:function(t,e,i,n,r){for(var s=1e-12,a=Math.abs,o=this.points,h=o[t],u=o[e],c=[[0,0],[0,0]],l=[0,0],f=0,d=e-t+1;f<d;f++){var p=i[f],g=1-p,_=3*p*g,v=g*g*g,m=_*g,y=_*p,x=p*p*p,w=n.normalize(m),b=r.normalize(y),C=o[t+f].subtract(h.multiply(v+m)).subtract(u.multiply(y+x));c[0][0]+=w.dot(w),c[0][1]+=w.dot(b),c[1][0]=c[0][1],c[1][1]+=b.dot(b),l[0]+=w.dot(C),l[1]+=b.dot(C)}var S,k,A=c[0][0]*c[1][1]-c[1][0]*c[0][1];if(a(A)>s){var I=c[0][0]*l[1]-c[1][0]*l[0];S=(l[0]*c[1][1]-l[1]*c[0][1])/A,k=I/A}else{var P=c[0][0]+c[0][1],E=c[1][0]+c[1][1];S=k=a(P)>s?l[0]/P:a(E)>s?l[1]/E:0}var T,M,L=u.getDistance(h),N=s*L;if(S<N||k<N)S=k=L/3;else{var O=u.subtract(h);T=n.normalize(S),M=r.normalize(k),T.dot(O)-M.dot(O)>L*L&&(S=k=L/3,T=M=null)}return[h,h.add(T||n.normalize(S)),u.add(M||r.normalize(k)),u]},reparameterize:function(t,e,i,n){for(var r=t;r<=e;r++)i[r-t]=this.findRoot(n,this.points[r],i[r-t]);r=1;for(var s=i.length;r<s;r++)if(i[r]<=i[r-1])return!1;return!0},findRoot:function(t,e,i){for(var n=[],r=[],s=0;s<=2;s++)n[s]=t[s+1].subtract(t[s]).multiply(3);for(s=0;s<=1;s++)r[s]=n[s+1].subtract(n[s]).multiply(2);var a=this.evaluate(3,t,i),o=this.evaluate(2,n,i),h=this.evaluate(1,r,i),u=a.subtract(e),c=o.dot(o)+u.dot(h);return _.isMachineZero(c)?i:i-u.dot(o)/c},evaluate:function(t,e,i){for(var n=e.slice(),r=1;r<=t;r++)for(var s=0;s<=t-r;s++)n[s]=n[s].multiply(1-i).add(n[s+1].multiply(i));return n[0]},chordLengthParameterize:function(t,e){for(var i=[0],n=t+1;n<=e;n++)i[n-t]=i[n-t-1]+this.points[n].getDistance(this.points[n-1]);n=1;for(var r=e-t;n<=r;n++)i[n]/=i[r];return i},findMaxError:function(t,e,i,n){for(var r=Math.floor((e-t+1)/2),s=0,a=t+1;a<e;a++){var o=this.evaluate(3,i,n[a-t]).subtract(this.points[a]),h=o.x*o.x+o.y*o.y;h>=s&&(s=h,r=a)}return{error:s,index:r}}}),H=I.extend({_class:"TextItem",_applyMatrix:!1,_canApplyMatrix:!1,_serializeFields:{content:null},_boundsOptions:{stroke:!1,handle:!1},initialize:function(t){this._content="",this._lines=[];var e=t&&c.isPlainObject(t)&&t.x===o&&t.y===o;this._initialize(e&&t,!e&&m.read(arguments))},_equals:function(t){return this._content===t._content},copyContent:function(t){this.setContent(t._content)},getContent:function(){return this._content},setContent:function(t){this._content=""+t,this._lines=this._content.split(/\r\n|\n|\r/gm),this._changed(521)},isEmpty:function(){return!this._content},getCharacterStyle:"#getStyle",setCharacterStyle:"#setStyle",getParagraphStyle:"#getStyle",setParagraphStyle:"#setStyle"}),W=H.extend({_class:"PointText",initialize:function(){H.apply(this,arguments)},getPoint:function(){var t=this._matrix.getTranslation();return new y(t.x,t.y,this,"setPoint")},setPoint:function(){var t=m.read(arguments);this.translate(t.subtract(this._matrix.getTranslation()))},_draw:function(t,e,i){if(this._content){this._setStyles(t,e,i);var n=this._lines,r=this._style,s=r.hasFill(),a=r.hasStroke(),o=r.getLeading(),h=t.shadowColor;t.font=r.getFontStyle(),t.textAlign=r.getJustification();for(var u=0,c=n.length;u<c;u++){t.shadowColor=h;var l=n[u];s&&(t.fillText(l,0,0),t.shadowColor="rgba(0,0,0,0)"),a&&t.strokeText(l,0,0),t.translate(0,o)}}},_getBounds:function(t,e){var i=this._style,n=this._lines,r=n.length,s=i.getJustification(),a=i.getLeading(),o=this.getView().getTextWidth(i.getFontStyle(),n),h=0;"left"!==s&&(h-=o/("center"===s?2:1));var u=new b(h,r?-.75*a:0,o,r*a);return t?t._transformBounds(u,u):u}}),G=c.extend(new function(){var t,e={gray:["gray"],rgb:["red","green","blue"],hsb:["hue","saturation","brightness"],hsl:["hue","saturation","lightness"],gradient:["gradient","origin","destination","highlight"]},i={},n={transparent:[0,0,0,0]};function r(e){var i,r=e.match(/^#([\da-f]{2})([\da-f]{2})([\da-f]{2})([\da-f]{2})?$/i)||e.match(/^#([\da-f])([\da-f])([\da-f])([\da-f])?$/i),s="rgb";if(r){var a=r[4]?4:3;i=new Array(a);for(var o=0;o<a;o++){var u=r[o+1];i[o]=parseInt(1==u.length?u+u:u,16)/255}}else if(r=e.match(/^(rgb|hsl)a?\((.*)\)$/)){s=r[1],i=r[2].trim().split(/[,\s]+/g);for(var c="hsl"===s,l=(o=0,Math.min(i.length,4));o<l;o++){var f=i[o];if(u=parseFloat(f),c)if(0===o){var d=f.match(/([a-z]*)$/)[1];u*={turn:360,rad:180/Math.PI,grad:.9}[d]||1}else o<3&&(u/=100);else o<3&&(u/=/%$/.test(f)?100:255);i[o]=u}}else{var p=n[e];if(!p)if(h){t||((t=ht.getContext(1,1)).globalCompositeOperation="copy"),t.fillStyle="rgba(0,0,0,0)",t.fillStyle=e,t.fillRect(0,0,1,1);var g=t.getImageData(0,0,1,1).data;p=n[e]=[g[0]/255,g[1]/255,g[2]/255]}else p=[0,0,0];i=p.slice()}return[s,i]}var s=[[0,3,1],[2,0,1],[1,0,3],[1,2,0],[3,1,0],[0,1,2]],a={"rgb-hsb":function(t,e,i){var n=Math.max(t,e,i),r=n-Math.min(t,e,i);return[0===r?0:60*(n==t?(e-i)/r+(e<i?6:0):n==e?(i-t)/r+2:(t-e)/r+4),0===n?0:r/n,n]},"hsb-rgb":function(t,e,i){var n,r=(t=(t/60%6+6)%6)-(n=Math.floor(t)),a=[i,i*(1-e),i*(1-e*r),i*(1-e*(1-r))];return[a[(n=s[n])[0]],a[n[1]],a[n[2]]]},"rgb-hsl":function(t,e,i){var n=Math.max(t,e,i),r=Math.min(t,e,i),s=n-r,a=0===s,o=(n+r)/2;return[a?0:60*(n==t?(e-i)/s+(e<i?6:0):n==e?(i-t)/s+2:(t-e)/s+4),a?0:o<.5?s/(n+r):s/(2-n-r),o]},"hsl-rgb":function(t,e,i){if(0===e)return[i,i,i];for(var n=[(t=(t/360%1+1)%1)+1/3,t,t-1/3],r=i<.5?i*(1+e):i+e-i*e,s=2*i-r,a=[],o=0;o<3;o++){var h=n[o];h<0&&(h+=1),h>1&&(h-=1),a[o]=6*h<1?s+6*(r-s)*h:2*h<1?r:3*h<2?s+(r-s)*(2/3-h)*6:s}return a},"rgb-gray":function(t,e,i){return[.2989*t+.587*e+.114*i]},"gray-rgb":function(t){return[t,t,t]},"gray-hsb":function(t){return[0,0,t]},"gray-hsl":function(t){return[0,0,t]},"gradient-rgb":function(){return[]},"rgb-gradient":function(){return[]}};return c.each(e,(function(t,n){i[n]=[],c.each(t,(function(t,r){var s=c.capitalize(t),a=/^(hue|saturation)$/.test(t),o=i[n][r]="gradient"===n?"gradient"===t?function(t){var e=this._components[0];return e!==(t=Z.read(Array.isArray(t)?t:arguments,0,{readNull:!0}))&&(e&&e._removeOwner(this),t&&t._addOwner(this)),t}:function(){return m.read(arguments,0,{readNull:"highlight"===t,clone:!0})}:function(t){return null==t||isNaN(t)?0:+t};this["get"+s]=function(){return this._type===n||a&&/^hs[bl]$/.test(this._type)?this._components[r]:this._convert(n)[r]},this["set"+s]=function(t){this._type===n||a&&/^hs[bl]$/.test(this._type)||(this._components=this._convert(n),this._properties=e[n],this._type=n),this._components[r]=o.call(this,t),this._changed()}}),this)}),{_class:"Color",_readIndex:!0,initialize:function t(n){var s,a,o,h,u=arguments,l=this.__read,f=0;Array.isArray(n)&&(n=(u=n)[0]);var d=null!=n&&typeof n;if("string"===d&&n in e&&(s=n,n=u[1],Array.isArray(n)?(a=n,o=u[2]):(l&&(f=1),u=c.slice(u,1),d=typeof n)),!a){if(h="number"===d?u:"object"===d&&null!=n.length?n:null){s||(s=h.length>=3?"rgb":"gray");var p=e[s].length;o=h[p],l&&(f+=h===arguments?p+(null!=o?1:0):1),h.length>p&&(h=c.slice(h,0,p))}else if("string"===d){var g=r(n);s=g[0],4===(a=g[1]).length&&(o=a[3],a.length--)}else if("object"===d)if(n.constructor===t){if(s=n._type,a=n._components.slice(),o=n._alpha,"gradient"===s)for(var _=1,v=a.length;_<v;_++){var m=a[_];m&&(a[_]=m.clone())}}else if(n.constructor===Z)s="gradient",h=u;else{var y=e[s="hue"in n?"lightness"in n?"hsl":"hsb":"gradient"in n||"stops"in n||"radial"in n?"gradient":"gray"in n?"gray":"rgb"],x=i[s];for(this._components=a=[],_=0,v=y.length;_<v;_++)null==(w=n[y[_]])&&!_&&"gradient"===s&&"stops"in n&&(w={stops:n.stops,radial:n.radial}),null!=(w=x[_].call(this,w))&&(a[_]=w);o=n.alpha}l&&s&&(f=1)}if(this._type=s||"rgb",!a)for(this._components=a=[],_=0,v=(x=i[this._type]).length;_<v;_++){var w;null!=(w=x[_].call(this,h&&h[_]))&&(a[_]=w)}return this._components=a,this._properties=e[this._type],this._alpha=o,l&&(this.__read=f),this},set:"#initialize",_serialize:function(t,e){var i=this.getComponents();return c.serialize(/^(gray|rgb)$/.test(this._type)?i:[this._type].concat(i),t,!0,e)},_changed:function(){this._canvasStyle=null,this._owner&&(this._setter?this._owner[this._setter](this):this._owner._changed(129))},_convert:function(t){var e;return this._type===t?this._components.slice():(e=a[this._type+"-"+t])?e.apply(this,this._components):a["rgb-"+t].apply(this,a[this._type+"-rgb"].apply(this,this._components))},convert:function(t){return new G(t,this._convert(t),this._alpha)},getType:function(){return this._type},setType:function(t){this._components=this._convert(t),this._properties=e[t],this._type=t},getComponents:function(){var t=this._components.slice();return null!=this._alpha&&t.push(this._alpha),t},getAlpha:function(){return null!=this._alpha?this._alpha:1},setAlpha:function(t){this._alpha=null==t?null:Math.min(Math.max(t,0),1),this._changed()},hasAlpha:function(){return null!=this._alpha},equals:function(t){var e=c.isPlainValue(t,!0)?G.read(arguments):t;return e===this||e&&this._class===e._class&&this._type===e._type&&this.getAlpha()===e.getAlpha()&&c.equals(this._components,e._components)||!1},toString:function(){for(var t=this._properties,e=[],i="gradient"===this._type,n=g.instance,r=0,s=t.length;r<s;r++){var a=this._components[r];null!=a&&e.push(t[r]+": "+(i?a:n.number(a)))}return null!=this._alpha&&e.push("alpha: "+n.number(this._alpha)),"{ "+e.join(", ")+" }"},toCSS:function(t){var e=this._convert("rgb"),i=t||null==this._alpha?1:this._alpha;function n(t){return Math.round(255*(t<0?0:t>1?1:t))}return e=[n(e[0]),n(e[1]),n(e[2])],i<1&&e.push(i<0?0:i),t?"#"+((1<<24)+(e[0]<<16)+(e[1]<<8)+e[2]).toString(16).slice(1):(4==e.length?"rgba(":"rgb(")+e.join(",")+")"},toCanvasStyle:function(t,e){if(this._canvasStyle)return this._canvasStyle;if("gradient"!==this._type)return this._canvasStyle=this.toCSS();var i,n=this._components,r=n[0],s=r._stops,a=n[1],o=n[2],h=n[3],u=e&&e.inverted();if(u&&(a=u._transformPoint(a),o=u._transformPoint(o),h&&(h=u._transformPoint(h))),r._radial){var c=o.getDistance(a);if(h){var l=h.subtract(a);l.getLength()>c&&(h=a.add(l.normalize(c-.1)))}var f=h||a;i=t.createRadialGradient(f.x,f.y,0,a.x,a.y,c)}else i=t.createLinearGradient(a.x,a.y,o.x,o.y);for(var d=0,p=s.length;d<p;d++){var g=s[d],_=g._offset;i.addColorStop(null==_?d/(p-1):_,g._color.toCanvasStyle())}return this._canvasStyle=i},transform:function(t){if("gradient"===this._type){for(var e=this._components,i=1,n=e.length;i<n;i++){var r=e[i];t._transformPoint(r,r,!0)}this._changed()}},statics:{_types:e,random:function(){var t=Math.random;return new G(t(),t(),t())},_setOwner:function(t,e,i){return t&&(t._owner&&e&&t._owner!==e&&(t=t.clone()),!t._owner^!e&&(t._owner=e||null,t._setter=i||null)),t}}})},new function(){return c.each({add:function(t,e){return t+e},subtract:function(t,e){return t-e},multiply:function(t,e){return t*e},divide:function(t,e){return t/e}},(function(t,e){this[e]=function(e){e=G.read(arguments);for(var i=this._type,n=this._components,r=e._convert(i),s=0,a=n.length;s<a;s++)r[s]=t(n[s],r[s]);return new G(i,r,null!=this._alpha?t(this._alpha,e.getAlpha()):null)}}),{})}),Z=c.extend({_class:"Gradient",initialize:function(t,e){this._id=v.get(),t&&c.isPlainObject(t)&&(this.set(t),t=e=null),null==this._stops&&this.setStops(t||["white","black"]),null==this._radial&&this.setRadial("string"==typeof e&&"radial"===e||e||!1)},_serialize:function(t,e){return e.add(this,(function(){return c.serialize([this._stops,this._radial],t,!0,e)}))},_changed:function(){for(var t=0,e=this._owners&&this._owners.length;t<e;t++)this._owners[t]._changed()},_addOwner:function(t){this._owners||(this._owners=[]),this._owners.push(t)},_removeOwner:function(t){var e=this._owners?this._owners.indexOf(t):-1;-1!=e&&(this._owners.splice(e,1),this._owners.length||(this._owners=o))},clone:function(){for(var t=[],e=0,i=this._stops.length;e<i;e++)t[e]=this._stops[e].clone();return new Z(t,this._radial)},getStops:function(){return this._stops},setStops:function(t){if(t.length<2)throw new Error("Gradient stop list needs to contain at least two stops.");var e=this._stops;if(e)for(var i=0,n=e.length;i<n;i++)e[i]._owner=o;for(i=0,n=(e=this._stops=$.readList(t,0,{clone:!0})).length;i<n;i++)e[i]._owner=this;this._changed()},getRadial:function(){return this._radial},setRadial:function(t){this._radial=t,this._changed()},equals:function(t){if(t===this)return!0;if(t&&this._class===t._class){var e=this._stops,i=t._stops,n=e.length;if(n===i.length){for(var r=0;r<n;r++)if(!e[r].equals(i[r]))return!1;return!0}}return!1}}),$=c.extend({_class:"GradientStop",initialize:function(t,e){var i=t,n=e;"object"==typeof t&&e===o&&(Array.isArray(t)&&"number"!=typeof t[0]?(i=t[0],n=t[1]):("color"in t||"offset"in t||"rampPoint"in t)&&(i=t.color,n=t.offset||t.rampPoint||0)),this.setColor(i),this.setOffset(n)},clone:function(){return new $(this._color.clone(),this._offset)},_serialize:function(t,e){var i=this._color,n=this._offset;return c.serialize(null==n?[i]:[i,n],t,!0,e)},_changed:function(){this._owner&&this._owner._changed(129)},getOffset:function(){return this._offset},setOffset:function(t){this._offset=t,this._changed()},getRampPoint:"#getOffset",setRampPoint:"#setOffset",getColor:function(){return this._color},setColor:function(){G._setOwner(this._color,null),this._color=G._setOwner(G.read(arguments,0),this,"setColor"),this._changed()},equals:function(t){return t===this||t&&this._class===t._class&&this._color.equals(t._color)&&this._offset==t._offset||!1}}),Q=c.extend(new function(){var t={fillColor:null,fillRule:"nonzero",strokeColor:null,strokeWidth:1,strokeCap:"butt",strokeJoin:"miter",strokeScaling:!0,miterLimit:10,dashOffset:0,dashArray:[],shadowColor:null,shadowBlur:0,shadowOffset:new m,selectedColor:null},e=c.set({},t,{fontFamily:"sans-serif",fontWeight:"normal",fontSize:12,leading:null,justification:"left"}),i=c.set({},e,{fillColor:new G}),n={strokeWidth:193,strokeCap:193,strokeJoin:193,strokeScaling:201,miterLimit:193,fontFamily:9,fontWeight:9,fontSize:9,font:9,leading:9,justification:9},r={beans:!0},s={_class:"Style",beans:!0,initialize:function(n,r,s){this._values={},this._owner=r,this._project=r&&r._project||s||ft.project,this._defaults=!r||r instanceof P?e:r instanceof H?i:t,n&&this.set(n)}};return c.each(e,(function(t,e){var i=/Color$/.test(e),a="shadowOffset"===e,h=c.capitalize(e),u=n[e],l="set"+h,f="get"+h;s[l]=function(t){var n=this._owner,r=n&&n._children,s=r&&r.length>0&&!(n instanceof j);if(s)for(var a=0,o=r.length;a<o;a++)r[a]._style[l](t);if(("selectedColor"===e||!s)&&e in this._defaults){var h=this._values[e];h!==t&&(i&&(h&&(G._setOwner(h,null),h._canvasStyle=null),t&&t.constructor===G&&(t=G._setOwner(t,n,s&&l))),this._values[e]=t,n&&n._changed(u||129))}},s[f]=function(t){var n=this._owner,r=n&&n._children,s=r&&r.length>0&&!(n instanceof j);if(s&&!t)for(var h=0,u=r.length;h<u;h++){var d=r[h]._style[f]();if(h){if(!c.equals(p,d))return o}else p=d}else if(e in this._defaults){var p;if((p=this._values[e])===o)(p=this._defaults[e])&&p.clone&&(p=p.clone());else{var g=i?G:a?m:null;!g||p&&p.constructor===g||(this._values[e]=p=g.read([p],0,{readNull:!0,clone:!0}))}}return p&&i&&(p=G._setOwner(p,n,s&&l)),p},r[f]=function(t){return this._style[f](t)},r[l]=function(t){this._style[l](t)}})),c.each({Font:"FontFamily",WindingRule:"FillRule"},(function(t,e){var i="get"+e,n="set"+e;s[i]=r[i]="#get"+t,s[n]=r[n]="#set"+t})),I.inject(r),s},{set:function(t){var e=t instanceof Q,i=e?t._values:t;if(i)for(var n in i)if(n in this._defaults){var r=i[n];this[n]=r&&e&&r.clone?r.clone():r}},equals:function(t){function e(t,e,i){var n=t._values,r=e._values,s=e._defaults;for(var a in n){var h=n[a],u=r[a];if(!(i&&a in r||c.equals(h,u===o?s[a]:u)))return!1}return!0}return t===this||t&&this._class===t._class&&e(this,t)&&e(t,this,!0)||!1},_dispose:function(){var t;(t=this.getFillColor())&&(t._canvasStyle=null),(t=this.getStrokeColor())&&(t._canvasStyle=null),(t=this.getShadowColor())&&(t._canvasStyle=null)},hasFill:function(){var t=this.getFillColor();return!!t&&t.alpha>0},hasStroke:function(){var t=this.getStrokeColor();return!!t&&t.alpha>0&&this.getStrokeWidth()>0},hasShadow:function(){var t=this.getShadowColor();return!!t&&t.alpha>0&&(this.getShadowBlur()>0||!this.getShadowOffset().isZero())},getView:function(){return this._project._view},getFontStyle:function(){var t=this.getFontSize();return this.getFontWeight()+" "+t+(/[a-z]/i.test(t+"")?" ":"px ")+this.getFontFamily()},getFont:"#getFontFamily",setFont:"#setFontFamily",getLeading:function t(){var e=t.base.call(this),i=this.getFontSize();return/pt|em|%|px/.test(i)&&(i=this.getView().getPixelSize(i)),null!=e?e:1.2*i}}),K=new function(){function t(t,e,i,n){for(var r=["","webkit","moz","Moz","ms","o"],s=e[0].toUpperCase()+e.substring(1),a=0;a<6;a++){var o=r[a],h=o?o+s:e;if(h in t){if(!i)return t[h];t[h]=n;break}}}return{getStyles:function(t){var e=t&&9!==t.nodeType?t.ownerDocument:t,i=e&&e.defaultView;return i&&i.getComputedStyle(t,"")},getBounds:function(t,e){var i,n=t.ownerDocument,r=n.body,s=n.documentElement;try{i=t.getBoundingClientRect()}catch(t){i={left:0,top:0,width:0,height:0}}var a=i.left-(s.clientLeft||r.clientLeft||0),o=i.top-(s.clientTop||r.clientTop||0);if(!e){var h=n.defaultView;a+=h.pageXOffset||s.scrollLeft||r.scrollLeft,o+=h.pageYOffset||s.scrollTop||r.scrollTop}return new b(a,o,i.width,i.height)},getViewportBounds:function(t){var e=t.ownerDocument,i=e.defaultView,n=e.documentElement;return new b(0,0,i.innerWidth||n.clientWidth,i.innerHeight||n.clientHeight)},getOffset:function(t,e){return K.getBounds(t,e).getPoint()},getSize:function(t){return K.getBounds(t,!0).getSize()},isInvisible:function(t){return K.getSize(t).equals(new x(0,0))},isInView:function(t){return!K.isInvisible(t)&&K.getViewportBounds(t).intersects(K.getBounds(t,!0))},isInserted:function(t){return u.body.contains(t)},getPrefixed:function(e,i){return e&&t(e,i)},setPrefixed:function(e,i,n){if("object"==typeof i)for(var r in i)t(e,r,!0,i[r]);else t(e,i,!0,n)}}},J={add:function(t,e){if(t)for(var i in e)for(var n=e[i],r=i.split(/[\s,]+/g),s=0,a=r.length;s<a;s++){var o=r[s],h=t===u&&("touchstart"===o||"touchmove"===o)&&{passive:!1};t.addEventListener(o,n,h)}},remove:function(t,e){if(t)for(var i in e)for(var n=e[i],r=i.split(/[\s,]+/g),s=0,a=r.length;s<a;s++)t.removeEventListener(r[s],n,!1)},getPoint:function(t){var e=t.targetTouches?t.targetTouches.length?t.targetTouches[0]:t.changedTouches[0]:t;return new m(e.pageX||e.clientX+u.documentElement.scrollLeft,e.pageY||e.clientY+u.documentElement.scrollTop)},getTarget:function(t){return t.target||t.srcElement},getRelatedTarget:function(t){return t.relatedTarget||t.toElement},getOffset:function(t,e){return J.getPoint(t).subtract(K.getOffset(e||J.getTarget(t)))}};J.requestAnimationFrame=new function(){var t,e=K.getPrefixed(h,"requestAnimationFrame"),i=!1,n=[];function r(){var t=n;n=[];for(var s=0,a=t.length;s<a;s++)t[s]();(i=e&&n.length)&&e(r)}return function(s){n.push(s),e?i||(e(r),i=!0):t||(t=setInterval(r,1e3/60))}};var X=c.extend(l,{_class:"View",initialize:function t(e,i){function n(t){return i[t]||parseInt(i.getAttribute(t),10)}function r(){var t=K.getSize(i);return t.isNaN()||t.isZero()?new x(n("width"),n("height")):t}var s;if(h&&i){this._id=i.getAttribute("id"),null==this._id&&i.setAttribute("id",this._id="paper-view-"+t._id++),J.add(i,this._viewEvents);var a="none";if(K.setPrefixed(i.style,{userDrag:a,userSelect:a,touchCallout:a,contentZooming:a,tapHighlightColor:"rgba(0,0,0,0)"}),f.hasAttribute(i,"resize")){var o=this;J.add(h,this._windowEvents={resize:function(){o.setViewSize(r())}})}if(s=r(),f.hasAttribute(i,"stats")&&"undefined"!=typeof Stats){this._stats=new Stats;var c=this._stats.domElement,l=c.style,d=K.getOffset(i);l.position="absolute",l.left=d.x+"px",l.top=d.y+"px",u.body.appendChild(c)}}else s=new x(i),i=null;this._project=e,this._scope=e._scope,this._element=i,this._pixelRatio||(this._pixelRatio=h&&h.devicePixelRatio||1),this._setElementSize(s.width,s.height),this._viewSize=s,t._views.push(this),t._viewsById[this._id]=this,(this._matrix=new S)._owner=this,t._focused||(t._focused=this),this._frameItems={},this._frameItemCount=0,this._itemEvents={native:{},virtual:{}},this._autoUpdate=!ft.agent.node,this._needsUpdate=!1},remove:function(){if(!this._project)return!1;X._focused===this&&(X._focused=null),X._views.splice(X._views.indexOf(this),1),delete X._viewsById[this._id];var t=this._project;return t._view===this&&(t._view=null),J.remove(this._element,this._viewEvents),J.remove(h,this._windowEvents),this._element=this._project=null,this.off("frame"),this._animate=!1,this._frameItems={},!0},_events:c.each(I._itemHandlers.concat(["onResize","onKeyDown","onKeyUp"]),(function(t){this[t]={}}),{onFrame:{install:function(){this.play()},uninstall:function(){this.pause()}}}),_animate:!1,_time:0,_count:0,getAutoUpdate:function(){return this._autoUpdate},setAutoUpdate:function(t){this._autoUpdate=t,t&&this.requestUpdate()},update:function(){},draw:function(){this.update()},requestUpdate:function(){if(!this._requested){var t=this;J.requestAnimationFrame((function(){if(t._requested=!1,t._animate){t.requestUpdate();var e=t._element;K.getPrefixed(u,"hidden")&&"true"!==f.getAttribute(e,"keepalive")||!K.isInView(e)||t._handleFrame()}t._autoUpdate&&t.update()})),this._requested=!0}},play:function(){this._animate=!0,this.requestUpdate()},pause:function(){this._animate=!1},_handleFrame:function(){ft=this._scope;var t=Date.now()/1e3,e=this._last?t-this._last:0;this._last=t,this.emit("frame",new c({delta:e,time:this._time+=e,count:this._count++})),this._stats&&this._stats.update()},_animateItem:function(t,e){var i=this._frameItems;e?(i[t._id]={item:t,time:0,count:0},1==++this._frameItemCount&&this.on("frame",this._handleFrameItems)):(delete i[t._id],0==--this._frameItemCount&&this.off("frame",this._handleFrameItems))},_handleFrameItems:function(t){for(var e in this._frameItems){var i=this._frameItems[e];i.item.emit("frame",new c(t,{time:i.time+=t.delta,count:i.count++}))}},_changed:function(){this._project._changed(4097),this._bounds=this._decomposed=o},getElement:function(){return this._element},getPixelRatio:function(){return this._pixelRatio},getResolution:function(){return 72*this._pixelRatio},getViewSize:function(){var t=this._viewSize;return new w(t.width,t.height,this,"setViewSize")},setViewSize:function(){var t=x.read(arguments),e=t.subtract(this._viewSize);e.isZero()||(this._setElementSize(t.width,t.height),this._viewSize.set(t),this._changed(),this.emit("resize",{size:t,delta:e}),this._autoUpdate&&this.update())},_setElementSize:function(t,e){var i=this._element;i&&(i.width!==t&&(i.width=t),i.height!==e&&(i.height=e))},getBounds:function(){return this._bounds||(this._bounds=this._matrix.inverted()._transformBounds(new b(new m,this._viewSize))),this._bounds},getSize:function(){return this.getBounds().getSize()},isVisible:function(){return K.isInView(this._element)},isInserted:function(){return K.isInserted(this._element)},getPixelSize:function(t){var e,i=this._element;if(i){var n=i.parentNode,r=u.createElement("div");r.style.fontSize=t,n.appendChild(r),e=parseFloat(K.getStyles(r).fontSize),n.removeChild(r)}else e=parseFloat(e);return e},getTextWidth:function(t,e){return 0}},c.each(["rotate","scale","shear","skew"],(function(t){var e="rotate"===t;this[t]=function(){var i=arguments,n=(e?c:m).read(i),r=m.read(i,0,{readNull:!0});return this.transform((new S)[t](n,r||this.getCenter(!0)))}}),{_decompose:function(){return this._decomposed||(this._decomposed=this._matrix.decompose())},translate:function(){var t=new S;return this.transform(t.translate.apply(t,arguments))},getCenter:function(){return this.getBounds().getCenter()},setCenter:function(){var t=m.read(arguments);this.translate(this.getCenter().subtract(t))},getZoom:function(){var t=this._decompose().scaling;return(t.x+t.y)/2},setZoom:function(t){this.transform((new S).scale(t/this.getZoom(),this.getCenter()))},getRotation:function(){return this._decompose().rotation},setRotation:function(t){var e=this.getRotation();null!=e&&null!=t&&this.rotate(t-e)},getScaling:function(){var t=this._decompose().scaling;return new y(t.x,t.y,this,"setScaling")},setScaling:function(){var t=this.getScaling(),e=m.read(arguments,0,{clone:!0,readNull:!0});t&&e&&this.scale(e.x/t.x,e.y/t.y)},getMatrix:function(){return this._matrix},setMatrix:function(){var t=this._matrix;t.set.apply(t,arguments)},transform:function(t){this._matrix.append(t)},scrollBy:function(){this.translate(m.read(arguments).negate())}}),{projectToView:function(){return this._matrix._transformPoint(m.read(arguments))},viewToProject:function(){return this._matrix._inverseTransform(m.read(arguments))},getEventPoint:function(t){return this.viewToProject(J.getOffset(t,this._element))}},{statics:{_views:[],_viewsById:{},_id:0,create:function(t,e){return u&&"string"==typeof e&&(e=u.getElementById(e)),new(h?Y:X)(t,e)}}},new function(){if(h){var t,e,i,n,r,s=!1,a=!1,o=h.navigator;o.pointerEnabled||o.msPointerEnabled?(i="pointerdown MSPointerDown",n="pointermove MSPointerMove",r="pointerup pointercancel MSPointerUp MSPointerCancel"):(i="touchstart",n="touchmove",r="touchend touchcancel","ontouchstart"in h&&o.userAgent.match(/mobile|tablet|ip(ad|hone|od)|android|silk/i)||(i+=" mousedown",n+=" mousemove",r+=" mouseup"));var c={},l={mouseout:function(t){var e=X._focused,i=J.getRelatedTarget(t);if(e&&(!i||"HTML"===i.nodeName)){var n=J.getOffset(t,e._element),r=n.x,s=Math.abs,a=s(r),o=a-(1<<25);n.x=s(o)<a?o*(r<0?-1:1):r,I(e,t,e.viewToProject(n))}},scroll:A};c[i]=function(t){var e=X._focused=k(t);s||(s=!0,e._handleMouseEvent("mousedown",t))},l[n]=function(i){var n=X._focused;if(!a){var r=k(i);r?n!==r&&(n&&I(n,i),t||(t=n),n=X._focused=e=r):e&&e===n&&(t&&!t.isInserted()&&(t=null),n=X._focused=t,t=null,A())}n&&I(n,i)},l[i]=function(){a=!0},l[r]=function(t){var e=X._focused;e&&s&&e._handleMouseEvent("mouseup",t),a=s=!1},J.add(u,l),J.add(h,{load:A});var f,d,p,g,_,v,m,y,x=!1,w=!1,b={doubleclick:"click",mousedrag:"mousemove"},C=!1,S={mousedown:{mousedown:1,mousedrag:1,click:1,doubleclick:1},mouseup:{mouseup:1,mousedrag:1,click:1,doubleclick:1},mousemove:{mousedrag:1,mousemove:1,mouseenter:1,mouseleave:1}};return{_viewEvents:c,_handleMouseEvent:function(t,e,i){var n=this._itemEvents,r=n.native[t],a="mousemove"===t,o=this._scope.tool,h=this;function u(t){return n.virtual[t]||h.responds(t)||o&&o.responds(t)}a&&s&&u("mousedrag")&&(t="mousedrag"),i||(i=this.getEventPoint(e));var c=this.getBounds().contains(i),l=r&&c&&h._project.hitTest(i,{tolerance:0,fill:!0,stroke:!0}),b=l&&l.item||null,S=!1,k={};if(k[t.substr(5)]=!0,r&&b!==g&&(g&&P(g,null,"mouseleave",e,i),b&&P(b,null,"mouseenter",e,i),g=b),C^c&&(P(this,null,c?"mouseenter":"mouseleave",e,i),S=!0),!c&&!k.drag||i.equals(d)||(E(this,b,a?t:"mousemove",e,i,d),S=!0),C=c,k.down&&c||k.up&&f){if(E(this,b,t,e,i,f),k.down){if(y=b===v&&Date.now()-m<300,p=v=b,!w&&b){for(var A=b;A&&!A.responds("mousedrag");)A=A._parent;A&&(_=b)}f=i}else k.up&&(w||b!==p||(m=Date.now(),E(this,b,y?"doubleclick":"click",e,i,f),y=!1),p=_=null);C=!1,S=!0}d=i,S&&o&&(x=o._handleMouseEvent(t,e,i,k)||x),!1!==e.cancelable&&(x&&!k.move||k.down&&u("mouseup"))&&e.preventDefault()},_handleKeyEvent:function(t,e,i,n){var r,s=this._scope,a=s.tool;function o(a){a.responds(t)&&(ft=s,a.emit(t,r=r||new et(t,e,i,n)))}this.isVisible()&&(o(this),a&&a.responds(t)&&o(a))},_countItemEvent:function(t,e){var i=this._itemEvents,n=i.native,r=i.virtual;for(var s in S)n[s]=(n[s]||0)+(S[s][t]||0)*e;r[t]=(r[t]||0)+e},statics:{updateFocus:A,_resetState:function(){s=a=x=C=!1,t=e=f=d=p=g=_=v=m=y=null}}}}function k(t){var e=J.getTarget(t);return e.getAttribute&&X._viewsById[e.getAttribute("id")]}function A(){var t=X._focused;if(!t||!t.isVisible())for(var i=0,n=X._views.length;i<n;i++)if((t=X._views[i]).isVisible()){X._focused=e=t;break}}function I(t,e,i){t._handleMouseEvent("mousemove",e,i)}function P(t,e,i,n,r,s,a){var o,h=!1;function u(t,i){if(t.responds(i)){if(o||(o=new nt(i,n,r,e||t,s?r.subtract(s):null)),t.emit(i,o)&&(x=!0,o.prevented&&(w=!0),o.stopped))return h=!0}else{var a=b[i];if(a)return u(t,a)}}for(;t&&t!==a&&!u(t,i);)t=t._parent;return h}function E(t,e,i,n,r,s){return t._project.removeOn(i),w=x=!1,_&&P(_,null,i,n,r,s)||e&&e!==_&&!e.isDescendant(_)&&P(e,null,"mousedrag"===i?"mousemove":i,n,r,s,_)||P(t,_||e||t,i,n,r,s)}}),Y=X.extend({_class:"CanvasView",initialize:function(t,e){if(!(e instanceof h.HTMLCanvasElement)){var i=x.read(arguments,1);if(i.isZero())throw new Error("Cannot create CanvasView with the provided argument: "+c.slice(arguments,1));e=ht.getCanvas(i)}var n=this._context=e.getContext("2d");if(n.save(),this._pixelRatio=1,!/^off|false$/.test(f.getAttribute(e,"hidpi"))){var r=h.devicePixelRatio||1,s=K.getPrefixed(n,"backingStorePixelRatio")||1;this._pixelRatio=r/s}X.call(this,t,e),this._needsUpdate=!0},remove:function t(){return this._context.restore(),t.base.call(this)},_setElementSize:function t(e,i){var n=this._pixelRatio;if(t.base.call(this,e*n,i*n),1!==n){var r=this._element,s=this._context;if(!f.hasAttribute(r,"resize")){var a=r.style;a.width=e+"px",a.height=i+"px"}s.restore(),s.save(),s.scale(n,n)}},getContext:function(){return this._context},getPixelSize:function t(e){var i,n=ft.agent;if(n&&n.firefox)i=t.base.call(this,e);else{var r=this._context,s=r.font;r.font=e+" serif",i=parseFloat(r.font),r.font=s}return i},getTextWidth:function(t,e){var i=this._context,n=i.font,r=0;i.font=t;for(var s=0,a=e.length;s<a;s++)r=Math.max(r,i.measureText(e[s]).width);return i.font=n,r},update:function(){if(!this._needsUpdate)return!1;var t=this._project,e=this._context,i=this._viewSize;return e.clearRect(0,0,i.width+1,i.height+1),t&&t.draw(e,this._matrix,this._pixelRatio),this._needsUpdate=!1,!0}}),tt=c.extend({_class:"Event",initialize:function(t){this.event=t,this.type=t&&t.type},prevented:!1,stopped:!1,preventDefault:function(){this.prevented=!0,this.event.preventDefault()},stopPropagation:function(){this.stopped=!0,this.event.stopPropagation()},stop:function(){this.stopPropagation(),this.preventDefault()},getTimeStamp:function(){return this.event.timeStamp},getModifiers:function(){return it.modifiers}}),et=tt.extend({_class:"KeyEvent",initialize:function(t,e,i,n){this.type=t,this.event=e,this.key=i,this.character=n},toString:function(){return"{ type: '"+this.type+"', key: '"+this.key+"', character: '"+this.character+"', modifiers: "+this.getModifiers()+" }"}}),it=new function(){var t,e,i={"\t":"tab"," ":"space","\b":"backspace","":"delete",Spacebar:"space",Del:"delete",Win:"meta",Esc:"escape"},n={tab:"\t",space:" ",enter:"\r"},r={},s={},a=new c({shift:!1,control:!1,alt:!1,meta:!1,capsLock:!1,space:!1}).inject({option:{get:function(){return this.alt}},command:{get:function(){var t=ft&&ft.agent;return t&&t.mac?this.meta:this.control}}});function l(t){var e=t.key||t.keyIdentifier;return e=/^U\+/.test(e)?String.fromCharCode(parseInt(e.substr(2),16)):/^Arrow[A-Z]/.test(e)?e.substr(5):"Unidentified"===e||e===o?String.fromCharCode(t.keyCode):e,i[e]||(e.length>1?c.hyphenate(e):e.toLowerCase())}function f(e,i,n,o){var h,u=X._focused;if(r[i]=e,e?s[i]=n:delete s[i],i.length>1&&(h=c.camelize(i))in a){a[h]=e;var l=ft&&ft.agent;if("meta"===h&&l&&l.mac)if(e)t={};else{for(var d in t)d in s&&f(!1,d,t[d],o);t=null}}else e&&t&&(t[i]=n);u&&u._handleKeyEvent(e?"keydown":"keyup",o,i,n)}return J.add(u,{keydown:function(t){var i=l(t),r=ft&&ft.agent;i.length>1||r&&r.chrome&&(t.altKey||r.mac&&t.metaKey||!r.mac&&t.ctrlKey)?f(!0,i,n[i]||(i.length>1?"":i),t):e=i},keypress:function(t){if(e){var i=l(t),n=t.charCode,r=n>=32?String.fromCharCode(n):i.length>1?"":i;i!==e&&(i=r.toLowerCase()),f(!0,i,r,t),e=null}},keyup:function(t){var e=l(t);e in s&&f(!1,e,s[e],t)}}),J.add(h,{blur:function(t){for(var e in s)f(!1,e,s[e],t)}}),{modifiers:a,isDown:function(t){return!!r[t]}}},nt=tt.extend({_class:"MouseEvent",initialize:function(t,e,i,n,r){this.type=t,this.event=e,this.point=i,this.target=n,this.delta=r},toString:function(){return"{ type: '"+this.type+"', point: "+this.point+", target: "+this.target+(this.delta?", delta: "+this.delta:"")+", modifiers: "+this.getModifiers()+" }"}}),rt=tt.extend({_class:"ToolEvent",_item:null,initialize:function(t,e,i){this.tool=t,this.type=e,this.event=i},_choosePoint:function(t,e){return t||(e?e.clone():null)},getPoint:function(){return this._choosePoint(this._point,this.tool._point)},setPoint:function(t){this._point=t},getLastPoint:function(){return this._choosePoint(this._lastPoint,this.tool._lastPoint)},setLastPoint:function(t){this._lastPoint=t},getDownPoint:function(){return this._choosePoint(this._downPoint,this.tool._downPoint)},setDownPoint:function(t){this._downPoint=t},getMiddlePoint:function(){return!this._middlePoint&&this.tool._lastPoint?this.tool._point.add(this.tool._lastPoint).divide(2):this._middlePoint},setMiddlePoint:function(t){this._middlePoint=t},getDelta:function(){return!this._delta&&this.tool._lastPoint?this.tool._point.subtract(this.tool._lastPoint):this._delta},setDelta:function(t){this._delta=t},getCount:function(){return this.tool[/^mouse(down|up)$/.test(this.type)?"_downCount":"_moveCount"]},setCount:function(t){this.tool[/^mouse(down|up)$/.test(this.type)?"downCount":"count"]=t},getItem:function(){if(!this._item){var t=this.tool._scope.project.hitTest(this.getPoint());if(t){for(var e=t.item,i=e._parent;/^(Group|CompoundPath)$/.test(i._class);)e=i,i=i._parent;this._item=e}}return this._item},setItem:function(t){this._item=t},toString:function(){return"{ type: "+this.type+", point: "+this.getPoint()+", count: "+this.getCount()+", modifiers: "+this.getModifiers()+" }"}}),st=d.extend({_class:"Tool",_list:"tools",_reference:"tool",_events:["onMouseDown","onMouseUp","onMouseDrag","onMouseMove","onActivate","onDeactivate","onEditOptions","onKeyDown","onKeyUp"],initialize:function(t){d.call(this),this._moveCount=-1,this._downCount=-1,this.set(t)},getMinDistance:function(){return this._minDistance},setMinDistance:function(t){this._minDistance=t,null!=t&&null!=this._maxDistance&&t>this._maxDistance&&(this._maxDistance=t)},getMaxDistance:function(){return this._maxDistance},setMaxDistance:function(t){this._maxDistance=t,null!=this._minDistance&&null!=t&&t<this._minDistance&&(this._minDistance=t)},getFixedDistance:function(){return this._minDistance==this._maxDistance?this._minDistance:null},setFixedDistance:function(t){this._minDistance=this._maxDistance=t},_handleMouseEvent:function(t,e,i,n){ft=this._scope,n.drag&&!this.responds(t)&&(t="mousemove");var r=n.move||n.drag,s=this.responds(t),a=this.minDistance,o=this.maxDistance,h=!1,u=this;function c(t,e){var s=i,a=r?u._point:u._downPoint||s;if(r){if(u._moveCount>=0&&s.equals(a))return!1;if(a&&(null!=t||null!=e)){var o=s.subtract(a),h=o.getLength();if(h<(t||0))return!1;e&&(s=a.add(o.normalize(Math.min(h,e))))}u._moveCount++}return u._point=s,u._lastPoint=a||s,n.down&&(u._moveCount=-1,u._downPoint=s,u._downCount++),!0}function l(){s&&(h=u.emit(t,new rt(u,t,e))||h)}if(n.down)c(),l();else if(n.up)c(null,o),l();else if(s)for(;c(a,o);)l();return h}}),at=c.extend(l,{_class:"Tween",statics:{easings:{linear:function(t){return t},easeInQuad:function(t){return t*t},easeOutQuad:function(t){return t*(2-t)},easeInOutQuad:function(t){return t<.5?2*t*t:2*(2-t)*t-1},easeInCubic:function(t){return t*t*t},easeOutCubic:function(t){return--t*t*t+1},easeInOutCubic:function(t){return t<.5?4*t*t*t:(t-1)*(2*t-2)*(2*t-2)+1},easeInQuart:function(t){return t*t*t*t},easeOutQuart:function(t){return 1- --t*t*t*t},easeInOutQuart:function(t){return t<.5?8*t*t*t*t:1-8*--t*t*t*t},easeInQuint:function(t){return t*t*t*t*t},easeOutQuint:function(t){return 1+--t*t*t*t*t},easeInOutQuint:function(t){return t<.5?16*t*t*t*t*t:1+16*--t*t*t*t*t}}},initialize:function t(e,i,n,r,s,a){this.object=e;var o=typeof s,h="function"===o;this.type=h?o:"string"===o?s:"linear",this.easing=h?s:t.easings[this.type],this.duration=r,this.running=!1,this._then=null,this._startTime=null;var u=i||n;this._keys=u?Object.keys(u):[],this._parsedKeys=this._parseKeys(this._keys),this._from=u&&this._getState(i),this._to=u&&this._getState(n),!1!==a&&this.start()},then:function(t){return this._then=t,this},start:function(){return this._startTime=null,this.running=!0,this},stop:function(){return this.running=!1,this},update:function(t){if(this.running){t>=1&&(t=1,this.running=!1);for(var e=this.easing(t),i=this._keys,n=function(i){return"function"==typeof i?i(e,t):i},r=0,s=i&&i.length;r<s;r++){var a=i[r],o=n(this._from[a]),h=n(this._to[a]),u=o&&h&&o.__add&&h.__add?h.__subtract(o).__multiply(e).__add(o):(h-o)*e+o;this._setProperty(this._parsedKeys[a],u)}this.responds("update")&&this.emit("update",new c({progress:t,factor:e})),!this.running&&this._then&&this._then(this.object)}return this},_events:{onUpdate:{}},_handleFrame:function(t){var e=this._startTime,i=e?(t-e)/this.duration:0;e||(this._startTime=t),this.update(i)},_getState:function(t){for(var e=this._keys,i={},n=0,r=e.length;n<r;n++){var s,a=e[n],o=this._parsedKeys[a],h=this._getProperty(o);if(t){var u=this._resolveValue(h,t[a]);this._setProperty(o,u),s=(s=this._getProperty(o))&&s.clone?s.clone():s,this._setProperty(o,h)}else s=h&&h.clone?h.clone():h;i[a]=s}return i},_resolveValue:function(t,e){if(e){if(Array.isArray(e)&&2===e.length){var i=e[0];return i&&i.match&&i.match(/^[+\-\*\/]=/)?this._calculate(t,i[0],e[1]):e}if("string"==typeof e){var n=e.match(/^[+\-*/]=(.*)/);if(n){var r=JSON.parse(n[1].replace(/(['"])?([a-zA-Z0-9_]+)(['"])?:/g,'"$2": '));return this._calculate(t,e[0],r)}}}return e},_calculate:function(t,e,i){return ft.PaperScript.calculateBinary(t,e,i)},_parseKeys:function(t){for(var e={},i=0,n=t.length;i<n;i++){var r=t[i],s=r.replace(/\.([^.]*)/g,"/$1").replace(/\[['"]?([^'"\]]*)['"]?\]/g,"/$1");e[r]=s.split("/")}return e},_getProperty:function(t,e){for(var i=this.object,n=0,r=t.length-(e||0);n<r&&i;n++)i=i[t[n]];return i},_setProperty:function(t,e){var i=this._getProperty(t,1);i&&(i[t[t.length-1]]=e)}}),ot=function(t){var e=new a.XMLHttpRequest;return e.open((t.method||"get").toUpperCase(),t.url,c.pick(t.async,!0)),t.mimeType&&e.overrideMimeType(t.mimeType),e.onload=function(){var i=e.status;0===i||200===i?t.onLoad&&t.onLoad.call(e,e.responseText):e.onerror()},e.onerror=function(){var i=e.status,n='Could not load "'+t.url+'" (Status: '+i+")";if(!t.onError)throw new Error(n);t.onError(n,i)},e.send(null)},ht=c.exports.CanvasProvider={canvases:[],getCanvas:function(t,e){if(!h)return null;var i,n=!0;"object"==typeof t&&(e=t.height,t=t.width),this.canvases.length?i=this.canvases.pop():(i=u.createElement("canvas"),n=!1);var r=i.getContext("2d");if(!r)throw new Error("Canvas "+i+" is unable to provide a 2D context.");return i.width===t&&i.height===e?n&&r.clearRect(0,0,t+1,e+1):(i.width=t,i.height=e),r.save(),i},getContext:function(t,e){var i=this.getCanvas(t,e);return i?i.getContext("2d"):null},release:function(t){var e=t&&t.canvas?t.canvas:t;e&&e.getContext&&(e.getContext("2d").restore(),this.canvases.push(e))}},ut=new function(){var t,e,i,n,r,s,a,o,h,u,l,f=Math.min,d=Math.max,p=Math.abs;function g(t,e,i){return.2989*t+.587*e+.114*i}function _(t,e,i,n){var r=n-g(t,e,i),s=(n=g(h=t+r,u=e+r,l=i+r),f(h,u,l)),a=d(h,u,l);if(s<0){var o=n-s;h=n+(h-n)*n/o,u=n+(u-n)*n/o,l=n+(l-n)*n/o}if(a>255){var c=255-n,p=a-n;h=n+(h-n)*c/p,u=n+(u-n)*c/p,l=n+(l-n)*c/p}}function v(t,e,i){return d(t,e,i)-f(t,e,i)}function m(t,e,i,n){var r,s=[t,e,i],a=d(t,e,i),o=f(t,e,i);r=0===f(o=o===t?0:o===e?1:2,a=a===t?0:a===e?1:2)?1===d(o,a)?2:1:0,s[a]>s[o]?(s[r]=(s[r]-s[o])*n/(s[a]-s[o]),s[a]=n):s[r]=s[a]=0,s[o]=0,h=s[0],u=s[1],l=s[2]}var y={multiply:function(){h=r*t/255,u=s*e/255,l=a*i/255},screen:function(){h=r+t-r*t/255,u=s+e-s*e/255,l=a+i-a*i/255},overlay:function(){h=r<128?2*r*t/255:255-2*(255-r)*(255-t)/255,u=s<128?2*s*e/255:255-2*(255-s)*(255-e)/255,l=a<128?2*a*i/255:255-2*(255-a)*(255-i)/255},"soft-light":function(){var n=t*r/255;h=n+r*(255-(255-r)*(255-t)/255-n)/255,u=(n=e*s/255)+s*(255-(255-s)*(255-e)/255-n)/255,l=(n=i*a/255)+a*(255-(255-a)*(255-i)/255-n)/255},"hard-light":function(){h=t<128?2*t*r/255:255-2*(255-t)*(255-r)/255,u=e<128?2*e*s/255:255-2*(255-e)*(255-s)/255,l=i<128?2*i*a/255:255-2*(255-i)*(255-a)/255},"color-dodge":function(){h=0===r?0:255===t?255:f(255,255*r/(255-t)),u=0===s?0:255===e?255:f(255,255*s/(255-e)),l=0===a?0:255===i?255:f(255,255*a/(255-i))},"color-burn":function(){h=255===r?255:0===t?0:d(0,255-255*(255-r)/t),u=255===s?255:0===e?0:d(0,255-255*(255-s)/e),l=255===a?255:0===i?0:d(0,255-255*(255-a)/i)},darken:function(){h=r<t?r:t,u=s<e?s:e,l=a<i?a:i},lighten:function(){h=r>t?r:t,u=s>e?s:e,l=a>i?a:i},difference:function(){(h=r-t)<0&&(h=-h),(u=s-e)<0&&(u=-u),(l=a-i)<0&&(l=-l)},exclusion:function(){h=r+t*(255-r-r)/255,u=s+e*(255-s-s)/255,l=a+i*(255-a-a)/255},hue:function(){m(t,e,i,v(r,s,a)),_(h,u,l,g(r,s,a))},saturation:function(){m(r,s,a,v(t,e,i)),_(h,u,l,g(r,s,a))},luminosity:function(){_(r,s,a,g(t,e,i))},color:function(){_(t,e,i,g(r,s,a))},add:function(){h=f(r+t,255),u=f(s+e,255),l=f(a+i,255)},subtract:function(){h=d(r-t,0),u=d(s-e,0),l=d(a-i,0)},average:function(){h=(r+t)/2,u=(s+e)/2,l=(a+i)/2},negation:function(){h=255-p(255-t-r),u=255-p(255-e-s),l=255-p(255-i-a)}},x=this.nativeModes=c.each(["source-over","source-in","source-out","source-atop","destination-over","destination-in","destination-out","destination-atop","lighter","darker","copy","xor"],(function(t){this[t]=!0}),{}),w=ht.getContext(1,1);w&&(c.each(y,(function(t,e){var i="darken"===e,n=!1;w.save();try{w.fillStyle=i?"#300":"#a00",w.fillRect(0,0,1,1),w.globalCompositeOperation=e,w.globalCompositeOperation===e&&(w.fillStyle=i?"#a00":"#300",w.fillRect(0,0,1,1),n=w.getImageData(0,0,1,1).data[0]!==i?170:51)}catch(t){}w.restore(),x[e]=n})),ht.release(w)),this.process=function(c,f,d,p,g){var _=f.canvas,v="normal"===c;if(v||x[c])d.save(),d.setTransform(1,0,0,1,0,0),d.globalAlpha=p,v||(d.globalCompositeOperation=c),d.drawImage(_,g.x,g.y),d.restore();else{var m=y[c];if(!m)return;for(var w=d.getImageData(g.x,g.y,_.width,_.height),b=w.data,C=f.getImageData(0,0,_.width,_.height).data,S=0,k=b.length;S<k;S+=4){t=C[S],r=b[S],e=C[S+1],s=b[S+1],i=C[S+2],a=b[S+2],n=C[S+3],o=b[S+3],m();var A=n*p/255,I=1-A;b[S]=A*h+I*r,b[S+1]=A*u+I*s,b[S+2]=A*l+I*a,b[S+3]=n*p+I*o}d.putImageData(w,g.x,g.y)}}},ct=new function(){var t="http://www.w3.org/2000/svg",e="http://www.w3.org/2000/xmlns",i="http://www.w3.org/1999/xlink",n={href:i,xlink:e,xmlns:e+"/","xmlns:xlink":e+"/"};function r(t,e,i){for(var r in e){var s=e[r],a=n[r];"number"==typeof s&&i&&(s=i.number(s)),a?t.setAttributeNS(a,r,s):t.setAttribute(r,s)}return t}return{svg:t,xmlns:e,xlink:i,create:function(e,i,n){return r(u.createElementNS(t,e),i,n)},get:function(t,e){var i=n[e],r=i?t.getAttributeNS(i,e):t.getAttribute(e);return"null"===r?null:r},set:r}},lt=c.each({fillColor:["fill","color"],fillRule:["fill-rule","string"],strokeColor:["stroke","color"],strokeWidth:["stroke-width","number"],strokeCap:["stroke-linecap","string"],strokeJoin:["stroke-linejoin","string"],strokeScaling:["vector-effect","lookup",{true:"none",false:"non-scaling-stroke"},function(t,e){return!e&&(t instanceof D||t instanceof T||t instanceof H)}],miterLimit:["stroke-miterlimit","number"],dashArray:["stroke-dasharray","array"],dashOffset:["stroke-dashoffset","number"],fontFamily:["font-family","string"],fontWeight:["font-weight","string"],fontSize:["font-size","number"],justification:["text-anchor","lookup",{left:"start",center:"middle",right:"end"}],opacity:["opacity","number"],blendMode:["mix-blend-mode","style"]},(function(t,e){var i=c.capitalize(e),n=t[2];this[e]={type:t[1],property:e,attribute:t[0],toSVG:n,fromSVG:n&&c.each(n,(function(t,e){this[t]=e}),{}),exportFilter:t[3],get:"get"+i,set:"set"+i}}),{});new function(){var t;function e(e,i,n){var r,s=new c,a=e.getTranslation();if(i&&(e.isInvertible()?(r=(e=e._shiftless())._inverseTransform(a),a=null):r=new m,s[n?"cx":"x"]=r.x,s[n?"cy":"y"]=r.y),!e.isIdentity()){var o=e.decompose();if(o){var h=[],u=o.rotation,l=o.scaling,f=o.skewing;a&&!a.isZero()&&h.push("translate("+t.point(a)+")"),u&&h.push("rotate("+t.number(u)+")"),_.isZero(l.x-1)&&_.isZero(l.y-1)||h.push("scale("+t.point(l)+")"),f.x&&h.push("skewX("+t.number(f.x)+")"),f.y&&h.push("skewY("+t.number(f.y)+")"),s.transform=h.join(" ")}else s.transform="matrix("+e.getValues().join(",")+")"}return s}function i(i,n){for(var r=e(i._matrix),s=i._children,a=ct.create("g",r,t),o=0,u=s.length;o<u;o++){var c=s[o],f=l(c,n);if(f)if(c.isClipMask()){var d=ct.create("clipPath");d.appendChild(f),h(c,d,"clip"),ct.set(a,{"clip-path":"url(#"+d.id+")"})}else a.appendChild(f)}return a}function n(i){var n=i._type,r=i._radius,s=e(i._matrix,!0,"rectangle"!==n);if("rectangle"===n){n="rect";var a=i._size,o=a.width,h=a.height;s.x-=o/2,s.y-=h/2,s.width=o,s.height=h,r.isZero()&&(r=null)}return r&&("circle"===n?s.r=r:(s.rx=r.width,s.ry=r.height)),ct.create(n,s,t)}var r,s={Group:i,Layer:i,Raster:function(i,n){var r=e(i._matrix,!0),s=i.getSize(),a=i.getImage();return r.x-=s.width/2,r.y-=s.height/2,r.width=s.width,r.height=s.height,r.href=0==n.embedImages&&a&&a.src||i.toDataURL(),ct.create("image",r,t)},Path:function(i,r){var s=r.matchShapes;if(s){var a=i.toShape(!1);if(a)return n(a)}var o,h=i._segments,u=h.length,c=e(i._matrix);if(s&&u>=2&&!i.hasHandles())if(u>2){o=i._closed?"polygon":"polyline";for(var l=[],f=0;f<u;f++)l.push(t.point(h[f]._point));c.points=l.join(" ")}else{o="line";var d=h[0]._point,p=h[1]._point;c.set({x1:d.x,y1:d.y,x2:p.x,y2:p.y})}else o="path",c.d=i.getPathData(null,r.precision);return ct.create(o,c,t)},Shape:n,CompoundPath:function(i,n){var r=e(i._matrix),s=i.getPathData(null,n.precision);return s&&(r.d=s),ct.create("path",r,t)},SymbolItem:function(i,n){var r=e(i._matrix,!0),s=i._definition,a=o(s,"symbol"),u=s._item,c=u.getStrokeBounds();return a||((a=ct.create("symbol",{viewBox:t.rectangle(c)})).appendChild(l(u,n)),h(s,a,"symbol")),r.href="#"+a.id,r.x+=c.x,r.y+=c.y,r.width=c.width,r.height=c.height,r.overflow="visible",ct.create("use",r,t)},PointText:function(i){var n=ct.create("text",e(i._matrix,!0),t);return n.textContent=i._content,n}};function o(t,e){return r||(r={ids:{},svgs:{}}),t&&r.svgs[e+"-"+(t._id||t.__id||(t.__id=v.get("svg")))]}function h(t,e,i){r||o();var n=r.ids[i]=(r.ids[i]||0)+1;e.id=i+"-"+n,r.svgs[i+"-"+(t._id||t.__id)]=e}function u(t,e){var i=t,n=null;if(r){for(var s in i="svg"===t.nodeName.toLowerCase()&&t,r.svgs)n||(i||(i=ct.create("svg")).appendChild(t),n=i.insertBefore(ct.create("defs"),i.firstChild)),n.appendChild(r.svgs[s]);r=null}return e.asString?(new a.XMLSerializer).serializeToString(i):i}function l(e,i,n){var r=s[e._class],a=r&&r(e,i);if(a){var u=i.onExport;u&&(a=u(e,a,i)||a);var l=JSON.stringify(e._data);l&&"{}"!==l&&"null"!==l&&a.setAttribute("data-paper-data",l)}return a&&function(e,i,n){var r={},s=!n&&e.getParent(),a=[];return null!=e._name&&(r.id=e._name),c.each(lt,(function(i){var n=i.get,u=i.type,l=e[n]();if(i.exportFilter?i.exportFilter(e,l):!s||!c.equals(s[n](),l)){if("color"===u&&null!=l){var f=l.getAlpha();f<1&&(r[i.attribute+"-opacity"]=f)}"style"===u?a.push(i.attribute+": "+l):r[i.attribute]=null==l?"none":"color"===u?l.gradient?function(e){var i=o(e,"color");if(!i){var n,r=e.getGradient(),s=r._radial,a=e.getOrigin(),u=e.getDestination();if(s){n={cx:a.x,cy:a.y,r:a.getDistance(u)};var c=e.getHighlight();c&&(n.fx=c.x,n.fy=c.y)}else n={x1:a.x,y1:a.y,x2:u.x,y2:u.y};n.gradientUnits="userSpaceOnUse",i=ct.create((s?"radial":"linear")+"Gradient",n,t);for(var l=r._stops,f=0,d=l.length;f<d;f++){var p=l[f],g=p._color,_=g.getAlpha(),v=p._offset;n={offset:null==v?f/(d-1):v},g&&(n["stop-color"]=g.toCSS(!0)),_<1&&(n["stop-opacity"]=_),i.appendChild(ct.create("stop",n,t))}h(e,i,"color")}return"url(#"+i.id+")"}(l):l.toCSS(!0):"array"===u?l.join(","):"lookup"===u?i.toSVG[l]:l}})),a.length&&(r.style=a.join(";")),1===r.opacity&&delete r.opacity,e._visible||(r.visibility="hidden"),ct.set(i,r,t)}(e,a,n)}function f(e){return e||(e={}),t=new g(e.precision),e}I.inject({exportSVG:function(t){return u(l(this,t=f(t),!0),t)}}),A.inject({exportSVG:function(i){i=f(i);var n=this._children,r=this.getView(),s=c.pick(i.bounds,"view"),a=i.matrix||"view"===s&&r._matrix,o=a&&S.read([a]),h="view"===s?new b([0,0],r.getViewSize()):"content"===s?I._getBounds(n,o,{stroke:!0}).rect:b.read([s],0,{readNull:!0}),d={version:"1.1",xmlns:ct.svg,"xmlns:xlink":ct.xlink};h&&(d.width=h.width,d.height=h.height,(h.x||0===h.x||h.y||0===h.y)&&(d.viewBox=t.rectangle(h)));var p=ct.create("svg",d,t),g=p;o&&!o.isIdentity()&&(g=p.appendChild(ct.create("g",e(o),t)));for(var _=0,v=n.length;_<v;_++)g.appendChild(l(n[_],i,!0));return u(p,i)}})},new function(){var t,e={};function i(e,i,n,r,s,a){var o=ct.get(e,i)||a,h=null==o?r?null:n?"":0:n?o:parseFloat(o);return/%\s*$/.test(o)?h/100*(s?1:t[/x|^width/.test(i)?"width":"height"]):h}function n(t,e,n,r,s,a,o){return e=i(t,e||"x",!1,r,s,a),n=i(t,n||"y",!1,r,s,o),!r||null!=e&&null!=n?new m(e,n):null}function r(t,e,n,r,s){return e=i(t,e||"width",!1,r,s),n=i(t,n||"height",!1,r,s),!r||null!=e&&null!=n?new x(e,n):null}function s(t,e,i){return"none"===t?null:"number"===e?parseFloat(t):"array"===e?t?t.split(/[\s,]+/g).map(parseFloat):[]:"color"===e?C(t)||t:"lookup"===e?i[t]:t}function l(t,e,i,n){var r=t.childNodes,s="clippath"===e,a="defs"===e,o=new P,h=o._project,u=h._currentStyle,c=[];if(s||a||(o=w(o,t,n),h._currentStyle=o._style.clone()),n)for(var l=t.querySelectorAll("defs"),f=0,d=l.length;f<d;f++)k(l[f],i,!1);for(f=0,d=r.length;f<d;f++){var p,g=r[f];1!==g.nodeType||/^defs$/i.test(g.nodeName)||!(p=k(g,i,!1))||p instanceof N||c.push(p)}return o.addChildren(c),s&&(o=w(o.reduce(),t,n)),h._currentStyle=u,(s||a)&&(o.remove(),o=null),o}function f(t,e){for(var i=t.getAttribute("points").match(/[+-]?(?:\d*\.\d+|\d+\.?)(?:[eE][+-]?\d+)?/g),n=[],r=0,s=i.length;r<s;r+=2)n.push(new m(parseFloat(i[r]),parseFloat(i[r+1])));var a=new F(n);return"polygon"===e&&a.closePath(),a}function d(t,r){var s,a=(i(t,"href",!0)||"").substring(1),o="radialgradient"===r;if(a)(s=e[a].getGradient())._radial^o&&((s=s.clone())._radial=o);else{for(var h=t.childNodes,u=[],c=0,l=h.length;c<l;c++){var f=h[c];1===f.nodeType&&u.push(w(new $,f))}s=new Z(u,o)}var d,p,g,_="userSpaceOnUse"!==i(t,"gradientUnits",!0);return o?(p=(d=n(t,"cx","cy",!1,_,"50%","50%")).add(i(t,"r",!1,!1,_,"50%"),0),g=n(t,"fx","fy",!0,_)):(d=n(t,"x1","y1",!1,_,"0%","0%"),p=n(t,"x2","y2",!1,_,"100%","0%")),w(new G(s,d,p,g),t)._scaleToBounds=_,null}var p={"#document":function(t,e,i,n){for(var r=t.childNodes,s=0,a=r.length;s<a;s++){var o=r[s];if(1===o.nodeType)return k(o,i,n)}},g:l,svg:l,clippath:l,polygon:f,polyline:f,path:function(t){return D.create(t.getAttribute("d"))},lineargradient:d,radialgradient:d,image:function(t){var e=new M(i(t,"href",!0));return e.on("load",(function(){var e=r(t);this.setSize(e);var i=n(t).add(e.divide(2));this._matrix.append((new S).translate(i))})),e},symbol:function(t,e,i,n){return new N(l(t,e,i,n),!0)},defs:l,use:function(t){var r=(i(t,"href",!0)||"").substring(1),s=e[r],a=n(t);return s?s instanceof N?s.place(a):s.clone().translate(a):null},circle:function(t){return new T.Circle(n(t,"cx","cy"),i(t,"r"))},ellipse:function(t){return new T.Ellipse({center:n(t,"cx","cy"),radius:r(t,"rx","ry")})},rect:function(t){return new T.Rectangle(new b(n(t),r(t)),r(t,"rx","ry"))},line:function(t){return new F.Line(n(t,"x1","y1"),n(t,"x2","y2"))},text:function(t){var e=new W(n(t).add(n(t,"dx","dy")));return e.setContent(t.textContent.trim()||""),e},switch:l};function g(t,e,i,n){if(t.transform){for(var r=(n.getAttribute(i)||"").split(/\)\s*/g),s=new S,a=0,o=r.length;a<o;a++){var h=r[a];if(!h)break;for(var u=h.split(/\(\s*/),c=u[0],l=u[1].split(/[\s,]+/g),f=0,d=l.length;f<d;f++)l[f]=parseFloat(l[f]);switch(c){case"matrix":s.append(new S(l[0],l[1],l[2],l[3],l[4],l[5]));break;case"rotate":s.rotate(l[0],l[1]||0,l[2]||0);break;case"translate":s.translate(l[0],l[1]||0);break;case"scale":s.scale(l);break;case"skewX":s.skew(l[0],0);break;case"skewY":s.skew(0,l[0])}}t.transform(s)}}function _(t,e,i){var n="fill-opacity"===i?"getFillColor":"getStrokeColor",r=t[n]&&t[n]();r&&r.setAlpha(parseFloat(e))}var v=c.set(c.each(lt,(function(t){this[t.attribute]=function(e,i){if(e[t.set]&&(e[t.set](s(i,t.type,t.fromSVG)),"color"===t.type)){var n=e[t.get]();if(n&&n._scaleToBounds){var r=e.getBounds();n.transform((new S).translate(r.getPoint()).scale(r.getSize()))}}}}),{}),{id:function(t,i){e[i]=t,t.setName&&t.setName(i)},"clip-path":function(t,e){var i=C(e);if(i){if((i=i.clone()).setClipMask(!0),!(t instanceof P))return new P(i,t);t.insertChild(0,i)}},gradientTransform:g,transform:g,"fill-opacity":_,"stroke-opacity":_,visibility:function(t,e){t.setVisible&&t.setVisible("visible"===e)},display:function(t,e){t.setVisible&&t.setVisible(null!==e)},"stop-color":function(t,e){t.setColor&&t.setColor(e)},"stop-opacity":function(t,e){t._color&&t._color.setAlpha(parseFloat(e))},offset:function(t,e){if(t.setOffset){var i=e.match(/(.*)%$/);t.setOffset(i?i[1]/100:parseFloat(e))}},viewBox:function(t,e,i,n,a){var o,h=new b(s(e,"array")),u=r(n,null,null,!0);if(t instanceof P){var c=u?u.divide(h.getSize()):1,l=(new S).scale(c).translate(h.getPoint().negate());o=t}else t instanceof N&&(u&&h.setSize(u),o=t._item);if(o){if("visible"!==y(n,"overflow",a)){var f=new T.Rectangle(h);f.setClipMask(!0),o.addChild(f)}l&&o.transform(l)}}});function y(t,e,i){var n=t.attributes[e],r=n&&n.value;if(!r&&t.style){var s=c.camelize(e);(r=t.style[s])||i.node[s]===i.parent[s]||(r=i.node[s])}return r?"none"===r?null:r:o}function w(t,e,i){var n=e.parentNode,r={node:K.getStyles(e)||{},parent:!i&&!/^defs$/i.test(n.tagName)&&K.getStyles(n)||{}};return c.each(v,(function(i,n){var s=y(e,n,r);t=s!==o&&i(t,s,n,e,r)||t})),t}function C(t){var i=t&&t.match(/\((?:["'#]*)([^"')]+)/),n=i&&i[1],r=n&&e[h?n.replace(h.location.href.split("#")[0]+"#",""):n];return r&&r._scaleToBounds&&((r=r.clone())._scaleToBounds=!0),r}function k(i,n,s){var a,o,h,l=i.nodeName.toLowerCase(),f="#document"!==l,d=u.body;s&&f&&(t=ft.getView().getSize(),t=r(i,null,null,!0)||t,a=ct.create("svg",{style:"stroke-width: 1px; stroke-miterlimit: 10"}),o=i.parentNode,h=i.nextSibling,a.appendChild(i),d.appendChild(a));var g=ft.settings,_=g.applyMatrix,v=g.insertItems;g.applyMatrix=!1,g.insertItems=!1;var m=p[l],y=m&&m(i,l,n,s)||null;if(g.insertItems=v,g.applyMatrix=_,y){!f||y instanceof P||(y=w(y,i,s));var x=n.onImport,b=f&&i.getAttribute("data-paper-data");x&&(y=x(i,y,n)||y),n.expandShapes&&y instanceof T&&(y.remove(),y=y.toPath()),b&&(y._data=JSON.parse(b))}return a&&(d.removeChild(a),o&&(h?o.insertBefore(i,h):o.appendChild(i))),s&&(e={},y&&c.pick(n.applyMatrix,_)&&y.matrix.apply(!0,!0)),y}function E(t,e,i){if(!t)return null;e="function"==typeof e?{onLoad:e}:e||{};var n=ft,r=null;function s(s){try{var u="object"==typeof s?s:(new a.DOMParser).parseFromString(s.trim(),"image/svg+xml");if(!u.nodeName)throw u=null,new Error("Unsupported SVG source: "+t);ft=n,r=k(u,e,!0),e&&!1===e.insert||i._insertItem(o,r);var c=e.onLoad;c&&c(r,s)}catch(t){h(t)}}function h(t,i){var n=e.onError;if(!n)throw new Error(t);n(t,i)}if("string"!=typeof t||/^[\s\S]*</.test(t)){if("undefined"!=typeof File&&t instanceof File){var c=new FileReader;return c.onload=function(){s(c.result)},c.onerror=function(){h(c.error)},c.readAsText(t)}s(t)}else{var l=u.getElementById(t);l?s(l):ot({url:t,async:!0,onLoad:s,onError:h})}return r}I.inject({importSVG:function(t,e){return E(t,e,this)}}),A.inject({importSVG:function(t,e){return this.activate(),E(t,e,this)}})},c.exports.PaperScript=function(){var t,e,l,d=this,p=d.acorn;if(!p)try{p=i(234)}catch(t){}function g(t,e){return(d.acorn||p).parse(t,e)}p||(p=t=e={},l=function(t){"use strict";var e,i,n,r;t.version="0.5.0",t.parse=function(t,r){return i=String(t),n=i.length,a(r),Gt(),function(t){v=m=o,e.locations&&(y=new Wt),x=b=null,w=[],Jt();var i=t||ue(),n=!0;for(t||(i.body=[]);f!==T;){var r=we();i.body.push(r),n&&fe(r)&&ae(!0),n=!1}return le(i,"Program")}(e.program)};var s=t.defaultOptions={ecmaVersion:5,strictSemicolons:!1,allowTrailingCommas:!0,forbidReserved:!1,allowReturnOutsideFunction:!1,locations:!1,onComment:null,ranges:!1,program:null,sourceFile:null,directSourceFile:null};function a(t){for(var i in e=t||{},s)Object.prototype.hasOwnProperty.call(e,i)||(e[i]=s[i]);r=e.sourceFile||null}var o,h,u,c,l,f,d,p,g,_,v,m,y,x,w,b,C=t.getLineInfo=function(t,e){for(var i=1,n=0;;){qt.lastIndex=n;var r=qt.exec(t);if(!(r&&r.index<e))break;++i,n=r.index+r[0].length}return{line:i,column:e-n}};function S(t,e){var n=C(i,t);e+=" ("+n.line+":"+n.column+")";var r=new SyntaxError(e);throw r.pos=t,r.loc=n,r.raisedAt=o,r}t.tokenize=function(t,r){i=String(t),n=i.length,a(r),Gt();var s={};function v(t){return m=u,Jt(t),s.start=h,s.end=u,s.startLoc=c,s.endLoc=l,s.type=f,s.value=d,s}return v.jumpTo=function(t,n){var r;if(o=t,e.locations)for(g=1,_=qt.lastIndex=0;(r=qt.exec(i))&&r.index<t;)++g,_=r.index+r[0].length;p=n,Kt()},v};var k=[],A={type:"num"},I={type:"regexp"},P={type:"string"},E={type:"name"},T={type:"eof"},M={keyword:"break"},L={keyword:"case",beforeExpr:!0},N={keyword:"catch"},O={keyword:"continue"},z={keyword:"debugger"},V={keyword:"default"},R={keyword:"do",isLoop:!0},B={keyword:"else",beforeExpr:!0},D={keyword:"finally"},F={keyword:"for",isLoop:!0},j={keyword:"function"},q={keyword:"if"},U={keyword:"return",beforeExpr:!0},H={keyword:"switch"},W={keyword:"throw",beforeExpr:!0},G={keyword:"try"},Z={keyword:"var"},$={keyword:"while",isLoop:!0},Q={keyword:"with"},K={keyword:"new",beforeExpr:!0},J={keyword:"this"},X={keyword:"null",atomValue:null},Y={keyword:"true",atomValue:!0},tt={keyword:"false",atomValue:!1},et={keyword:"in",binop:7,beforeExpr:!0},it={break:M,case:L,catch:N,continue:O,debugger:z,default:V,do:R,else:B,finally:D,for:F,function:j,if:q,return:U,switch:H,throw:W,try:G,var:Z,while:$,with:Q,null:X,true:Y,false:tt,new:K,in:et,instanceof:{keyword:"instanceof",binop:7,beforeExpr:!0},this:J,typeof:{keyword:"typeof",prefix:!0,beforeExpr:!0},void:{keyword:"void",prefix:!0,beforeExpr:!0},delete:{keyword:"delete",prefix:!0,beforeExpr:!0}},nt={type:"[",beforeExpr:!0},rt={type:"]"},st={type:"{",beforeExpr:!0},at={type:"}"},ot={type:"(",beforeExpr:!0},ht={type:")"},ut={type:",",beforeExpr:!0},ct={type:";",beforeExpr:!0},lt={type:":",beforeExpr:!0},ft={type:"."},dt={type:"?",beforeExpr:!0},pt={binop:10,beforeExpr:!0},gt={isAssign:!0,beforeExpr:!0},_t={isAssign:!0,beforeExpr:!0},vt={postfix:!0,prefix:!0,isUpdate:!0},mt={prefix:!0,beforeExpr:!0},yt={binop:1,beforeExpr:!0},xt={binop:2,beforeExpr:!0},wt={binop:3,beforeExpr:!0},bt={binop:4,beforeExpr:!0},Ct={binop:5,beforeExpr:!0},St={binop:6,beforeExpr:!0},kt={binop:7,beforeExpr:!0},At={binop:8,beforeExpr:!0},It={binop:9,prefix:!0,beforeExpr:!0},Pt={binop:10,beforeExpr:!0};for(var Et in t.tokTypes={bracketL:nt,bracketR:rt,braceL:st,braceR:at,parenL:ot,parenR:ht,comma:ut,semi:ct,colon:lt,dot:ft,question:dt,slash:pt,eq:gt,name:E,eof:T,num:A,regexp:I,string:P},it)t.tokTypes["_"+Et]=it[Et];function Tt(t){t=t.split(" ");var e="",i=[];t:for(var n=0;n<t.length;++n){for(var r=0;r<i.length;++r)if(i[r][0].length==t[n].length){i[r].push(t[n]);continue t}i.push([t[n]])}function s(t){if(1==t.length)return e+="return str === "+JSON.stringify(t[0])+";";e+="switch(str){";for(var i=0;i<t.length;++i)e+="case "+JSON.stringify(t[i])+":";e+="return true}return false;"}if(i.length>3){for(i.sort((function(t,e){return e.length-t.length})),e+="switch(str.length){",n=0;n<i.length;++n){var a=i[n];e+="case "+a[0].length+":",s(a)}e+="}"}else s(t);return new Function("str",e)}var Mt,Lt=Tt("abstract boolean byte char class double enum export extends final float goto implements import int interface long native package private protected public short static super synchronized throws transient volatile"),Nt=Tt("class enum extends super const export import"),Ot=Tt("implements interface let package private protected public static yield"),zt=Tt("eval arguments"),Vt=Tt("break case catch continue debugger default do else finally for function if return switch throw try var while with null true false instanceof typeof void delete new in this"),Rt=/[\u1680\u180e\u2000-\u200a\u202f\u205f\u3000\ufeff]/,Bt="ªµºÀ-ÖØ-öø-ˁˆ-ˑˠ-ˤˬˮͰ-ʹͶͷͺ-ͽΆΈ-ΊΌΎ-ΡΣ-ϵϷ-ҁҊ-ԧԱ-Ֆՙա-ևא-תװ-ײؠ-يٮٯٱ-ۓەۥۦۮۯۺ-ۼۿܐܒ-ܯݍ-ޥޱߊ-ߪߴߵߺࠀ-ࠕࠚࠤࠨࡀ-ࡘࢠࢢ-ࢬऄ-हऽॐक़-ॡॱ-ॷॹ-ॿঅ-ঌএঐও-নপ-রলশ-হঽৎড়ঢ়য়-ৡৰৱਅ-ਊਏਐਓ-ਨਪ-ਰਲਲ਼ਵਸ਼ਸਹਖ਼-ੜਫ਼ੲ-ੴઅ-ઍએ-ઑઓ-નપ-રલળવ-હઽૐૠૡଅ-ଌଏଐଓ-ନପ-ରଲଳଵ-ହଽଡ଼ଢ଼ୟ-ୡୱஃஅ-ஊஎ-ஐஒ-கஙசஜஞடணதந-பம-ஹௐఅ-ఌఎ-ఐఒ-నప-ళవ-హఽౘౙౠౡಅ-ಌಎ-ಐಒ-ನಪ-ಳವ-ಹಽೞೠೡೱೲഅ-ഌഎ-ഐഒ-ഺഽൎൠൡൺ-ൿඅ-ඖක-නඳ-රලව-ෆก-ะาำเ-ๆກຂຄງຈຊຍດ-ທນ-ຟມ-ຣລວສຫອ-ະາຳຽເ-ໄໆໜ-ໟༀཀ-ཇཉ-ཬྈ-ྌက-ဪဿၐ-ၕၚ-ၝၡၥၦၮ-ၰၵ-ႁႎႠ-ჅჇჍა-ჺჼ-ቈቊ-ቍቐ-ቖቘቚ-ቝበ-ኈኊ-ኍነ-ኰኲ-ኵኸ-ኾዀዂ-ዅወ-ዖዘ-ጐጒ-ጕጘ-ፚᎀ-ᎏᎠ-Ᏼᐁ-ᙬᙯ-ᙿᚁ-ᚚᚠ-ᛪᛮ-ᛰᜀ-ᜌᜎ-ᜑᜠ-ᜱᝀ-ᝑᝠ-ᝬᝮ-ᝰក-ឳៗៜᠠ-ᡷᢀ-ᢨᢪᢰ-ᣵᤀ-ᤜᥐ-ᥭᥰ-ᥴᦀ-ᦫᧁ-ᧇᨀ-ᨖᨠ-ᩔᪧᬅ-ᬳᭅ-ᭋᮃ-ᮠᮮᮯᮺ-ᯥᰀ-ᰣᱍ-ᱏᱚ-ᱽᳩ-ᳬᳮ-ᳱᳵᳶᴀ-ᶿḀ-ἕἘ-Ἕἠ-ὅὈ-Ὅὐ-ὗὙὛὝὟ-ώᾀ-ᾴᾶ-ᾼιῂ-ῄῆ-ῌῐ-ΐῖ-Ίῠ-Ῥῲ-ῴῶ-ῼⁱⁿₐ-ₜℂℇℊ-ℓℕℙ-ℝℤΩℨK-ℭℯ-ℹℼ-ℿⅅ-ⅉⅎⅠ-ↈⰀ-Ⱞⰰ-ⱞⱠ-ⳤⳫ-ⳮⳲⳳⴀ-ⴥⴧⴭⴰ-ⵧⵯⶀ-ⶖⶠ-ⶦⶨ-ⶮⶰ-ⶶⶸ-ⶾⷀ-ⷆⷈ-ⷎⷐ-ⷖⷘ-ⷞⸯ々-〇〡-〩〱-〵〸-〼ぁ-ゖゝ-ゟァ-ヺー-ヿㄅ-ㄭㄱ-ㆎㆠ-ㆺㇰ-ㇿ㐀-䶵一-鿌ꀀ-ꒌꓐ-ꓽꔀ-ꘌꘐ-ꘟꘪꘫꙀ-ꙮꙿ-ꚗꚠ-ꛯꜗ-ꜟꜢ-ꞈꞋ-ꞎꞐ-ꞓꞠ-Ɦꟸ-ꠁꠃ-ꠅꠇ-ꠊꠌ-ꠢꡀ-ꡳꢂ-ꢳꣲ-ꣷꣻꤊ-ꤥꤰ-ꥆꥠ-ꥼꦄ-ꦲꧏꨀ-ꨨꩀ-ꩂꩄ-ꩋꩠ-ꩶꩺꪀ-ꪯꪱꪵꪶꪹ-ꪽꫀꫂꫛ-ꫝꫠ-ꫪꫲ-ꫴꬁ-ꬆꬉ-ꬎꬑ-ꬖꬠ-ꬦꬨ-ꬮꯀ-ꯢ가-힣ힰ-ퟆퟋ-ퟻ豈-舘並-龎ﬀ-ﬆﬓ-ﬗיִײַ-ﬨשׁ-זּטּ-לּמּנּסּףּפּצּ-ﮱﯓ-ﴽﵐ-ﶏﶒ-ﷇﷰ-ﷻﹰ-ﹴﹶ-ﻼＡ-Ｚａ-ｚｦ-ﾾￂ-ￇￊ-ￏￒ-ￗￚ-ￜ",Dt=new RegExp("["+Bt+"]"),Ft=new RegExp("["+Bt+"̀-ͯ҃-֑҇-ׇֽֿׁׂׅׄؐ-ؚؠ-ىٲ-ۓۧ-ۨۻ-ۼܰ-݊ࠀ-ࠔࠛ-ࠣࠥ-ࠧࠩ-࠭ࡀ-ࡗࣤ-ࣾऀ-ःऺ-़ा-ॏ॑-ॗॢ-ॣ०-९ঁ-ঃ়া-ৄেৈৗয়-ৠਁ-ਃ਼ਾ-ੂੇੈੋ-੍ੑ੦-ੱੵઁ-ઃ઼ા-ૅે-ૉો-્ૢ-ૣ૦-૯ଁ-ଃ଼ା-ୄେୈୋ-୍ୖୗୟ-ୠ୦-୯ஂா-ூெ-ைொ-்ௗ௦-௯ఁ-ఃె-ైొ-్ౕౖౢ-ౣ౦-౯ಂಃ಼ಾ-ೄೆ-ೈೊ-್ೕೖೢ-ೣ೦-೯ംഃെ-ൈൗൢ-ൣ൦-൯ංඃ්ා-ුූෘ-ෟෲෳิ-ฺเ-ๅ๐-๙ິ-ູ່-ໍ໐-໙༘༙༠-༩༹༵༷ཁ-ཇཱ-྄྆-྇ྍ-ྗྙ-ྼ࿆က-ဩ၀-၉ၧ-ၭၱ-ၴႂ-ႍႏ-ႝ፝-፟ᜎ-ᜐᜠ-ᜰᝀ-ᝐᝲᝳក-ឲ៝០-៩᠋-᠍᠐-᠙ᤠ-ᤫᤰ-᤻ᥑ-ᥭᦰ-ᧀᧈ-ᧉ᧐-᧙ᨀ-ᨕᨠ-ᩓ᩠-᩿᩼-᪉᪐-᪙ᭆ-ᭋ᭐-᭙᭫-᭳᮰-᮹᯦-᯳ᰀ-ᰢ᱀-᱉ᱛ-ᱽ᳐-᳒ᴀ-ᶾḁ-ἕ‌‍‿⁀⁔⃐-⃥⃜⃡-⃰ⶁ-ⶖⷠ-ⷿ〡-〨゙゚Ꙁ-ꙭꙴ-꙽ꚟ꛰-꛱ꟸ-ꠀ꠆ꠋꠣ-ꠧꢀ-ꢁꢴ-꣄꣐-꣙ꣳ-ꣷ꤀-꤉ꤦ-꤭ꤰ-ꥅꦀ-ꦃ꦳-꧀ꨀ-ꨧꩀ-ꩁꩌ-ꩍ꩐-꩙ꩻꫠ-ꫩꫲ-ꫳꯀ-ꯡ꯬꯭꯰-꯹ﬠ-ﬨ︀-️︠-︦︳︴﹍-﹏０-９＿]"),jt=/[\n\r\u2028\u2029]/,qt=/\r\n|[\n\r\u2028\u2029]/g,Ut=t.isIdentifierStart=function(t){return t<65?36===t:t<91||(t<97?95===t:t<123||t>=170&&Dt.test(String.fromCharCode(t)))},Ht=t.isIdentifierChar=function(t){return t<48?36===t:t<58||!(t<65)&&(t<91||(t<97?95===t:t<123||t>=170&&Ft.test(String.fromCharCode(t))))};function Wt(){this.line=g,this.column=o-_}function Gt(){g=1,o=_=0,p=!0,Kt()}function Zt(t,i){u=o,e.locations&&(l=new Wt),f=t,Kt(),d=i,p=t.beforeExpr}function $t(){var t,n=e.onComment&&e.locations&&new Wt,r=o,s=i.indexOf("*/",o+=2);if(-1===s&&S(o-2,"Unterminated comment"),o=s+2,e.locations)for(qt.lastIndex=r;(t=qt.exec(i))&&t.index<o;)++g,_=t.index+t[0].length;e.onComment&&e.onComment(!0,i.slice(r+2,s),r,o,n,e.locations&&new Wt)}function Qt(){for(var t=o,r=e.onComment&&e.locations&&new Wt,s=i.charCodeAt(o+=2);o<n&&10!==s&&13!==s&&8232!==s&&8233!==s;)++o,s=i.charCodeAt(o);e.onComment&&e.onComment(!1,i.slice(t+2,o),t,o,r,e.locations&&new Wt)}function Kt(){for(;o<n;){var t=i.charCodeAt(o);if(32===t)++o;else if(13===t)++o,10===(r=i.charCodeAt(o))&&++o,e.locations&&(++g,_=o);else if(10===t||8232===t||8233===t)++o,e.locations&&(++g,_=o);else if(t>8&&t<14)++o;else if(47===t){var r;if(42===(r=i.charCodeAt(o+1)))$t();else{if(47!==r)break;Qt()}}else if(160===t)++o;else{if(!(t>=5760&&Rt.test(String.fromCharCode(t))))break;++o}}}function Jt(t){if(t?o=h+1:h=o,e.locations&&(c=new Wt),t)return Yt();if(o>=n)return Zt(T);var r=i.charCodeAt(o);if(Ut(r)||92===r)return re();var s=function(t){switch(t){case 46:return function(){var t=i.charCodeAt(o+1);return t>=48&&t<=57?ee(!0):(++o,Zt(ft))}();case 40:return++o,Zt(ot);case 41:return++o,Zt(ht);case 59:return++o,Zt(ct);case 44:return++o,Zt(ut);case 91:return++o,Zt(nt);case 93:return++o,Zt(rt);case 123:return++o,Zt(st);case 125:return++o,Zt(at);case 58:return++o,Zt(lt);case 63:return++o,Zt(dt);case 48:var r=i.charCodeAt(o+1);if(120===r||88===r)return function(){o+=2;var t=te(16);return null==t&&S(h+2,"Expected hexadecimal number"),Ut(i.charCodeAt(o))&&S(o,"Identifier directly after number"),Zt(A,t)}();case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:return ee(!1);case 34:case 39:return function(t){o++;for(var r="";;){o>=n&&S(h,"Unterminated string constant");var s=i.charCodeAt(o);if(s===t)return++o,Zt(P,r);if(92===s){s=i.charCodeAt(++o);var a=/^[0-7]+/.exec(i.slice(o,o+3));for(a&&(a=a[0]);a&&parseInt(a,8)>255;)a=a.slice(0,-1);if("0"===a&&(a=null),++o,a)b&&S(o-2,"Octal literal in strict mode"),r+=String.fromCharCode(parseInt(a,8)),o+=a.length-1;else switch(s){case 110:r+="\n";break;case 114:r+="\r";break;case 120:r+=String.fromCharCode(ie(2));break;case 117:r+=String.fromCharCode(ie(4));break;case 85:r+=String.fromCharCode(ie(8));break;case 116:r+="\t";break;case 98:r+="\b";break;case 118:r+="\v";break;case 102:r+="\f";break;case 48:r+="\0";break;case 13:10===i.charCodeAt(o)&&++o;case 10:e.locations&&(_=o,++g);break;default:r+=String.fromCharCode(s)}}else 13!==s&&10!==s&&8232!==s&&8233!==s||S(h,"Unterminated string constant"),r+=String.fromCharCode(s),++o}}(t);case 47:return function(){var t=i.charCodeAt(o+1);return p?(++o,Yt()):61===t?Xt(_t,2):Xt(pt,1)}();case 37:case 42:return 61===i.charCodeAt(o+1)?Xt(_t,2):Xt(Pt,1);case 124:case 38:return function(t){var e=i.charCodeAt(o+1);return e===t?Xt(124===t?yt:xt,2):61===e?Xt(_t,2):Xt(124===t?wt:Ct,1)}(t);case 94:return 61===i.charCodeAt(o+1)?Xt(_t,2):Xt(bt,1);case 43:case 45:return function(t){var e=i.charCodeAt(o+1);return e===t?45==e&&62==i.charCodeAt(o+2)&&jt.test(i.slice(m,o))?(o+=3,Qt(),Kt(),Jt()):Xt(vt,2):61===e?Xt(_t,2):Xt(It,1)}(t);case 60:case 62:return function(t){var e=i.charCodeAt(o+1),n=1;return e===t?(n=62===t&&62===i.charCodeAt(o+2)?3:2,61===i.charCodeAt(o+n)?Xt(_t,n+1):Xt(At,n)):33==e&&60==t&&45==i.charCodeAt(o+2)&&45==i.charCodeAt(o+3)?(o+=4,Qt(),Kt(),Jt()):(61===e&&(n=61===i.charCodeAt(o+2)?3:2),Xt(kt,n))}(t);case 61:case 33:return function(t){return 61===i.charCodeAt(o+1)?Xt(St,61===i.charCodeAt(o+2)?3:2):Xt(61===t?gt:mt,1)}(t);case 126:return Xt(mt,1)}return!1}(r);if(!1===s){var a=String.fromCharCode(r);if("\\"===a||Dt.test(a))return re();S(o,"Unexpected character '"+a+"'")}return s}function Xt(t,e){var n=i.slice(o,o+e);o+=e,Zt(t,n)}function Yt(){for(var t,e,r=o;;){o>=n&&S(r,"Unterminated regular expression");var s=i.charAt(o);if(jt.test(s)&&S(r,"Unterminated regular expression"),t)t=!1;else{if("["===s)e=!0;else if("]"===s&&e)e=!1;else if("/"===s&&!e)break;t="\\"===s}++o}var a=i.slice(r,o);++o;var h=ne();h&&!/^[gmsiy]*$/.test(h)&&S(r,"Invalid regexp flag");try{var u=new RegExp(a,h)}catch(t){t instanceof SyntaxError&&S(r,t.message),S(t)}return Zt(I,u)}function te(t,e){for(var n=o,r=0,s=0,a=null==e?1/0:e;s<a;++s){var h,u=i.charCodeAt(o);if((h=u>=97?u-97+10:u>=65?u-65+10:u>=48&&u<=57?u-48:1/0)>=t)break;++o,r=r*t+h}return o===n||null!=e&&o-n!==e?null:r}function ee(t){var e=o,n=!1,r=48===i.charCodeAt(o);t||null!==te(10)||S(e,"Invalid number"),46===i.charCodeAt(o)&&(++o,te(10),n=!0);var s=i.charCodeAt(o);69!==s&&101!==s||(43!==(s=i.charCodeAt(++o))&&45!==s||++o,null===te(10)&&S(e,"Invalid number"),n=!0),Ut(i.charCodeAt(o))&&S(o,"Identifier directly after number");var a,h=i.slice(e,o);return n?a=parseFloat(h):r&&1!==h.length?/[89]/.test(h)||b?S(e,"Invalid number"):a=parseInt(h,8):a=parseInt(h,10),Zt(A,a)}function ie(t){var e=te(16,t);return null===e&&S(h,"Bad character escape sequence"),e}function ne(){Mt=!1;for(var t,e=!0,n=o;;){var r=i.charCodeAt(o);if(Ht(r))Mt&&(t+=i.charAt(o)),++o;else{if(92!==r)break;Mt||(t=i.slice(n,o)),Mt=!0,117!=i.charCodeAt(++o)&&S(o,"Expecting Unicode escape sequence \\uXXXX"),++o;var s=ie(4),a=String.fromCharCode(s);a||S(o-1,"Invalid Unicode escape"),(e?Ut(s):Ht(s))||S(o-4,"Invalid Unicode escape"),t+=a}e=!1}return Mt?t:i.slice(n,o)}function re(){var t=ne(),e=E;return!Mt&&Vt(t)&&(e=it[t]),Zt(e,t)}function se(){v=h,m=u,y=l,Jt()}function ae(t){if(b=t,o=h,e.locations)for(;o<_;)_=i.lastIndexOf("\n",_-2)+1,--g;Kt(),Jt()}function oe(){this.type=null,this.start=h,this.end=null}function he(){this.start=c,this.end=null,null!==r&&(this.source=r)}function ue(){var t=new oe;return e.locations&&(t.loc=new he),e.directSourceFile&&(t.sourceFile=e.directSourceFile),e.ranges&&(t.range=[h,0]),t}function ce(t){var i=new oe;return i.start=t.start,e.locations&&(i.loc=new he,i.loc.start=t.loc.start),e.ranges&&(i.range=[t.range[0],0]),i}function le(t,i){return t.type=i,t.end=m,e.locations&&(t.loc.end=y),e.ranges&&(t.range[1]=m),t}function fe(t){return e.ecmaVersion>=5&&"ExpressionStatement"===t.type&&"Literal"===t.expression.type&&"use strict"===t.expression.value}function de(t){if(f===t)return se(),!0}function pe(){return!e.strictSemicolons&&(f===T||f===at||jt.test(i.slice(m,h)))}function ge(){de(ct)||pe()||ve()}function _e(t){f===t?se():ve()}function ve(){S(h,"Unexpected token")}function me(t){"Identifier"!==t.type&&"MemberExpression"!==t.type&&S(t.start,"Assigning to rvalue"),b&&"Identifier"===t.type&&zt(t.name)&&S(t.start,"Assigning to "+t.name+" in strict mode")}var ye={kind:"loop"},xe={kind:"switch"};function we(){(f===pt||f===_t&&"/="==d)&&Jt(!0);var t=f,n=ue();switch(t){case M:case O:se();var r=t===M;de(ct)||pe()?n.label=null:f!==E?ve():(n.label=Ve(),ge());for(var s=0;s<w.length;++s){var a=w[s];if(null==n.label||a.name===n.label.name){if(null!=a.kind&&(r||"loop"===a.kind))break;if(n.label&&r)break}}return s===w.length&&S(n.start,"Unsyntactic "+t.keyword),le(n,r?"BreakStatement":"ContinueStatement");case z:return se(),ge(),le(n,"DebuggerStatement");case R:return se(),w.push(ye),n.body=we(),w.pop(),_e($),n.test=be(),ge(),le(n,"DoWhileStatement");case F:if(se(),w.push(ye),_e(ot),f===ct)return Se(n,null);if(f===Z){var o=ue();return se(),Ae(o,!0),le(o,"VariableDeclaration"),1===o.declarations.length&&de(et)?ke(n,o):Se(n,o)}return o=Ie(!1,!0),de(et)?(me(o),ke(n,o)):Se(n,o);case j:return se(),Oe(n,!0);case q:return se(),n.test=be(),n.consequent=we(),n.alternate=de(B)?we():null,le(n,"IfStatement");case U:return x||e.allowReturnOutsideFunction||S(h,"'return' outside of function"),se(),de(ct)||pe()?n.argument=null:(n.argument=Ie(),ge()),le(n,"ReturnStatement");case H:se(),n.discriminant=be(),n.cases=[],_e(st),w.push(xe);for(var u,c;f!=at;)if(f===L||f===V){var l=f===L;u&&le(u,"SwitchCase"),n.cases.push(u=ue()),u.consequent=[],se(),l?u.test=Ie():(c&&S(v,"Multiple default clauses"),c=!0,u.test=null),_e(lt)}else u||ve(),u.consequent.push(we());return u&&le(u,"SwitchCase"),se(),w.pop(),le(n,"SwitchStatement");case W:return se(),jt.test(i.slice(m,h))&&S(m,"Illegal newline after throw"),n.argument=Ie(),ge(),le(n,"ThrowStatement");case G:if(se(),n.block=Ce(),n.handler=null,f===N){var p=ue();se(),_e(ot),p.param=Ve(),b&&zt(p.param.name)&&S(p.param.start,"Binding "+p.param.name+" in strict mode"),_e(ht),p.guard=null,p.body=Ce(),n.handler=le(p,"CatchClause")}return n.guardedHandlers=k,n.finalizer=de(D)?Ce():null,n.handler||n.finalizer||S(n.start,"Missing catch or finally clause"),le(n,"TryStatement");case Z:return se(),Ae(n),ge(),le(n,"VariableDeclaration");case $:return se(),n.test=be(),w.push(ye),n.body=we(),w.pop(),le(n,"WhileStatement");case Q:return b&&S(h,"'with' in strict mode"),se(),n.object=be(),n.body=we(),le(n,"WithStatement");case st:return Ce();case ct:return se(),le(n,"EmptyStatement");default:var g=d,_=Ie();if(t===E&&"Identifier"===_.type&&de(lt)){for(s=0;s<w.length;++s)w[s].name===g&&S(_.start,"Label '"+g+"' is already declared");var y=f.isLoop?"loop":f===H?"switch":null;return w.push({name:g,kind:y}),n.body=we(),w.pop(),n.label=_,le(n,"LabeledStatement")}return n.expression=_,ge(),le(n,"ExpressionStatement")}}function be(){_e(ot);var t=Ie();return _e(ht),t}function Ce(t){var e,i=ue(),n=!0,r=!1;for(i.body=[],_e(st);!de(at);){var s=we();i.body.push(s),n&&t&&fe(s)&&(e=r,ae(r=!0)),n=!1}return r&&!e&&ae(!1),le(i,"BlockStatement")}function Se(t,e){return t.init=e,_e(ct),t.test=f===ct?null:Ie(),_e(ct),t.update=f===ht?null:Ie(),_e(ht),t.body=we(),w.pop(),le(t,"ForStatement")}function ke(t,e){return t.left=e,t.right=Ie(),_e(ht),t.body=we(),w.pop(),le(t,"ForInStatement")}function Ae(t,e){for(t.declarations=[],t.kind="var";;){var i=ue();if(i.id=Ve(),b&&zt(i.id.name)&&S(i.id.start,"Binding "+i.id.name+" in strict mode"),i.init=de(gt)?Ie(!0,e):null,t.declarations.push(le(i,"VariableDeclarator")),!de(ut))break}return t}function Ie(t,e){var i=Pe(e);if(!t&&f===ut){var n=ce(i);for(n.expressions=[i];de(ut);)n.expressions.push(Pe(e));return le(n,"SequenceExpression")}return i}function Pe(t){var e=function(t){var e=function(t){return Ee(Te(),-1,t)}(t);if(de(dt)){var i=ce(e);return i.test=e,i.consequent=Ie(!0),_e(lt),i.alternate=Ie(!0,t),le(i,"ConditionalExpression")}return e}(t);if(f.isAssign){var i=ce(e);return i.operator=d,i.left=e,se(),i.right=Pe(t),me(e),le(i,"AssignmentExpression")}return e}function Ee(t,e,i){var n=f.binop;if(null!=n&&(!i||f!==et)&&n>e){var r=ce(t);r.left=t,r.operator=d;var s=f;return se(),r.right=Ee(Te(),n,i),Ee(le(r,s===yt||s===xt?"LogicalExpression":"BinaryExpression"),e,i)}return t}function Te(){if(f.prefix){var t=ue(),e=f.isUpdate;return t.operator=d,t.prefix=!0,p=!0,se(),t.argument=Te(),e?me(t.argument):b&&"delete"===t.operator&&"Identifier"===t.argument.type&&S(t.start,"Deleting local variable in strict mode"),le(t,e?"UpdateExpression":"UnaryExpression")}for(var i=Me(Le());f.postfix&&!pe();)(t=ce(i)).operator=d,t.prefix=!1,t.argument=i,me(i),se(),i=le(t,"UpdateExpression");return i}function Me(t,e){var i;return de(ft)?((i=ce(t)).object=t,i.property=Ve(!0),i.computed=!1,Me(le(i,"MemberExpression"),e)):de(nt)?((i=ce(t)).object=t,i.property=Ie(),i.computed=!0,_e(rt),Me(le(i,"MemberExpression"),e)):!e&&de(ot)?((i=ce(t)).callee=t,i.arguments=ze(ht,!1),Me(le(i,"CallExpression"),e)):t}function Le(){switch(f){case J:var t=ue();return se(),le(t,"ThisExpression");case E:return Ve();case A:case P:case I:return(t=ue()).value=d,t.raw=i.slice(h,u),se(),le(t,"Literal");case X:case Y:case tt:return(t=ue()).value=f.atomValue,t.raw=f.keyword,se(),le(t,"Literal");case ot:var n=c,r=h;se();var s=Ie();return s.start=r,s.end=u,e.locations&&(s.loc.start=n,s.loc.end=l),e.ranges&&(s.range=[r,u]),_e(ht),s;case nt:return t=ue(),se(),t.elements=ze(rt,!0,!0),le(t,"ArrayExpression");case st:return function(){var t=ue(),i=!0,n=!1;for(t.properties=[],se();!de(at);){if(i)i=!1;else if(_e(ut),e.allowTrailingCommas&&de(at))break;var r,s={key:Ne()},a=!1;if(de(lt)?(s.value=Ie(!0),r=s.kind="init"):e.ecmaVersion>=5&&"Identifier"===s.key.type&&("get"===s.key.name||"set"===s.key.name)?(a=n=!0,r=s.kind=s.key.name,s.key=Ne(),f!==ot&&ve(),s.value=Oe(ue(),!1)):ve(),"Identifier"===s.key.type&&(b||n))for(var o=0;o<t.properties.length;++o){var h=t.properties[o];if(h.key.name===s.key.name){var u=r==h.kind||a&&"init"===h.kind||"init"===r&&("get"===h.kind||"set"===h.kind);u&&!b&&"init"===r&&"init"===h.kind&&(u=!1),u&&S(s.key.start,"Redefinition of property")}}t.properties.push(s)}return le(t,"ObjectExpression")}();case j:return t=ue(),se(),Oe(t,!1);case K:return function(){var t=ue();return se(),t.callee=Me(Le(),!0),de(ot)?t.arguments=ze(ht,!1):t.arguments=k,le(t,"NewExpression")}();default:ve()}}function Ne(){return f===A||f===P?Le():Ve(!0)}function Oe(t,e){f===E?t.id=Ve():e?ve():t.id=null,t.params=[];var i=!0;for(_e(ot);!de(ht);)i?i=!1:_e(ut),t.params.push(Ve());var n=x,r=w;if(x=!0,w=[],t.body=Ce(!0),x=n,w=r,b||t.body.body.length&&fe(t.body.body[0]))for(var s=t.id?-1:0;s<t.params.length;++s){var a=s<0?t.id:t.params[s];if((Ot(a.name)||zt(a.name))&&S(a.start,"Defining '"+a.name+"' in strict mode"),s>=0)for(var o=0;o<s;++o)a.name===t.params[o].name&&S(a.start,"Argument name clash in strict mode")}return le(t,e?"FunctionDeclaration":"FunctionExpression")}function ze(t,i,n){for(var r=[],s=!0;!de(t);){if(s)s=!1;else if(_e(ut),i&&e.allowTrailingCommas&&de(t))break;n&&f===ut?r.push(null):r.push(Ie(!0))}return r}function Ve(t){var n=ue();return t&&"everywhere"==e.forbidReserved&&(t=!1),f===E?(!t&&(e.forbidReserved&&(3===e.ecmaVersion?Lt:Nt)(d)||b&&Ot(d))&&-1==i.slice(h,u).indexOf("\\")&&S(h,"The keyword '"+d+"' is reserved"),n.name=d):t&&f.keyword?n.name=f.keyword:ve(),p=!1,se(),le(n,"Identifier")}},"object"==typeof t&&"object"==typeof e?l(t):(n=[t],(s="function"==typeof(r=l)?r.apply(t,n):r)===o||(e.exports=s)),p.version||(p=null));var _={"+":"__add","-":"__subtract","*":"__multiply","/":"__divide","%":"__modulo","==":"__equals","!=":"__equals"},v={"-":"__negate","+":"__self"},y=c.each(["add","subtract","multiply","divide","modulo","equals","negate"],(function(t){this["__"+t]="#"+t}),{__self:function(){return this}});function w(t,e,i){var n=_[e];if(t&&t[n]){var r=t[n](i);return"!="===e?!r:r}switch(e){case"+":return t+i;case"-":return t-i;case"*":return t*i;case"/":return t/i;case"%":return t%i;case"==":return t==i;case"!=":return t!=i}}function b(t,e){var i=v[t];if(e&&e[i])return e[i]();switch(t){case"+":return+e;case"-":return-e}}function C(t,e){if(!t)return"";var i=[];function n(t){for(var e=0,n=i.length;e<n;e++){var r=i[e];if(r[0]>=t)break;t+=r[1]}return t}function r(e){return t.substring(n(e.range[0]),n(e.range[1]))}function s(e,r){for(var s=n(e.range[0]),a=n(e.range[1]),o=0,h=i.length-1;h>=0;h--)if(s>i[h][0]){o=h+1;break}i.splice(o,0,[s,r.length-a+s]),t=t.substring(0,s)+r+t.substring(a)}var o,c=(e=e||{}).url||"",l=e.sourceMaps,f=e.paperFeatures||{},d=e.source||t,p=e.offset||0,m=ft.agent,y=m.versionNumber,x=!1,w=/\r\n|\n|\r/gm;if(l&&(m.chrome&&y>=30||m.webkit&&y>=537.76||m.firefox&&y>=23||m.node)){if(m.node)p-=2;else if(h&&c&&!h.location.href.indexOf(c)){var b=u.getElementsByTagName("html")[0].innerHTML;p=b.substr(0,b.indexOf(t)+1).match(w).length+1}var C=["AA"+function(t){var e="";for(t=(Math.abs(t)<<1)+(t<0?1:0);t||!e;){var i=31&t;(t>>=5)&&(i|=32),e+="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"[i]}return e}((x=p>0&&!(m.chrome&&y>=36||m.safari&&y>=600||m.firefox&&y>=40||m.node))?0:p)+"A"];C.length=(t.match(w)||[]).length+1+(x?p:0),o={version:3,file:c,names:[],mappings:C.join(";AACA"),sourceRoot:"",sources:[c],sourcesContent:[d]}}return!1===f.operatorOverloading&&!1===f.moduleExports||function e(i,a,o){if(i){for(var h in i)if("range"!==h&&"loc"!==h){var u=i[h];if(Array.isArray(u))for(var c=0,l=u.length;c<l;c++)e(u[c],i,o);else u&&"object"==typeof u&&e(u,i,o)}!1!==o.operatorOverloading&&function(e,i){switch(e.type){case"UnaryExpression":if(e.operator in v&&"Literal"!==e.argument.type){var a=r(e.argument);s(e,'$__("'+e.operator+'", '+a+")")}break;case"BinaryExpression":if(e.operator in _&&"Literal"!==e.left.type){var o=r(e.left),h=r(e.right),u=function(e,i){return t.substring(n(e.range[1]),n(i.range[0]))}(e.left,e.right),c=e.operator;s(e,"__$__("+o+","+u.replace(new RegExp("\\"+c),'"'+c+'"')+", "+h+")")}break;case"UpdateExpression":case"AssignmentExpression":var l=i&&i.type;if(!("ForStatement"===l||"BinaryExpression"===l&&/^[=!<>]/.test(i.operator)||"MemberExpression"===l&&i.computed))if("UpdateExpression"===e.type){var f=(a=r(e.argument))+" = "+(d="__$__("+a+', "'+e.operator[0]+'", 1)');e.prefix?f="("+f+")":"AssignmentExpression"!==l&&"VariableDeclarator"!==l&&"BinaryExpression"!==l||(r(i.left||i.id)===a&&(f=d),f=a+"; "+f),s(e,f)}else if(/^.=$/.test(e.operator)&&"Literal"!==e.left.type){o=r(e.left),h=r(e.right);var d=o+" = __$__("+o+', "'+e.operator[0]+'", '+h+")";s(e,/^\(.*\)$/.test(r(e))?"("+d+")":d)}}}(i,a),!1!==o.moduleExports&&function(t){switch(t.type){case"ExportDefaultDeclaration":s({range:[t.start,t.declaration.start]},"module.exports = ");break;case"ExportNamedDeclaration":var e=t.declaration,i=t.specifiers;if(e){var n=e.declarations;n&&(n.forEach((function(t){s(t,"module.exports."+r(t))})),s({range:[t.start,e.start+e.kind.length]},""))}else if(i){var a=i.map((function(t){var e=r(t);return"module.exports."+e+" = "+e+"; "})).join("");a&&s(t,a)}}}(i)}}(g(t,{ranges:!0,preserveParens:!0,sourceType:"module"}),null,f),o&&(x&&(t=new Array(p+1).join("\n")+t),/^(inline|both)$/.test(l)&&(t+="\n//# sourceMappingURL=data:application/json;base64,"+a.btoa(unescape(encodeURIComponent(JSON.stringify(o))))),t+="\n//# sourceURL="+(c||"paperscript")),{url:c,source:d,code:t,map:o}}function S(t,e,i){ft=e;var n,r=e.getView(),s=/\btool\.\w+|\s+on(?:Key|Mouse)(?:Up|Down|Move|Drag)\b/.test(t)&&!/\bnew\s+Tool\b/.test(t)?new st:null,a=s?s._events:[],o=["onFrame","onResize"].concat(a),h=[],l=[],f="object"==typeof t?t:C(t,i);function d(e,i){for(var n in e)!i&&/^_/.test(n)||!new RegExp("([\\b\\s\\W]|^)"+n.replace(/\$/g,"\\$")+"\\b").test(t)||(h.push(n),l.push(e[n]))}t=f.code,d({__$__:w,$__:b,paper:e,tool:s},!0),d(e),t="var module = { exports: {} }; "+t,(v=c.each(o,(function(e){new RegExp("\\s+"+e+"\\b").test(t)&&(h.push(e),this.push("module.exports."+e+" = "+e+";"))}),[]).join("\n"))&&(t+="\n"+v),t+="\nreturn module.exports;";var p=ft.agent;if(u&&(p.chrome||p.firefox&&p.versionNumber<40)){var g=u.createElement("script"),_=u.head||u.getElementsByTagName("head")[0];p.firefox&&(t="\n"+t),g.appendChild(u.createTextNode("document.__paperscript__ = function("+h+") {"+t+"\n}")),_.appendChild(g),n=u.__paperscript__,delete u.__paperscript__,_.removeChild(g)}else n=Function(h,t);var v,y=(v=n&&n.apply(e,l))||{};return c.each(a,(function(t){var e=y[t];e&&(s[t]=e)})),r&&(y.onResize&&r.setOnResize(y.onResize),r.emit("resize",{size:r.size,delta:new m}),y.onFrame&&r.setOnFrame(y.onFrame),r.requestUpdate()),v}function k(t){if(/^text\/(?:x-|)paperscript$/.test(t.type)&&"true"!==f.getAttribute(t,"ignore")){var e=f.getAttribute(t,"canvas"),i=u.getElementById(e),n=t.src||t.getAttribute("data-src"),r=f.hasAttribute(t,"async"),s="data-paper-scope";if(!i)throw new Error('Unable to find canvas with id "'+e+'"');var a=f.get(i.getAttribute(s))||(new f).setup(i);return i.setAttribute(s,a._id),n?ot({url:n,async:r,mimeType:"text/plain",onLoad:function(t){S(t,a,n)}}):S(t.innerHTML,a,t.baseURI),t.setAttribute("data-paper-ignore","true"),a}}function A(){c.each(u&&u.getElementsByTagName("script"),k)}return m.inject(y),x.inject(y),G.inject(y),h&&("complete"===u.readyState?setTimeout(A):J.add(h,{load:A})),{compile:C,execute:S,load:function(t){return t?k(t):A()},parse:g,calculateBinary:w,calculateUnary:b}}.call(this);var ft=new(f.inject(c.exports,{Base:c,Numerical:_,Key:it,DomEvent:J,DomElement:K,document:u,window:h,Symbol:N,PlacedSymbol:L}));return ft.agent.node&&i(316)(ft),(s="function"==typeof(r=ft)?r.call(e,i,e,t):r)===o||(t.exports=s),ft}).call(this,"object"==typeof self?self:null)},21:(t,e,i)=>{var n;!function(){"use strict";var r=.5*(Math.sqrt(3)-1),s=(3-Math.sqrt(3))/6,a=1/6,o=(Math.sqrt(5)-1)/4,h=(5-Math.sqrt(5))/20;function u(t){var e;e="function"==typeof t?t:t?function(){var t=0,e=0,i=0,n=1,r=l();t=r(" "),e=r(" "),i=r(" ");for(var s=0;s<arguments.length;s++)(t-=r(arguments[s]))<0&&(t+=1),(e-=r(arguments[s]))<0&&(e+=1),(i-=r(arguments[s]))<0&&(i+=1);return r=null,function(){var r=2091639*t+2.3283064365386963e-10*n;return t=e,e=i,i=r-(n=0|r)}}(t):Math.random,this.p=c(e),this.perm=new Uint8Array(512),this.permMod12=new Uint8Array(512);for(var i=0;i<512;i++)this.perm[i]=this.p[255&i],this.permMod12[i]=this.perm[i]%12}function c(t){var e,i=new Uint8Array(256);for(e=0;e<256;e++)i[e]=e;for(e=0;e<255;e++){var n=e+~~(t()*(256-e)),r=i[e];i[e]=i[n],i[n]=r}return i}function l(){var t=4022871197;return function(e){e=e.toString();for(var i=0;i<e.length;i++){var n=.02519603282416938*(t+=e.charCodeAt(i));n-=t=n>>>0,t=(n*=t)>>>0,t+=4294967296*(n-=t)}return 2.3283064365386963e-10*(t>>>0)}}u.prototype={grad3:new Float32Array([1,1,0,-1,1,0,1,-1,0,-1,-1,0,1,0,1,-1,0,1,1,0,-1,-1,0,-1,0,1,1,0,-1,1,0,1,-1,0,-1,-1]),grad4:new Float32Array([0,1,1,1,0,1,1,-1,0,1,-1,1,0,1,-1,-1,0,-1,1,1,0,-1,1,-1,0,-1,-1,1,0,-1,-1,-1,1,0,1,1,1,0,1,-1,1,0,-1,1,1,0,-1,-1,-1,0,1,1,-1,0,1,-1,-1,0,-1,1,-1,0,-1,-1,1,1,0,1,1,1,0,-1,1,-1,0,1,1,-1,0,-1,-1,1,0,1,-1,1,0,-1,-1,-1,0,1,-1,-1,0,-1,1,1,1,0,1,1,-1,0,1,-1,1,0,1,-1,-1,0,-1,1,1,0,-1,1,-1,0,-1,-1,1,0,-1,-1,-1,0]),noise2D:function(t,e){var i,n,a=this.permMod12,o=this.perm,h=this.grad3,u=0,c=0,l=0,f=(t+e)*r,d=Math.floor(t+f),p=Math.floor(e+f),g=(d+p)*s,_=t-(d-g),v=e-(p-g);_>v?(i=1,n=0):(i=0,n=1);var m=_-i+s,y=v-n+s,x=_-1+2*s,w=v-1+2*s,b=255&d,C=255&p,S=.5-_*_-v*v;if(S>=0){var k=3*a[b+o[C]];u=(S*=S)*S*(h[k]*_+h[k+1]*v)}var A=.5-m*m-y*y;if(A>=0){var I=3*a[b+i+o[C+n]];c=(A*=A)*A*(h[I]*m+h[I+1]*y)}var P=.5-x*x-w*w;if(P>=0){var E=3*a[b+1+o[C+1]];l=(P*=P)*P*(h[E]*x+h[E+1]*w)}return 70*(u+c+l)},noise3D:function(t,e,i){var n,r,s,o,h,u,c,l,f,d,p=this.permMod12,g=this.perm,_=this.grad3,v=.3333333333333333*(t+e+i),m=Math.floor(t+v),y=Math.floor(e+v),x=Math.floor(i+v),w=(m+y+x)*a,b=t-(m-w),C=e-(y-w),S=i-(x-w);b>=C?C>=S?(h=1,u=0,c=0,l=1,f=1,d=0):b>=S?(h=1,u=0,c=0,l=1,f=0,d=1):(h=0,u=0,c=1,l=1,f=0,d=1):C<S?(h=0,u=0,c=1,l=0,f=1,d=1):b<S?(h=0,u=1,c=0,l=0,f=1,d=1):(h=0,u=1,c=0,l=1,f=1,d=0);var k=b-h+a,A=C-u+a,I=S-c+a,P=b-l+2*a,E=C-f+2*a,T=S-d+2*a,M=b-1+.5,L=C-1+.5,N=S-1+.5,O=255&m,z=255&y,V=255&x,R=.6-b*b-C*C-S*S;if(R<0)n=0;else{var B=3*p[O+g[z+g[V]]];n=(R*=R)*R*(_[B]*b+_[B+1]*C+_[B+2]*S)}var D=.6-k*k-A*A-I*I;if(D<0)r=0;else{var F=3*p[O+h+g[z+u+g[V+c]]];r=(D*=D)*D*(_[F]*k+_[F+1]*A+_[F+2]*I)}var j=.6-P*P-E*E-T*T;if(j<0)s=0;else{var q=3*p[O+l+g[z+f+g[V+d]]];s=(j*=j)*j*(_[q]*P+_[q+1]*E+_[q+2]*T)}var U=.6-M*M-L*L-N*N;if(U<0)o=0;else{var H=3*p[O+1+g[z+1+g[V+1]]];o=(U*=U)*U*(_[H]*M+_[H+1]*L+_[H+2]*N)}return 32*(n+r+s+o)},noise4D:function(t,e,i,n){var r,s,a,u,c,l,f,d,p,g,_,v,m,y,x,w,b,C=this.perm,S=this.grad4,k=(t+e+i+n)*o,A=Math.floor(t+k),I=Math.floor(e+k),P=Math.floor(i+k),E=Math.floor(n+k),T=(A+I+P+E)*h,M=t-(A-T),L=e-(I-T),N=i-(P-T),O=n-(E-T),z=0,V=0,R=0,B=0;M>L?z++:V++,M>N?z++:R++,M>O?z++:B++,L>N?V++:R++,L>O?V++:B++,N>O?R++:B++;var D=M-(l=z>=3?1:0)+h,F=L-(f=V>=3?1:0)+h,j=N-(d=R>=3?1:0)+h,q=O-(p=B>=3?1:0)+h,U=M-(g=z>=2?1:0)+2*h,H=L-(_=V>=2?1:0)+2*h,W=N-(v=R>=2?1:0)+2*h,G=O-(m=B>=2?1:0)+2*h,Z=M-(y=z>=1?1:0)+3*h,$=L-(x=V>=1?1:0)+3*h,Q=N-(w=R>=1?1:0)+3*h,K=O-(b=B>=1?1:0)+3*h,J=M-1+4*h,X=L-1+4*h,Y=N-1+4*h,tt=O-1+4*h,et=255&A,it=255&I,nt=255&P,rt=255&E,st=.6-M*M-L*L-N*N-O*O;if(st<0)r=0;else{var at=C[et+C[it+C[nt+C[rt]]]]%32*4;r=(st*=st)*st*(S[at]*M+S[at+1]*L+S[at+2]*N+S[at+3]*O)}var ot=.6-D*D-F*F-j*j-q*q;if(ot<0)s=0;else{var ht=C[et+l+C[it+f+C[nt+d+C[rt+p]]]]%32*4;s=(ot*=ot)*ot*(S[ht]*D+S[ht+1]*F+S[ht+2]*j+S[ht+3]*q)}var ut=.6-U*U-H*H-W*W-G*G;if(ut<0)a=0;else{var ct=C[et+g+C[it+_+C[nt+v+C[rt+m]]]]%32*4;a=(ut*=ut)*ut*(S[ct]*U+S[ct+1]*H+S[ct+2]*W+S[ct+3]*G)}var lt=.6-Z*Z-$*$-Q*Q-K*K;if(lt<0)u=0;else{var ft=C[et+y+C[it+x+C[nt+w+C[rt+b]]]]%32*4;u=(lt*=lt)*lt*(S[ft]*Z+S[ft+1]*$+S[ft+2]*Q+S[ft+3]*K)}var dt=.6-J*J-X*X-Y*Y-tt*tt;if(dt<0)c=0;else{var pt=C[et+1+C[it+1+C[nt+1+C[rt+1]]]]%32*4;c=(dt*=dt)*dt*(S[pt]*J+S[pt+1]*X+S[pt+2]*Y+S[pt+3]*tt)}return 27*(r+s+a+u+c)}},u._buildPermutationTable=c,void 0===(n=function(){return u}.call(e,i,e,t))||(t.exports=n),e.SimplexNoise=u,t.exports=u}()},379:(t,e,i)=>{"use strict";var n,r=function(){var t={};return function(e){if(void 0===t[e]){var i=document.querySelector(e);if(window.HTMLIFrameElement&&i instanceof window.HTMLIFrameElement)try{i=i.contentDocument.head}catch(t){i=null}t[e]=i}return t[e]}}(),s=[];function a(t){for(var e=-1,i=0;i<s.length;i++)if(s[i].identifier===t){e=i;break}return e}function o(t,e){for(var i={},n=[],r=0;r<t.length;r++){var o=t[r],h=e.base?o[0]+e.base:o[0],u=i[h]||0,c="".concat(h," ").concat(u);i[h]=u+1;var l=a(c),f={css:o[1],media:o[2],sourceMap:o[3]};-1!==l?(s[l].references++,s[l].updater(f)):s.push({identifier:c,updater:g(f,e),references:1}),n.push(c)}return n}function h(t){var e=document.createElement("style"),n=t.attributes||{};if(void 0===n.nonce){var s=i.nc;s&&(n.nonce=s)}if(Object.keys(n).forEach((function(t){e.setAttribute(t,n[t])})),"function"==typeof t.insert)t.insert(e);else{var a=r(t.insert||"head");if(!a)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");a.appendChild(e)}return e}var u,c=(u=[],function(t,e){return u[t]=e,u.filter(Boolean).join("\n")});function l(t,e,i,n){var r=i?"":n.media?"@media ".concat(n.media," {").concat(n.css,"}"):n.css;if(t.styleSheet)t.styleSheet.cssText=c(e,r);else{var s=document.createTextNode(r),a=t.childNodes;a[e]&&t.removeChild(a[e]),a.length?t.insertBefore(s,a[e]):t.appendChild(s)}}function f(t,e,i){var n=i.css,r=i.media,s=i.sourceMap;if(r?t.setAttribute("media",r):t.removeAttribute("media"),s&&"undefined"!=typeof btoa&&(n+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(s))))," */")),t.styleSheet)t.styleSheet.cssText=n;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(n))}}var d=null,p=0;function g(t,e){var i,n,r;if(e.singleton){var s=p++;i=d||(d=h(e)),n=l.bind(null,i,s,!1),r=l.bind(null,i,s,!0)}else i=h(e),n=f.bind(null,i,e),r=function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(i)};return n(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap)return;n(t=e)}else r()}}t.exports=function(t,e){(e=e||{}).singleton||"boolean"==typeof e.singleton||(e.singleton=(void 0===n&&(n=Boolean(window&&document&&document.all&&!window.atob)),n));var i=o(t=t||[],e);return function(t){if(t=t||[],"[object Array]"===Object.prototype.toString.call(t)){for(var n=0;n<i.length;n++){var r=a(i[n]);s[r].references--}for(var h=o(t,e),u=0;u<i.length;u++){var c=a(i[u]);0===s[c].references&&(s[c].updater(),s.splice(c,1))}i=h}}}},316:()=>{},878:()=>{}},e={};function i(n){if(e[n])return e[n].exports;var r=e[n]={id:n,exports:{}};return t[n].call(r.exports,r,r.exports,i),r.exports}i.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return i.d(e,{a:e}),e},i.d=(t,e)=>{for(var n in e)i.o(e,n)&&!i.o(t,n)&&Object.defineProperty(t,n,{enumerable:!0,get:e[n]})},i.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),(()=>{"use strict";var t=i(267),e=i(21),n=i(379),r=i.n(n),s=i(256);r()(s.Z,{insert:"head",singleton:!1}),s.Z.locals,document.addEventListener("DOMContentLoaded",(function(){const i=document.querySelector(".cursor--small");(function(){const i=document.querySelector(".cursor--canvas");t.setup(i),p=new t.Path.RegularPolygon(new t.Point(0,0),4,d),p.strokeColor=new t.Color(255,0,0,.5),p.strokeWidth=1;const n=new t.Group([p]);n.applyMatrix=!1;const r=(t,e,i)=>(1-i)*t+i*e,s=(t,e,i,n,r)=>(t-e)*(r-n)/(i-e)+n,_=p.segments.map((()=>new e));t.view.onFrame=e=>{c?(o.x=r(o.x,h.x,.2),o.y=r(o.y,h.y,.2),n.position=new t.Point(o.x,o.y)):(o.x=r(o.x,a.x,.2),o.y=r(o.y,a.y,.2),n.position=new t.Point(o.x,o.y)),c?(p.bounds.width<u.width&&p.scale(1.08,1),p.bounds.height<u.height&&p.scale(1,1.08)):(l&&(p.segments.forEach(((t,e)=>{t.point.set(g[e][0],g[e][1])})),l=!1,g=[]),p.bounds.width>30&&p.scale(.92,1),p.bounds.height>30&&p.scale(1,.92)),c&&p.bounds.width>=u.width&&(l=!0,0===g.length&&p.segments.forEach(((t,e)=>{g[e]=[t.point.x,t.point.y]})),p.segments.forEach(((t,i)=>{const n=_[i].noise2D(e.count/f,0),r=_[i].noise2D(e.count/f,1),a=s(n,-1,1,-4,4),o=s(r,-1,1,-4,4),h=g[i][0]+a,u=g[i][1]+o;t.point.set(h,u)})))}})(),function(){let t=!1;const e=t=>{const e=t.getBoundingClientRect();h.x=Math.round(e.left+e.width/2),h.y=Math.round(e.top+e.height/2),u.width=e.width,u.height=e.height},i=t=>{const i=t.currentTarget;e(i),c=!0},n=()=>{t||(c=!1)},r=i=>{const n=i.target;c=!0,t=!0,e(n),p.segments.forEach(((t,e)=>{t.point.set(g[e][0],g[e][1])})),l=!1,g=[],p.scale(.1,.1)},s=()=>{c=!1,t=!1};document.querySelectorAll(".link").forEach((t=>{t.addEventListener("mouseenter",i),t.addEventListener("mouseleave",n),t.addEventListener("focus",r),t.addEventListener("blur",s)}))}();const n=()=>{i.style.transform=`translate(${a.x}px, ${a.y}px)`,requestAnimationFrame(n)};requestAnimationFrame(n)})),document.addEventListener("mousemove",(t=>{a.x=t.clientX,a.y=t.clientY}));const a={x:-100,y:-100},o={x:0,y:0},h={x:0,y:0},u={width:75,height:75};let c=!1,l=!1;const f=150,d=15;let p,g=[]})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,